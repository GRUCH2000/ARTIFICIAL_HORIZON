
ARTIFICIAL_HORIZON_GOOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08009680  08009680  00019680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b28  08009b28  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b30  08009b30  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b30  08009b30  00019b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b34  08009b34  00019b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08009b38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000278  08009dac  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08009dac  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015df3  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0e  00000000  00000000  00036097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00038ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00039f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ebb  00000000  00000000  0003b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ea0  00000000  00000000  00063fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7683  00000000  00000000  0007be4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001734ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000603c  00000000  00000000  00173520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009668 	.word	0x08009668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	08009668 	.word	0x08009668

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_GPIO_Init+0xac>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <MX_GPIO_Init+0xb0>)
 8000f7a:	f001 fa8d 	bl	8002498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2103      	movs	r1, #3
 8000f82:	2028      	movs	r0, #40	; 0x28
 8000f84:	f001 fa51 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f001 fa6a 	bl	8002462 <HAL_NVIC_EnableIRQ>

}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	48000800 	.word	0x48000800

08000fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_I2C1_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00606092;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <MX_I2C1_Init+0x7c>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fdc:	f001 fc29 	bl	8002832 <HAL_I2C_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe6:	f000 f9ea 	bl	80013be <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fee:	f002 f983 	bl	80032f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f000 f9e1 	bl	80013be <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_I2C1_Init+0x74>)
 8001000:	f002 f9c5 	bl	800338e <HAL_I2CEx_ConfigDigitalFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100a:	f000 f9d8 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000294 	.word	0x20000294
 8001018:	40005400 	.word	0x40005400
 800101c:	00606092 	.word	0x00606092

08001020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ac      	sub	sp, #176	; 0xb0
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2288      	movs	r2, #136	; 0x88
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fa85 	bl	8006550 <memset>
  if(i2cHandle->Instance==I2C1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <HAL_I2C_MspInit+0xb0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d13b      	bne.n	80010c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f847 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f000 f9a9 	bl	80013be <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_I2C_MspInit+0xb4>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_I2C_MspInit+0xb4>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_I2C_MspInit+0xb4>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001084:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800109e:	2304      	movs	r3, #4
 80010a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a8:	4619      	mov	r1, r3
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_I2C_MspInit+0xb8>)
 80010ac:	f001 f9f4 	bl	8002498 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_I2C_MspInit+0xb4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_I2C_MspInit+0xb4>)
 80010b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ba:	6593      	str	r3, [r2, #88]	; 0x58
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_I2C_MspInit+0xb4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010c8:	bf00      	nop
 80010ca:	37b0      	adds	r7, #176	; 0xb0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400

080010dc <__io_putchar>:

//HAL_TIM_IC_CaptureCallback(htim)


int __io_putchar(int ch)              // Funkcja od obsługi wyświetlania w monitorze portu szeregowego
  	{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  	    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010e4:	1d39      	adds	r1, r7, #4
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	2201      	movs	r2, #1
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <__io_putchar+0x20>)
 80010ee:	f004 fd09 	bl	8005b04 <HAL_UART_Transmit>
  	    return 1;
 80010f2:	2301      	movs	r3, #1
  	}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000394 	.word	0x20000394

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f001 f81c 	bl	8002142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f905 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff feed 	bl	8000eec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001112:	f000 ff61 	bl	8001fd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001116:	f7ff ff43 	bl	8000fa0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800111a:	f000 fe9f 	bl	8001e5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  while (MPU6050_Init(&hi2c1) == 1);
 800111e:	bf00      	nop
 8001120:	4875      	ldr	r0, [pc, #468]	; (80012f8 <main+0x1f8>)
 8001122:	f000 f951 	bl	80013c8 <MPU6050_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d0f9      	beq.n	8001120 <main+0x20>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800112c:	2100      	movs	r1, #0
 800112e:	4873      	ldr	r0, [pc, #460]	; (80012fc <main+0x1fc>)
 8001130:	f003 fcf2 	bl	8004b18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001134:	2104      	movs	r1, #4
 8001136:	4871      	ldr	r0, [pc, #452]	; (80012fc <main+0x1fc>)
 8001138:	f003 fcee 	bl	8004b18 <HAL_TIM_PWM_Start>

  for( int i=75;i<125;i++)
 800113c:	234b      	movs	r3, #75	; 0x4b
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e009      	b.n	8001156 <main+0x56>
 	  	  {
 	  	  	htim2.Instance->CCR1 = i;
 8001142:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <main+0x1fc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
 	  	  	HAL_Delay(30);
 800114a:	201e      	movs	r0, #30
 800114c:	f001 f86e 	bl	800222c <HAL_Delay>
  for( int i=75;i<125;i++)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3301      	adds	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b7c      	cmp	r3, #124	; 0x7c
 800115a:	ddf2      	ble.n	8001142 <main+0x42>
 	  	  }
  for(int i=125; i>25; i--)
 800115c:	237d      	movs	r3, #125	; 0x7d
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	e009      	b.n	8001176 <main+0x76>
 	  	  {
 	  	  	htim2.Instance->CCR1 = i;
 8001162:	4b66      	ldr	r3, [pc, #408]	; (80012fc <main+0x1fc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
 	  	  	HAL_Delay(30);
 800116a:	201e      	movs	r0, #30
 800116c:	f001 f85e 	bl	800222c <HAL_Delay>
  for(int i=125; i>25; i--)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	3b01      	subs	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b19      	cmp	r3, #25
 800117a:	dcf2      	bgt.n	8001162 <main+0x62>
 	  	  }
  for( int i=25;i<75;i++)
 800117c:	2319      	movs	r3, #25
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e009      	b.n	8001196 <main+0x96>
 	  	  {
 	  	  	htim2.Instance->CCR1 = i;
 8001182:	4b5e      	ldr	r3, [pc, #376]	; (80012fc <main+0x1fc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
 	  	  	HAL_Delay(30);
 800118a:	201e      	movs	r0, #30
 800118c:	f001 f84e 	bl	800222c <HAL_Delay>
  for( int i=25;i<75;i++)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b4a      	cmp	r3, #74	; 0x4a
 800119a:	ddf2      	ble.n	8001182 <main+0x82>
 	  	  }
 	  	HAL_Delay(1000);
 800119c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a0:	f001 f844 	bl	800222c <HAL_Delay>
  for( int i=62;i<74;i++)
 80011a4:	233e      	movs	r3, #62	; 0x3e
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	e009      	b.n	80011be <main+0xbe>
 	  	 {
 	  	 	htim2.Instance->CCR2 = i;
 80011aa:	4b54      	ldr	r3, [pc, #336]	; (80012fc <main+0x1fc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
 	  	 	HAL_Delay(80);
 80011b2:	2050      	movs	r0, #80	; 0x50
 80011b4:	f001 f83a 	bl	800222c <HAL_Delay>
  for( int i=62;i<74;i++)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b49      	cmp	r3, #73	; 0x49
 80011c2:	ddf2      	ble.n	80011aa <main+0xaa>
 	  	 }
  for(int i=74; i>50; i--)
 80011c4:	234a      	movs	r3, #74	; 0x4a
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	e009      	b.n	80011de <main+0xde>
 	  	 {
 	  	 	htim2.Instance->CCR2 = i;
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <main+0x1fc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
 	  	 	HAL_Delay(80);
 80011d2:	2050      	movs	r0, #80	; 0x50
 80011d4:	f001 f82a 	bl	800222c <HAL_Delay>
  for(int i=74; i>50; i--)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b32      	cmp	r3, #50	; 0x32
 80011e2:	dcf2      	bgt.n	80011ca <main+0xca>
 	  	 }
  for( int i=50;i<62;i++)
 80011e4:	2332      	movs	r3, #50	; 0x32
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	e009      	b.n	80011fe <main+0xfe>
 	  	 {
 	  	 	htim2.Instance->CCR2 = i;
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <main+0x1fc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	639a      	str	r2, [r3, #56]	; 0x38
 	  	 	HAL_Delay(80);
 80011f2:	2050      	movs	r0, #80	; 0x50
 80011f4:	f001 f81a 	bl	800222c <HAL_Delay>
  for( int i=50;i<62;i++)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b3d      	cmp	r3, #61	; 0x3d
 8001202:	ddf2      	ble.n	80011ea <main+0xea>
 	  	 }
 	  	 	HAL_Delay(1000);
 8001204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001208:	f001 f810 	bl	800222c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 800120c:	493c      	ldr	r1, [pc, #240]	; (8001300 <main+0x200>)
 800120e:	483a      	ldr	r0, [pc, #232]	; (80012f8 <main+0x1f8>)
 8001210:	f000 f932 	bl	8001478 <MPU6050_Read_All>
	  printf("a%lf\r\n",MPU6050.KalmanAngleX);
 8001214:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <main+0x200>)
 8001216:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800121a:	483a      	ldr	r0, [pc, #232]	; (8001304 <main+0x204>)
 800121c:	f005 fe0a 	bl	8006e34 <iprintf>
	  printf("b%lf\r\n",MPU6050.KalmanAngleY);
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <main+0x200>)
 8001222:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001226:	4838      	ldr	r0, [pc, #224]	; (8001308 <main+0x208>)
 8001228:	f005 fe04 	bl	8006e34 <iprintf>

	  wypracowanySygnalDoSerwomechanizmuKanaluPrzechylenia = przeliczSygnalZCzujnikaNaMikrosekundy(MPU6050.KalmanAngleX,-90,90,125,25);
 800122c:	4b34      	ldr	r3, [pc, #208]	; (8001300 <main+0x200>)
 800122e:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001232:	ed9f 4b29 	vldr	d4, [pc, #164]	; 80012d8 <main+0x1d8>
 8001236:	ed9f 3b2a 	vldr	d3, [pc, #168]	; 80012e0 <main+0x1e0>
 800123a:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 80012e8 <main+0x1e8>
 800123e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80012f0 <main+0x1f0>
 8001242:	eeb0 0a47 	vmov.f32	s0, s14
 8001246:	eef0 0a67 	vmov.f32	s1, s15
 800124a:	f000 fc56 	bl	8001afa <przeliczSygnalZCzujnikaNaMikrosekundy>
 800124e:	ec53 2b10 	vmov	r2, r3, d0
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fca7 	bl	8000ba8 <__aeabi_d2uiz>
 800125a:	4603      	mov	r3, r0
 800125c:	4a2b      	ldr	r2, [pc, #172]	; (800130c <main+0x20c>)
 800125e:	6013      	str	r3, [r2, #0]
	  wypracowanySygnalDoSerwomechanizmuKanaluPochylenia = przeliczSygnalZCzujnikaNaMikrosekundy(MPU6050.KalmanAngleY,-90, 90, 25, 125);
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <main+0x200>)
 8001262:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8001266:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80012e0 <main+0x1e0>
 800126a:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 80012d8 <main+0x1d8>
 800126e:	ed9f 2b1e 	vldr	d2, [pc, #120]	; 80012e8 <main+0x1e8>
 8001272:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80012f0 <main+0x1f0>
 8001276:	eeb0 0a47 	vmov.f32	s0, s14
 800127a:	eef0 0a67 	vmov.f32	s1, s15
 800127e:	f000 fc3c 	bl	8001afa <przeliczSygnalZCzujnikaNaMikrosekundy>
 8001282:	ec53 2b10 	vmov	r2, r3, d0
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc8d 	bl	8000ba8 <__aeabi_d2uiz>
 800128e:	4603      	mov	r3, r0
 8001290:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <main+0x210>)
 8001292:	6013      	str	r3, [r2, #0]
	  htim2.Instance->CCR1 = wypracowanySygnalDoSerwomechanizmuKanaluPrzechylenia;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <main+0x1fc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1c      	ldr	r2, [pc, #112]	; (800130c <main+0x20c>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
	  htim2.Instance->CCR2 = sprawdzenieKanaluPochylenia(wypracowanySygnalDoSerwomechanizmuKanaluPochylenia)-13;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <main+0x210>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f92e 	bl	8000504 <__aeabi_ui2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	ec43 2b10 	vmov	d0, r2, r3
 80012b0:	f000 fc6a 	bl	8001b88 <sprawdzenieKanaluPochylenia>
 80012b4:	ec51 0b10 	vmov	r0, r1, d0
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <main+0x214>)
 80012be:	f7fe ffe3 	bl	8000288 <__aeabi_dsub>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <main+0x1fc>)
 80012c8:	680c      	ldr	r4, [r1, #0]
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2uiz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	63a3      	str	r3, [r4, #56]	; 0x38
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80012d6:	e799      	b.n	800120c <main+0x10c>
 80012d8:	00000000 	.word	0x00000000
 80012dc:	40390000 	.word	0x40390000
 80012e0:	00000000 	.word	0x00000000
 80012e4:	405f4000 	.word	0x405f4000
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40568000 	.word	0x40568000
 80012f0:	00000000 	.word	0x00000000
 80012f4:	c0568000 	.word	0xc0568000
 80012f8:	20000294 	.word	0x20000294
 80012fc:	20000348 	.word	0x20000348
 8001300:	200002e8 	.word	0x200002e8
 8001304:	08009680 	.word	0x08009680
 8001308:	08009688 	.word	0x08009688
 800130c:	20000004 	.word	0x20000004
 8001310:	20000000 	.word	0x20000000
 8001314:	402a0000 	.word	0x402a0000

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b096      	sub	sp, #88	; 0x58
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2244      	movs	r2, #68	; 0x44
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f005 f912 	bl	8006550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800133a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800133e:	f002 f881 	bl	8003444 <HAL_PWREx_ControlVoltageScaling>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001348:	f000 f839 	bl	80013be <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800134c:	2310      	movs	r3, #16
 800134e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001358:	2360      	movs	r3, #96	; 0x60
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001360:	2301      	movs	r3, #1
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001368:	2319      	movs	r3, #25
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800136c:	2307      	movs	r3, #7
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4618      	mov	r0, r3
 800137e:	f002 f8b7 	bl	80034f0 <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001388:	f000 f819 	bl	80013be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2303      	movs	r3, #3
 8001392:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	2103      	movs	r1, #3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fc7e 	bl	8003ca8 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013b2:	f000 f804 	bl	80013be <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3758      	adds	r7, #88	; 0x58
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c2:	b672      	cpsid	i
}
 80013c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <Error_Handler+0x8>

080013c8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	2301      	movs	r3, #1
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	f107 030f 	add.w	r3, r7, #15
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	2275      	movs	r2, #117	; 0x75
 80013e2:	21d0      	movs	r1, #208	; 0xd0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f001 fbc7 	bl	8002b78 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b68      	cmp	r3, #104	; 0x68
 80013ee:	d13d      	bne.n	800146c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80013f4:	2364      	movs	r3, #100	; 0x64
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	f107 030e 	add.w	r3, r7, #14
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	226b      	movs	r2, #107	; 0x6b
 8001406:	21d0      	movs	r1, #208	; 0xd0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f001 faa1 	bl	8002950 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800140e:	2307      	movs	r3, #7
 8001410:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030e 	add.w	r3, r7, #14
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	2219      	movs	r2, #25
 8001424:	21d0      	movs	r1, #208	; 0xd0
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f001 fa92 	bl	8002950 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800142c:	2300      	movs	r3, #0
 800142e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001430:	2364      	movs	r3, #100	; 0x64
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2301      	movs	r3, #1
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	f107 030e 	add.w	r3, r7, #14
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	221c      	movs	r2, #28
 8001442:	21d0      	movs	r1, #208	; 0xd0
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f001 fa83 	bl	8002950 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800144a:	2300      	movs	r3, #0
 800144c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	f107 030e 	add.w	r3, r7, #14
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	221b      	movs	r2, #27
 8001460:	21d0      	movs	r1, #208	; 0xd0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f001 fa74 	bl	8002950 <HAL_I2C_Mem_Write>
        return 0;
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <MPU6050_Init+0xa6>
    }
    return 1;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800147c:	b094      	sub	sp, #80	; 0x50
 800147e:	af04      	add	r7, sp, #16
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	230e      	movs	r3, #14
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	223b      	movs	r2, #59	; 0x3b
 8001496:	21d0      	movs	r1, #208	; 0xd0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f001 fb6d 	bl	8002b78 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800149e:	7a3b      	ldrb	r3, [r7, #8]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	7a7b      	ldrb	r3, [r7, #9]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80014b0:	7abb      	ldrb	r3, [r7, #10]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	7afb      	ldrb	r3, [r7, #11]
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21a      	sxth	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80014c2:	7b3b      	ldrb	r3, [r7, #12]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80014e2:	7c3b      	ldrb	r3, [r7, #16]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	7c7b      	ldrb	r3, [r7, #17]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80014f4:	7cbb      	ldrb	r3, [r7, #18]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7cfb      	ldrb	r3, [r7, #19]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21a      	sxth	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001506:	7d3b      	ldrb	r3, [r7, #20]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	7d7b      	ldrb	r3, [r7, #21]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21a      	sxth	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f800 	bl	8000524 <__aeabi_i2d>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4bbd      	ldr	r3, [pc, #756]	; (8001820 <MPU6050_Read_All+0x3a8>)
 800152a:	f7ff f98f 	bl	800084c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe fff0 	bl	8000524 <__aeabi_i2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4bb5      	ldr	r3, [pc, #724]	; (8001820 <MPU6050_Read_All+0x3a8>)
 800154a:	f7ff f97f 	bl	800084c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffe0 	bl	8000524 <__aeabi_i2d>
 8001564:	a3a8      	add	r3, pc, #672	; (adr r3, 8001808 <MPU6050_Read_All+0x390>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f96f 	bl	800084c <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001578:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001824 <MPU6050_Read_All+0x3ac>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001828 <MPU6050_Read_All+0x3b0>
 8001590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_i2d>
 80015a6:	a39a      	add	r3, pc, #616	; (adr r3, 8001810 <MPU6050_Read_All+0x398>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f94e 	bl	800084c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	6839      	ldr	r1, [r7, #0]
 80015b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffaf 	bl	8000524 <__aeabi_i2d>
 80015c6:	a392      	add	r3, pc, #584	; (adr r3, 8001810 <MPU6050_Read_All+0x398>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff f93e 	bl	800084c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	6839      	ldr	r1, [r7, #0]
 80015d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff9f 	bl	8000524 <__aeabi_i2d>
 80015e6:	a38a      	add	r3, pc, #552	; (adr r3, 8001810 <MPU6050_Read_All+0x398>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f92e 	bl	800084c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	6839      	ldr	r1, [r7, #0]
 80015f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80015fa:	f000 fe0b 	bl	8002214 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b8a      	ldr	r3, [pc, #552]	; (800182c <MPU6050_Read_All+0x3b4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff7c 	bl	8000504 <__aeabi_ui2d>
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b87      	ldr	r3, [pc, #540]	; (8001830 <MPU6050_Read_All+0x3b8>)
 8001612:	f7ff f91b 	bl	800084c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800161e:	f000 fdf9 	bl	8002214 <HAL_GetTick>
 8001622:	4603      	mov	r3, r0
 8001624:	4a81      	ldr	r2, [pc, #516]	; (800182c <MPU6050_Read_All+0x3b4>)
 8001626:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162e:	461a      	mov	r2, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	fb03 f202 	mul.w	r2, r3, r2
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001640:	4619      	mov	r1, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff68 	bl	8000524 <__aeabi_i2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	ec43 2b10 	vmov	d0, r2, r3
 800165c:	f007 fe5b 	bl	8009316 <sqrt>
 8001660:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001670:	f7ff fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d11f      	bne.n	80016ba <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff4f 	bl	8000524 <__aeabi_i2d>
 8001686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800168a:	f7ff f8df 	bl	800084c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	ec43 2b17 	vmov	d7, r2, r3
 8001696:	eeb0 0a47 	vmov.f32	s0, s14
 800169a:	eef0 0a67 	vmov.f32	s1, s15
 800169e:	f007 fc8f 	bl	8008fc0 <atan>
 80016a2:	ec51 0b10 	vmov	r0, r1, d0
 80016a6:	a35c      	add	r3, pc, #368	; (adr r3, 8001818 <MPU6050_Read_All+0x3a0>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe ffa4 	bl	80005f8 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80016b8:	e005      	b.n	80016c6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	425b      	negs	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff28 	bl	8000524 <__aeabi_i2d>
 80016d4:	4682      	mov	sl, r0
 80016d6:	468b      	mov	fp, r1
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff20 	bl	8000524 <__aeabi_i2d>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	ec43 2b11 	vmov	d1, r2, r3
 80016ec:	ec4b ab10 	vmov	d0, sl, fp
 80016f0:	f007 fe0f 	bl	8009312 <atan2>
 80016f4:	ec51 0b10 	vmov	r0, r1, d0
 80016f8:	a347      	add	r3, pc, #284	; (adr r3, 8001818 <MPU6050_Read_All+0x3a0>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe ff7b 	bl	80005f8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <MPU6050_Read_All+0x3bc>)
 8001710:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001714:	f7ff f9e2 	bl	8000adc <__aeabi_dcmplt>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00a      	beq.n	8001734 <MPU6050_Read_All+0x2bc>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <MPU6050_Read_All+0x3c0>)
 800172a:	f7ff f9f5 	bl	8000b18 <__aeabi_dcmpgt>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d114      	bne.n	800175e <MPU6050_Read_All+0x2e6>
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <MPU6050_Read_All+0x3c0>)
 800173a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800173e:	f7ff f9eb 	bl	8000b18 <__aeabi_dcmpgt>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <MPU6050_Read_All+0x2fc>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b38      	ldr	r3, [pc, #224]	; (8001834 <MPU6050_Read_All+0x3bc>)
 8001754:	f7ff f9c2 	bl	8000adc <__aeabi_dcmplt>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800175e:	4937      	ldr	r1, [pc, #220]	; (800183c <MPU6050_Read_All+0x3c4>)
 8001760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001764:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001772:	e014      	b.n	800179e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800177a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800177e:	eeb0 1a47 	vmov.f32	s2, s14
 8001782:	eef0 1a67 	vmov.f32	s3, s15
 8001786:	ed97 0b06 	vldr	d0, [r7, #24]
 800178a:	482c      	ldr	r0, [pc, #176]	; (800183c <MPU6050_Read_All+0x3c4>)
 800178c:	f000 f85a 	bl	8001844 <Kalman_getAngle>
 8001790:	eeb0 7a40 	vmov.f32	s14, s0
 8001794:	eef0 7a60 	vmov.f32	s15, s1
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80017a4:	4690      	mov	r8, r2
 80017a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MPU6050_Read_All+0x3c0>)
 80017b0:	4640      	mov	r0, r8
 80017b2:	4649      	mov	r1, r9
 80017b4:	f7ff f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017c4:	4614      	mov	r4, r2
 80017c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017d6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80017da:	eeb0 1a47 	vmov.f32	s2, s14
 80017de:	eef0 1a67 	vmov.f32	s3, s15
 80017e2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <MPU6050_Read_All+0x3c8>)
 80017e8:	f000 f82c 	bl	8001844 <Kalman_getAngle>
 80017ec:	eeb0 7a40 	vmov.f32	s14, s0
 80017f0:	eef0 7a60 	vmov.f32	s15, s1
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80017fa:	bf00      	nop
 80017fc:	3740      	adds	r7, #64	; 0x40
 80017fe:	46bd      	mov	sp, r7
 8001800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001804:	f3af 8000 	nop.w
 8001808:	00000000 	.word	0x00000000
 800180c:	40cc2900 	.word	0x40cc2900
 8001810:	00000000 	.word	0x00000000
 8001814:	40606000 	.word	0x40606000
 8001818:	1a63c1f8 	.word	0x1a63c1f8
 800181c:	404ca5dc 	.word	0x404ca5dc
 8001820:	40d00000 	.word	0x40d00000
 8001824:	43aa0000 	.word	0x43aa0000
 8001828:	42121eb8 	.word	0x42121eb8
 800182c:	20000340 	.word	0x20000340
 8001830:	408f4000 	.word	0x408f4000
 8001834:	c0568000 	.word	0xc0568000
 8001838:	40568000 	.word	0x40568000
 800183c:	20000050 	.word	0x20000050
 8001840:	20000008 	.word	0x20000008

08001844 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b096      	sub	sp, #88	; 0x58
 8001848:	af00      	add	r7, sp, #0
 800184a:	61f8      	str	r0, [r7, #28]
 800184c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001850:	ed87 1b02 	vstr	d1, [r7, #8]
 8001854:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800185e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001862:	f7fe fd11 	bl	8000288 <__aeabi_dsub>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001874:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800187c:	f7fe febc 	bl	80005f8 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7fe fd00 	bl	800028c <__adddf3>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	69f9      	ldr	r1, [r7, #28]
 8001892:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80018a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80018b8:	f7fe fce6 	bl	8000288 <__aeabi_dsub>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80018ca:	f7fe fcdd 	bl	8000288 <__aeabi_dsub>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fcd6 	bl	800028c <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ec:	f7fe fe84 	bl	80005f8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcc8 	bl	800028c <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	69f9      	ldr	r1, [r7, #28]
 8001902:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001916:	f7fe fe6f 	bl	80005f8 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fcb1 	bl	8000288 <__aeabi_dsub>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	69f9      	ldr	r1, [r7, #28]
 800192c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800193c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001940:	f7fe fe5a 	bl	80005f8 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fc9c 	bl	8000288 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	69f9      	ldr	r1, [r7, #28]
 8001956:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800196a:	f7fe fe45 	bl	80005f8 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4620      	mov	r0, r4
 8001974:	4629      	mov	r1, r5
 8001976:	f7fe fc89 	bl	800028c <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	69f9      	ldr	r1, [r7, #28]
 8001980:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001990:	f7fe fc7c 	bl	800028c <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019a6:	f7fe ff51 	bl	800084c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80019b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019bc:	f7fe ff46 	bl	800084c <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019d2:	f7fe fc59 	bl	8000288 <__aeabi_dsub>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ec:	f7fe fe04 	bl	80005f8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fc48 	bl	800028c <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	69f9      	ldr	r1, [r7, #28]
 8001a02:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001a0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a14:	f7fe fdf0 	bl	80005f8 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fc34 	bl	800028c <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	69f9      	ldr	r1, [r7, #28]
 8001a2a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001a48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a50:	f7fe fdd2 	bl	80005f8 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fc14 	bl	8000288 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	69f9      	ldr	r1, [r7, #28]
 8001a66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001a70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a78:	f7fe fdbe 	bl	80005f8 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4620      	mov	r0, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	f7fe fc00 	bl	8000288 <__aeabi_dsub>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	69f9      	ldr	r1, [r7, #28]
 8001a8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001a98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fbec 	bl	8000288 <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	69f9      	ldr	r1, [r7, #28]
 8001ab6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ac0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ac4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ac8:	f7fe fd96 	bl	80005f8 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fbd8 	bl	8000288 <__aeabi_dsub>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	69f9      	ldr	r1, [r7, #28]
 8001ade:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ae8:	ec43 2b17 	vmov	d7, r2, r3
};
 8001aec:	eeb0 0a47 	vmov.f32	s0, s14
 8001af0:	eef0 0a67 	vmov.f32	s1, s15
 8001af4:	3758      	adds	r7, #88	; 0x58
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bdb0      	pop	{r4, r5, r7, pc}

08001afa <przeliczSygnalZCzujnikaNaMikrosekundy>:

#include "przeliczanie.h"


double przeliczSygnalZCzujnikaNaMikrosekundy(double sygnalWejsciowy, double minimalnaDlugoscSygnalu, double maksymalnaDlugoscSygnalu, double minimalneWychylenieSerwa, double maksymalneWychylenieSerwa)
{
 8001afa:	b5b0      	push	{r4, r5, r7, lr}
 8001afc:	b08a      	sub	sp, #40	; 0x28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	ed87 0b08 	vstr	d0, [r7, #32]
 8001b04:	ed87 1b06 	vstr	d1, [r7, #24]
 8001b08:	ed87 2b04 	vstr	d2, [r7, #16]
 8001b0c:	ed87 3b02 	vstr	d3, [r7, #8]
 8001b10:	ed87 4b00 	vstr	d4, [r7]
	return ((((sygnalWejsciowy - minimalnaDlugoscSygnalu)*(maksymalneWychylenieSerwa - minimalneWychylenieSerwa))/(maksymalnaDlugoscSygnalu - minimalnaDlugoscSygnalu)) + minimalneWychylenieSerwa);
 8001b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b1c:	f7fe fbb4 	bl	8000288 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4614      	mov	r4, r2
 8001b26:	461d      	mov	r5, r3
 8001b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b30:	f7fe fbaa 	bl	8000288 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fd5c 	bl	80005f8 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4614      	mov	r4, r2
 8001b46:	461d      	mov	r5, r3
 8001b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b50:	f7fe fb9a 	bl	8000288 <__aeabi_dsub>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4620      	mov	r0, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f7fe fe76 	bl	800084c <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b6c:	f7fe fb8e 	bl	800028c <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b78:	eeb0 0a47 	vmov.f32	s0, s14
 8001b7c:	eef0 0a67 	vmov.f32	s1, s15
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b88 <sprawdzenieKanaluPochylenia>:

double sprawdzenieKanaluPochylenia(double sygnalDoSerwomechanizmuKanaluPochylenia)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0b00 	vstr	d0, [r7]
	if (sygnalDoSerwomechanizmuKanaluPochylenia<63)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <sprawdzenieKanaluPochylenia+0x60>)
 8001b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b9c:	f7fe ff9e 	bl	8000adc <__aeabi_dcmplt>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <sprawdzenieKanaluPochylenia+0x26>
		{
		return 63;
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <sprawdzenieKanaluPochylenia+0x60>)
 8001bac:	e00f      	b.n	8001bce <sprawdzenieKanaluPochylenia+0x46>
		}
	else if(sygnalDoSerwomechanizmuKanaluPochylenia>87)
 8001bae:	a30c      	add	r3, pc, #48	; (adr r3, 8001be0 <sprawdzenieKanaluPochylenia+0x58>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bb8:	f7fe ffae 	bl	8000b18 <__aeabi_dcmpgt>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <sprawdzenieKanaluPochylenia+0x42>
		{
		return 87;
 8001bc2:	a307      	add	r3, pc, #28	; (adr r3, 8001be0 <sprawdzenieKanaluPochylenia+0x58>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	e001      	b.n	8001bce <sprawdzenieKanaluPochylenia+0x46>
		}
	else
		{
		return sygnalDoSerwomechanizmuKanaluPochylenia;
 8001bca:	e9d7 2300 	ldrd	r2, r3, [r7]
		}
}
 8001bce:	ec43 2b17 	vmov	d7, r2, r3
 8001bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd6:	eef0 0a67 	vmov.f32	s1, s15
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	00000000 	.word	0x00000000
 8001be4:	4055c000 	.word	0x4055c000
 8001be8:	404f8000 	.word	0x404f8000

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_MspInit+0x44>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_MspInit+0x44>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x44>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x44>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <NMI_Handler+0x4>

08001c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <HardFault_Handler+0x4>

08001c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <MemManage_Handler+0x4>

08001c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c80:	f000 fab4 	bl	80021ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <TIM2_IRQHandler+0x10>)
 8001c8e:	f003 f849 	bl	8004d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000348 	.word	0x20000348

08001c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001ca0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ca4:	f000 fda2 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return 1;
 8001cb0:	2301      	movs	r3, #1
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_kill>:

int _kill(int pid, int sig)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cc6:	f004 fc19 	bl	80064fc <__errno>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2216      	movs	r2, #22
 8001cce:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_exit>:

void _exit (int status)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ffe7 	bl	8001cbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cee:	e7fe      	b.n	8001cee <_exit+0x12>

08001cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e00a      	b.n	8001d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d02:	f3af 8000 	nop.w
 8001d06:	4601      	mov	r1, r0
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	b2ca      	uxtb	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf0      	blt.n	8001d02 <_read+0x12>
  }

  return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e009      	b.n	8001d50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f9c9 	bl	80010dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbf1      	blt.n	8001d3c <_write+0x12>
  }
  return len;
 8001d58:	687b      	ldr	r3, [r7, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_close>:

int _close(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_isatty>:

int _isatty(int file)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f004 fb7e 	bl	80064fc <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20018000 	.word	0x20018000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	20000344 	.word	0x20000344
 8001e34:	20000430 	.word	0x20000430

08001e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	615a      	str	r2, [r3, #20]
 8001e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001e8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001eaa:	481e      	ldr	r0, [pc, #120]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001eac:	f002 fddc 	bl	8004a68 <HAL_TIM_PWM_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001eb6:	f7ff fa82 	bl	80013be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4816      	ldr	r0, [pc, #88]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001eca:	f003 fd27 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001ed4:	f7ff fa73 	bl	80013be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed8:	2360      	movs	r3, #96	; 0x60
 8001eda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2200      	movs	r2, #0
 8001eec:	4619      	mov	r1, r3
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001ef0:	f003 f838 	bl	8004f64 <HAL_TIM_PWM_ConfigChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001efa:	f7ff fa60 	bl	80013be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	2204      	movs	r2, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001f06:	f003 f82d 	bl	8004f64 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001f10:	f7ff fa55 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <MX_TIM2_Init+0xc8>)
 8001f16:	f000 f82b 	bl	8001f70 <HAL_TIM_MspPostInit>

}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000348 	.word	0x20000348

08001f28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d113      	bne.n	8001f62 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_TIM_PWM_MspInit+0x44>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_TIM_PWM_MspInit+0x44>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6593      	str	r3, [r2, #88]	; 0x58
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_TIM_PWM_MspInit+0x44>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2101      	movs	r1, #1
 8001f56:	201c      	movs	r0, #28
 8001f58:	f000 fa67 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f5c:	201c      	movs	r0, #28
 8001f5e:	f000 fa80 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d11c      	bne.n	8001fcc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_TIM_MspPostInit+0x64>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_TIM_MspPostInit+0x64>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_TIM_MspPostInit+0x64>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = servo_1_Pin|servo_2_Pin;
 8001faa:	2303      	movs	r3, #3
 8001fac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc8:	f000 fa66 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <MX_USART2_UART_Init+0x5c>)
 8001fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8001fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8001ffe:	220c      	movs	r2, #12
 8002000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_USART2_UART_Init+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_USART2_UART_Init+0x58>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_USART2_UART_Init+0x58>)
 800201c:	f003 fd24 	bl	8005a68 <HAL_UART_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002026:	f7ff f9ca 	bl	80013be <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000394 	.word	0x20000394
 8002034:	40004400 	.word	0x40004400

08002038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0ac      	sub	sp, #176	; 0xb0
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2288      	movs	r2, #136	; 0x88
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f004 fa79 	bl	8006550 <memset>
  if(uartHandle->Instance==USART2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <HAL_UART_MspInit+0xb0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d13b      	bne.n	80020e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002068:	2302      	movs	r3, #2
 800206a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800206c:	2300      	movs	r3, #0
 800206e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4618      	mov	r0, r3
 8002076:	f002 f83b 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002080:	f7ff f99d 	bl	80013be <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_UART_MspInit+0xb4>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_UART_MspInit+0xb4>)
 800208a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208e:	6593      	str	r3, [r2, #88]	; 0x58
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_UART_MspInit+0xb4>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_UART_MspInit+0xb4>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	4a12      	ldr	r2, [pc, #72]	; (80020ec <HAL_UART_MspInit+0xb4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_UART_MspInit+0xb4>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020b4:	230c      	movs	r3, #12
 80020b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020cc:	2307      	movs	r3, #7
 80020ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020dc:	f000 f9dc 	bl	8002498 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020e0:	bf00      	nop
 80020e2:	37b0      	adds	r7, #176	; 0xb0
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40004400 	.word	0x40004400
 80020ec:	40021000 	.word	0x40021000

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff fea0 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <LoopForever+0x6>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	; (8002130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <LoopForever+0xe>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	; (800213c <LoopForever+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f004 f9f3 	bl	8006508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7fe ffed 	bl	8001100 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002128:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002134:	08009b38 	.word	0x08009b38
  ldr r2, =_sbss
 8002138:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800213c:	2000042c 	.word	0x2000042c

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>

08002142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f961 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f80e 	bl	8002174 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	e001      	b.n	8002168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002164:	f7ff fd42 	bl	8001bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002168:	79fb      	ldrb	r3, [r7, #7]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_InitTick+0x6c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_InitTick+0x70>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_InitTick+0x6c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f96d 	bl	800247e <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10f      	bne.n	80021ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d809      	bhi.n	80021c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 f937 	bl	800242a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_InitTick+0x74>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e007      	b.n	80021d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e004      	b.n	80021d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e001      	b.n	80021d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200000a0 	.word	0x200000a0
 80021e4:	20000098 	.word	0x20000098
 80021e8:	2000009c 	.word	0x2000009c

080021ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200000a0 	.word	0x200000a0
 8002210:	20000418 	.word	0x20000418

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000418 	.word	0x20000418

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff ffee 	bl	8002214 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002252:	bf00      	nop
 8002254:	f7ff ffde 	bl	8002214 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200000a0 	.word	0x200000a0

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	e17f      	b.n	80027a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	4013      	ands	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8171 	beq.w	80027a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d005      	beq.n	80024d8 <HAL_GPIO_Init+0x40>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0201 	and.w	r2, r3, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d118      	bne.n	8002578 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	6939      	ldr	r1, [r7, #16]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80ac 	beq.w	80027a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_GPIO_Init+0x330>)
 800264c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264e:	4a5e      	ldr	r2, [pc, #376]	; (80027c8 <HAL_GPIO_Init+0x330>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6613      	str	r3, [r2, #96]	; 0x60
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <HAL_GPIO_Init+0x330>)
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002662:	4a5a      	ldr	r2, [pc, #360]	; (80027cc <HAL_GPIO_Init+0x334>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x242>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <HAL_GPIO_Init+0x338>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x23e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_GPIO_Init+0x33c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x23a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x340>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x236>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_GPIO_Init+0x344>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x232>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_GPIO_Init+0x348>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x22e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x34c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x22a>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00c      	b.n	80026dc <HAL_GPIO_Init+0x244>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00a      	b.n	80026dc <HAL_GPIO_Init+0x244>
 80026c6:	2305      	movs	r3, #5
 80026c8:	e008      	b.n	80026dc <HAL_GPIO_Init+0x244>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x244>
 80026ce:	2303      	movs	r3, #3
 80026d0:	e004      	b.n	80026dc <HAL_GPIO_Init+0x244>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x244>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x244>
 80026da:	2300      	movs	r3, #0
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	f002 0203 	and.w	r2, r2, #3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4093      	lsls	r3, r2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_GPIO_Init+0x334>)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_GPIO_Init+0x350>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800271e:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_GPIO_Init+0x350>)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002724:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_GPIO_Init+0x350>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <HAL_GPIO_Init+0x350>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_GPIO_Init+0x350>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_GPIO_Init+0x350>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_GPIO_Init+0x350>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	43db      	mvns	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <HAL_GPIO_Init+0x350>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3301      	adds	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f47f ae78 	bne.w	80024a8 <HAL_GPIO_Init+0x10>
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010000 	.word	0x40010000
 80027d0:	48000400 	.word	0x48000400
 80027d4:	48000800 	.word	0x48000800
 80027d8:	48000c00 	.word	0x48000c00
 80027dc:	48001000 	.word	0x48001000
 80027e0:	48001400 	.word	0x48001400
 80027e4:	48001800 	.word	0x48001800
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f806 	bl	800281c <HAL_GPIO_EXTI_Callback>
  }
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e081      	b.n	8002948 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fe fbe1 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2224      	movs	r2, #36	; 0x24
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002882:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002892:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d104      	bne.n	80028cc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69d9      	ldr	r1, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b20      	cmp	r3, #32
 8002974:	f040 80f9 	bne.w	8002b6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_I2C_Mem_Write+0x34>
 800297e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0ed      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_I2C_Mem_Write+0x4e>
 800299a:	2302      	movs	r3, #2
 800299c:	e0e6      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a6:	f7ff fc35 	bl	8002214 <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2319      	movs	r3, #25
 80029b2:	2201      	movs	r2, #1
 80029b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fac3 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0d1      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2221      	movs	r2, #33	; 0x21
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f0:	88f8      	ldrh	r0, [r7, #6]
 80029f2:	893a      	ldrh	r2, [r7, #8]
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4603      	mov	r3, r0
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f9d3 	bl	8002dac <I2C_RequestMemoryWrite>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0a9      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d90e      	bls.n	8002a40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	8979      	ldrh	r1, [r7, #10]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fc2b 	bl	8003294 <I2C_TransferConfig>
 8002a3e:	e00f      	b.n	8002a60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	2300      	movs	r3, #0
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fc1a 	bl	8003294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 faad 	bl	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e07b      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d034      	beq.n	8002b18 <HAL_I2C_Mem_Write+0x1c8>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d130      	bne.n	8002b18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fa3f 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04d      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	d90e      	bls.n	8002af8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fbcf 	bl	8003294 <I2C_TransferConfig>
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fbbe 	bl	8003294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d19e      	bne.n	8002a60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fa8c 	bl	8003044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e01a      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_I2C_Mem_Write+0x224>)
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	fe00e800 	.word	0xfe00e800

08002b78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	f040 80fd 	bne.w	8002d9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_I2C_Mem_Read+0x34>
 8002ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0f1      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Mem_Read+0x4e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0ea      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bce:	f7ff fb21 	bl	8002214 <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2319      	movs	r3, #25
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f9af 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0d5      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2222      	movs	r2, #34	; 0x22
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c18:	88f8      	ldrh	r0, [r7, #6]
 8002c1a:	893a      	ldrh	r2, [r7, #8]
 8002c1c:	8979      	ldrh	r1, [r7, #10]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4603      	mov	r3, r0
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f913 	bl	8002e54 <I2C_RequestMemoryRead>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0ad      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2bff      	cmp	r3, #255	; 0xff
 8002c48:	d90e      	bls.n	8002c68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	22ff      	movs	r2, #255	; 0xff
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <HAL_I2C_Mem_Read+0x22c>)
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fb17 	bl	8003294 <I2C_TransferConfig>
 8002c66:	e00f      	b.n	8002c88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	8979      	ldrh	r1, [r7, #10]
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_I2C_Mem_Read+0x22c>)
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fb06 	bl	8003294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2104      	movs	r1, #4
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f956 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07c      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d034      	beq.n	8002d48 <HAL_I2C_Mem_Read+0x1d0>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d130      	bne.n	8002d48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	2200      	movs	r2, #0
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f927 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04d      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2bff      	cmp	r3, #255	; 0xff
 8002d08:	d90e      	bls.n	8002d28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	22ff      	movs	r2, #255	; 0xff
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	8979      	ldrh	r1, [r7, #10]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fab7 	bl	8003294 <I2C_TransferConfig>
 8002d26:	e00f      	b.n	8002d48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	8979      	ldrh	r1, [r7, #10]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 faa6 	bl	8003294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d19a      	bne.n	8002c88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f974 	bl	8003044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e01a      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_I2C_Mem_Read+0x230>)
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	80002400 	.word	0x80002400
 8002da8:	fe00e800 	.word	0xfe00e800

08002dac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	8979      	ldrh	r1, [r7, #10]
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <I2C_RequestMemoryWrite+0xa4>)
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fa5d 	bl	8003294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	69b9      	ldr	r1, [r7, #24]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f8f0 	bl	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e02c      	b.n	8002e48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
 8002dfe:	e015      	b.n	8002e2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8d6 	bl	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e012      	b.n	8002e48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e22:	893b      	ldrh	r3, [r7, #8]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2200      	movs	r2, #0
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f884 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	80002000 	.word	0x80002000

08002e54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <I2C_RequestMemoryRead+0xa4>)
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fa0a 	bl	8003294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f89d 	bl	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e02c      	b.n	8002eee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d105      	bne.n	8002ea6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e9a:	893b      	ldrh	r3, [r7, #8]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea4:	e015      	b.n	8002ed2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea6:	893b      	ldrh	r3, [r7, #8]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f883 	bl	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e012      	b.n	8002eee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2140      	movs	r1, #64	; 0x40
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f831 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	80002000 	.word	0x80002000

08002efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d103      	bne.n	8002f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d007      	beq.n	8002f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	619a      	str	r2, [r3, #24]
  }
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	e022      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d01e      	beq.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5e:	f7ff f959 	bl	8002214 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d113      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e00f      	b.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d0cd      	beq.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fd0:	e02c      	b.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f870 	bl	80030bc <I2C_IsErrorOccurred>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e02a      	b.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d01e      	beq.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7ff f911 	bl	8002214 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d113      	bne.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e007      	b.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d1cb      	bne.n	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003050:	e028      	b.n	80030a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f830 	bl	80030bc <I2C_IsErrorOccurred>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e026      	b.n	80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7ff f8d5 	bl	8002214 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d113      	bne.n	80030a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d1cf      	bne.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d075      	beq.n	80031d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2210      	movs	r2, #16
 80030ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030f0:	e056      	b.n	80031a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d052      	beq.n	80031a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7ff f88b 	bl	8002214 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <I2C_IsErrorOccurred+0x54>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d147      	bne.n	80031a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003122:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003132:	d12e      	bne.n	8003192 <I2C_IsErrorOccurred+0xd6>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800313a:	d02a      	beq.n	8003192 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d027      	beq.n	8003192 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003150:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003152:	f7ff f85f 	bl	8002214 <HAL_GetTick>
 8003156:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003158:	e01b      	b.n	8003192 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800315a:	f7ff f85b 	bl	8002214 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b19      	cmp	r3, #25
 8003166:	d914      	bls.n	8003192 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d1dc      	bne.n	800315a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d003      	beq.n	80031b6 <I2C_IsErrorOccurred+0xfa>
 80031ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d09d      	beq.n	80030f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2220      	movs	r2, #32
 80031c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01c      	beq.n	8003284 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff fe56 	bl	8002efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <I2C_IsErrorOccurred+0x1d4>)
 800325c:	400b      	ands	r3, r1
 800325e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003288:	4618      	mov	r0, r3
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	fe00e800 	.word	0xfe00e800

08003294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	817b      	strh	r3, [r7, #10]
 80032a2:	4613      	mov	r3, r2
 80032a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ac:	7a7b      	ldrb	r3, [r7, #9]
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	4313      	orrs	r3, r2
 80032be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	0d5b      	lsrs	r3, r3, #21
 80032ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <I2C_TransferConfig+0x60>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	43db      	mvns	r3, r3
 80032d8:	ea02 0103 	and.w	r1, r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	03ff63ff 	.word	0x03ff63ff

080032f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b20      	cmp	r3, #32
 800330c:	d138      	bne.n	8003380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003318:	2302      	movs	r3, #2
 800331a:	e032      	b.n	8003382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800334a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6819      	ldr	r1, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d139      	bne.n	8003418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e033      	b.n	800341a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2224      	movs	r2, #36	; 0x24
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HAL_PWREx_GetVoltageRange+0x18>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000

08003444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003452:	d130      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800345c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003460:	d038      	beq.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800346a:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2232      	movs	r2, #50	; 0x32
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0c9b      	lsrs	r3, r3, #18
 8003484:	3301      	adds	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003488:	e002      	b.n	8003490 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3b01      	subs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349c:	d102      	bne.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f2      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d110      	bne.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e00f      	b.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d007      	beq.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034cc:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40007000 	.word	0x40007000
 80034e8:	20000098 	.word	0x20000098
 80034ec:	431bde83 	.word	0x431bde83

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e3ca      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003502:	4b97      	ldr	r3, [pc, #604]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80e4 	beq.w	80036ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_RCC_OscConfig+0x4a>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	f040 808b 	bne.w	8003648 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 8087 	bne.w	8003648 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800353a:	4b89      	ldr	r3, [pc, #548]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e3a2      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	4b82      	ldr	r3, [pc, #520]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_RCC_OscConfig+0x7c>
 8003562:	4b7f      	ldr	r3, [pc, #508]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356a:	e005      	b.n	8003578 <HAL_RCC_OscConfig+0x88>
 800356c:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003578:	4293      	cmp	r3, r2
 800357a:	d223      	bcs.n	80035c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fd55 	bl	8004030 <RCC_SetFlashLatencyFromMSIRange>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e383      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003590:	4b73      	ldr	r3, [pc, #460]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a72      	ldr	r2, [pc, #456]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003596:	f043 0308 	orr.w	r3, r3, #8
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b70      	ldr	r3, [pc, #448]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	496d      	ldr	r1, [pc, #436]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ae:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	4968      	ldr	r1, [pc, #416]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
 80035c2:	e025      	b.n	8003610 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c4:	4b66      	ldr	r3, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a65      	ldr	r2, [pc, #404]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035ca:	f043 0308 	orr.w	r3, r3, #8
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4960      	ldr	r1, [pc, #384]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035e2:	4b5f      	ldr	r3, [pc, #380]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	495b      	ldr	r1, [pc, #364]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fd15 	bl	8004030 <RCC_SetFlashLatencyFromMSIRange>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e343      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003610:	f000 fc4a 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b52      	ldr	r3, [pc, #328]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	4950      	ldr	r1, [pc, #320]	; (8003764 <HAL_RCC_OscConfig+0x274>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	4a4e      	ldr	r2, [pc, #312]	; (8003768 <HAL_RCC_OscConfig+0x278>)
 800362e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003630:	4b4e      	ldr	r3, [pc, #312]	; (800376c <HAL_RCC_OscConfig+0x27c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fd9d 	bl	8002174 <HAL_InitTick>
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d052      	beq.n	80036ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	e327      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d032      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003650:	4b43      	ldr	r3, [pc, #268]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a42      	ldr	r2, [pc, #264]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800365c:	f7fe fdda 	bl	8002214 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003664:	f7fe fdd6 	bl	8002214 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e310      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a36      	ldr	r2, [pc, #216]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003688:	f043 0308 	orr.w	r3, r3, #8
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4931      	ldr	r1, [pc, #196]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	492c      	ldr	r1, [pc, #176]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	e01a      	b.n	80036ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a29      	ldr	r2, [pc, #164]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c2:	f7fe fda7 	bl	8002214 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ca:	f7fe fda3 	bl	8002214 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e2dd      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0x1da>
 80036e8:	e000      	b.n	80036ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d074      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x21a>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b0c      	cmp	r3, #12
 8003702:	d10e      	bne.n	8003722 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d10b      	bne.n	8003722 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d064      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2f0>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d160      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e2ba      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x24a>
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e026      	b.n	8003788 <HAL_RCC_OscConfig+0x298>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003742:	d115      	bne.n	8003770 <HAL_RCC_OscConfig+0x280>
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 800374a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a02      	ldr	r2, [pc, #8]	; (8003760 <HAL_RCC_OscConfig+0x270>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x298>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	08009690 	.word	0x08009690
 8003768:	20000098 	.word	0x20000098
 800376c:	2000009c 	.word	0x2000009c
 8003770:	4ba0      	ldr	r3, [pc, #640]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a9f      	ldr	r2, [pc, #636]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b9d      	ldr	r3, [pc, #628]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a9c      	ldr	r2, [pc, #624]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe fd40 	bl	8002214 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe fd3c 	bl	8002214 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e276      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037aa:	4b92      	ldr	r3, [pc, #584]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x2a8>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fd2c 	bl	8002214 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe fd28 	bl	8002214 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e262      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d2:	4b88      	ldr	r3, [pc, #544]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d0>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d060      	beq.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_OscConfig+0x310>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d119      	bne.n	800382e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d116      	bne.n	800382e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003800:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x328>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e23f      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	4973      	ldr	r1, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382c:	e040      	b.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d023      	beq.n	800387e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003836:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe fce7 	bl	8002214 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe fce3 	bl	8002214 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e21d      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800385c:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b62      	ldr	r3, [pc, #392]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	495f      	ldr	r1, [pc, #380]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
 800387c:	e018      	b.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387e:	4b5d      	ldr	r3, [pc, #372]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5c      	ldr	r2, [pc, #368]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fe fcc3 	bl	8002214 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003892:	f7fe fcbf 	bl	8002214 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e1f9      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d03c      	beq.n	8003936 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01c      	beq.n	80038fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c4:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80038c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ca:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fc9e 	bl	8002214 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe fc9a 	bl	8002214 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e1d4      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80038f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ef      	beq.n	80038dc <HAL_RCC_OscConfig+0x3ec>
 80038fc:	e01b      	b.n	8003936 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fe:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003904:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fe fc81 	bl	8002214 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003916:	f7fe fc7d 	bl	8002214 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e1b7      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ef      	bne.n	8003916 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80a6 	beq.w	8003a90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395e:	6593      	str	r3, [r2, #88]	; 0x58
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396c:	2301      	movs	r3, #1
 800396e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <HAL_RCC_OscConfig+0x508>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d118      	bne.n	80039ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_RCC_OscConfig+0x508>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_RCC_OscConfig+0x508>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003988:	f7fe fc44 	bl	8002214 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003990:	f7fe fc40 	bl	8002214 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e17a      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_RCC_OscConfig+0x508>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4d8>
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039c6:	e029      	b.n	8003a1c <HAL_RCC_OscConfig+0x52c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d115      	bne.n	80039fc <HAL_RCC_OscConfig+0x50c>
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	4a03      	ldr	r2, [pc, #12]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039f0:	e014      	b.n	8003a1c <HAL_RCC_OscConfig+0x52c>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	4b9c      	ldr	r3, [pc, #624]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	4a9b      	ldr	r2, [pc, #620]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a0c:	4b98      	ldr	r3, [pc, #608]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	4a97      	ldr	r2, [pc, #604]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d016      	beq.n	8003a52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fe fbf6 	bl	8002214 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fbf2 	bl	8002214 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e12a      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a42:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ed      	beq.n	8003a2c <HAL_RCC_OscConfig+0x53c>
 8003a50:	e015      	b.n	8003a7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fe fbdf 	bl	8002214 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe fbdb 	bl	8002214 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e113      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a70:	4b7f      	ldr	r3, [pc, #508]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ed      	bne.n	8003a5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a84:	4b7a      	ldr	r3, [pc, #488]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	4a79      	ldr	r2, [pc, #484]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80fe 	beq.w	8003c96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	f040 80d0 	bne.w	8003c44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003aa4:	4b72      	ldr	r3, [pc, #456]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f003 0203 	and.w	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d130      	bne.n	8003b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d127      	bne.n	8003b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d11f      	bne.n	8003b1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae4:	2a07      	cmp	r2, #7
 8003ae6:	bf14      	ite	ne
 8003ae8:	2201      	movne	r2, #1
 8003aea:	2200      	moveq	r2, #0
 8003aec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d113      	bne.n	8003b1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	085b      	lsrs	r3, r3, #1
 8003afe:	3b01      	subs	r3, #1
 8003b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	3b01      	subs	r3, #1
 8003b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d06e      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d069      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0ad      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a4b      	ldr	r2, [pc, #300]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b48:	f7fe fb64 	bl	8002214 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fb60 	bl	8002214 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e09a      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b62:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6e:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	4b40      	ldr	r3, [pc, #256]	; (8003c74 <HAL_RCC_OscConfig+0x784>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b7e:	3a01      	subs	r2, #1
 8003b80:	0112      	lsls	r2, r2, #4
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b88:	0212      	lsls	r2, r2, #8
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b90:	0852      	lsrs	r2, r2, #1
 8003b92:	3a01      	subs	r2, #1
 8003b94:	0552      	lsls	r2, r2, #21
 8003b96:	4311      	orrs	r1, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b9c:	0852      	lsrs	r2, r2, #1
 8003b9e:	3a01      	subs	r2, #1
 8003ba0:	0652      	lsls	r2, r2, #25
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba8:	0912      	lsrs	r2, r2, #4
 8003baa:	0452      	lsls	r2, r2, #17
 8003bac:	430a      	orrs	r2, r1
 8003bae:	4930      	ldr	r1, [pc, #192]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bcc:	f7fe fb22 	bl	8002214 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe fb1e 	bl	8002214 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e058      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bf2:	e050      	b.n	8003c96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e04f      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d148      	bne.n	8003c96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c1c:	f7fe fafa 	bl	8002214 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fe faf6 	bl	8002214 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e030      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x734>
 8003c42:	e028      	b.n	8003c96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d023      	beq.n	8003c92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <HAL_RCC_OscConfig+0x780>)
 8003c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe fadd 	bl	8002214 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5c:	e00c      	b.n	8003c78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe fad9 	bl	8002214 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d905      	bls.n	8003c78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e013      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
 8003c70:	40021000 	.word	0x40021000
 8003c74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x7b0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ec      	bne.n	8003c5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCC_OscConfig+0x7b0>)
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	4905      	ldr	r1, [pc, #20]	; (8003ca0 <HAL_RCC_OscConfig+0x7b0>)
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_OscConfig+0x7b4>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60cb      	str	r3, [r1, #12]
 8003c90:	e001      	b.n	8003c96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	feeefffc 	.word	0xfeeefffc

08003ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0e7      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b75      	ldr	r3, [pc, #468]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d910      	bls.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 0207 	bic.w	r2, r3, #7
 8003cd2:	4970      	ldr	r1, [pc, #448]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b6e      	ldr	r3, [pc, #440]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0cf      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d908      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4960      	ldr	r1, [pc, #384]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d04c      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	4b5a      	ldr	r3, [pc, #360]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d121      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0a6      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d115      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e09a      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d5e:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e08e      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e086      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4943      	ldr	r1, [pc, #268]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d90:	f7fe fa40 	bl	8002214 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fe fa3c 	bl	8002214 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e06e      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d010      	beq.n	8003dee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d208      	bcs.n	8003dee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	492b      	ldr	r1, [pc, #172]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dee:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d210      	bcs.n	8003e1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 0207 	bic.w	r2, r3, #7
 8003e04:	4923      	ldr	r1, [pc, #140]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_RCC_ClockConfig+0x1ec>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d001      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e036      	b.n	8003e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4918      	ldr	r1, [pc, #96]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4910      	ldr	r1, [pc, #64]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e5c:	f000 f824 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	490b      	ldr	r1, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x1f4>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe f977 	bl	8002174 <HAL_InitTick>
 8003e86:	4603      	mov	r3, r0
 8003e88:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40022000 	.word	0x40022000
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	08009690 	.word	0x08009690
 8003ea0:	20000098 	.word	0x20000098
 8003ea4:	2000009c 	.word	0x2000009c

08003ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec0:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x34>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d121      	bne.n	8003f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d11e      	bne.n	8003f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003edc:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ee8:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f04:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f20:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e004      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d134      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f36:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d003      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0xac>
 8003f4c:	e005      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f50:	617b      	str	r3, [r7, #20]
      break;
 8003f52:	e005      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8003f56:	617b      	str	r3, [r7, #20]
      break;
 8003f58:	e002      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	617b      	str	r3, [r7, #20]
      break;
 8003f5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	fb03 f202 	mul.w	r2, r3, r2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	0e5b      	lsrs	r3, r3, #25
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	3301      	adds	r3, #1
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3724      	adds	r7, #36	; 0x24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	080096a8 	.word	0x080096a8
 8003fb8:	00f42400 	.word	0x00f42400
 8003fbc:	007a1200 	.word	0x007a1200

08003fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000098 	.word	0x20000098

08003fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fdc:	f7ff fff0 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4904      	ldr	r1, [pc, #16]	; (8004000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000
 8004000:	080096a0 	.word	0x080096a0

08004004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004008:	f7ff ffda 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0adb      	lsrs	r3, r3, #11
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4904      	ldr	r1, [pc, #16]	; (800402c <HAL_RCC_GetPCLK2Freq+0x28>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000
 800402c:	080096a0 	.word	0x080096a0

08004030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800403c:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004048:	f7ff f9ee 	bl	8003428 <HAL_PWREx_GetVoltageRange>
 800404c:	6178      	str	r0, [r7, #20]
 800404e:	e014      	b.n	800407a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	4a24      	ldr	r2, [pc, #144]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
 800405c:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004068:	f7ff f9de 	bl	8003428 <HAL_PWREx_GetVoltageRange>
 800406c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004078:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	d10b      	bne.n	800409a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d919      	bls.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2ba0      	cmp	r3, #160	; 0xa0
 800408c:	d902      	bls.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800408e:	2302      	movs	r3, #2
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e013      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004094:	2301      	movs	r3, #1
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e010      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d902      	bls.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040a0:	2303      	movs	r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	e00a      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d102      	bne.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ac:	2302      	movs	r3, #2
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e004      	b.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d101      	bne.n	80040bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040b8:	2301      	movs	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 0207 	bic.w	r2, r3, #7
 80040c4:	4909      	ldr	r1, [pc, #36]	; (80040ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40022000 	.word	0x40022000

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040f8:	2300      	movs	r3, #0
 80040fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040fc:	2300      	movs	r3, #0
 80040fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004108:	2b00      	cmp	r3, #0
 800410a:	d041      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004110:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004114:	d02a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004116:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800411a:	d824      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800411c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004120:	d008      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004126:	d81e      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800412c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004130:	d010      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004132:	e018      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004134:	4b86      	ldr	r3, [pc, #536]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a85      	ldr	r2, [pc, #532]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004140:	e015      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fabb 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004152:	e00c      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3320      	adds	r3, #32
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fba6 	bl	80048ac <RCCEx_PLLSAI2_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004164:	e003      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	74fb      	strb	r3, [r7, #19]
      break;
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800416c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800416e:	7cfb      	ldrb	r3, [r7, #19]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004174:	4b76      	ldr	r3, [pc, #472]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004182:	4973      	ldr	r1, [pc, #460]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7cfb      	ldrb	r3, [r7, #19]
 800418e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d041      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041a4:	d02a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041aa:	d824      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b0:	d008      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b6:	d81e      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041c0:	d010      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041c2:	e018      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041c4:	4b62      	ldr	r3, [pc, #392]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4a61      	ldr	r2, [pc, #388]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041d0:	e015      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fa73 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041e2:	e00c      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3320      	adds	r3, #32
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fb5e 	bl	80048ac <RCCEx_PLLSAI2_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041f4:	e003      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	74fb      	strb	r3, [r7, #19]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004204:	4b52      	ldr	r3, [pc, #328]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004212:	494f      	ldr	r1, [pc, #316]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800421a:	e001      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80a0 	beq.w	800436e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004248:	4b41      	ldr	r3, [pc, #260]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	4a40      	ldr	r2, [pc, #256]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6593      	str	r3, [r2, #88]	; 0x58
 8004254:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004260:	2301      	movs	r3, #1
 8004262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004264:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a3a      	ldr	r2, [pc, #232]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004270:	f7fd ffd0 	bl	8002214 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004276:	e009      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004278:	f7fd ffcc 	bl	8002214 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d902      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	74fb      	strb	r3, [r7, #19]
        break;
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ef      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d15c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800429e:	4b2c      	ldr	r3, [pc, #176]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01f      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d019      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	4a20      	ldr	r2, [pc, #128]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	4a1c      	ldr	r2, [pc, #112]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042e8:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd ff8b 	bl	8002214 <HAL_GetTick>
 80042fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004300:	e00b      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fd ff87 	bl	8002214 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004310:	4293      	cmp	r3, r2
 8004312:	d902      	bls.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	74fb      	strb	r3, [r7, #19]
            break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ec      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	4904      	ldr	r1, [pc, #16]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004346:	e009      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	74bb      	strb	r3, [r7, #18]
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435c:	7c7b      	ldrb	r3, [r7, #17]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b9e      	ldr	r3, [pc, #632]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	4a9d      	ldr	r2, [pc, #628]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437a:	4b98      	ldr	r3, [pc, #608]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f023 0203 	bic.w	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	4994      	ldr	r1, [pc, #592]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800439c:	4b8f      	ldr	r3, [pc, #572]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	f023 020c 	bic.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	498c      	ldr	r1, [pc, #560]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043be:	4b87      	ldr	r3, [pc, #540]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	4983      	ldr	r1, [pc, #524]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e0:	4b7e      	ldr	r3, [pc, #504]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	497b      	ldr	r1, [pc, #492]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004402:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004410:	4972      	ldr	r1, [pc, #456]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004424:	4b6d      	ldr	r3, [pc, #436]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	496a      	ldr	r1, [pc, #424]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004446:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	4961      	ldr	r1, [pc, #388]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004468:	4b5c      	ldr	r3, [pc, #368]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004476:	4959      	ldr	r1, [pc, #356]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800448a:	4b54      	ldr	r3, [pc, #336]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	4950      	ldr	r1, [pc, #320]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ac:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	4948      	ldr	r1, [pc, #288]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044ce:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	493f      	ldr	r1, [pc, #252]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d028      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044f0:	4b3a      	ldr	r3, [pc, #232]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fe:	4937      	ldr	r1, [pc, #220]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450e:	d106      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004510:	4b32      	ldr	r3, [pc, #200]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a31      	ldr	r2, [pc, #196]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451a:	60d3      	str	r3, [r2, #12]
 800451c:	e011      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004526:	d10c      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	2101      	movs	r1, #1
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f8c8 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004538:	7cfb      	ldrb	r3, [r7, #19]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d028      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800454e:	4b23      	ldr	r3, [pc, #140]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	491f      	ldr	r1, [pc, #124]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456c:	d106      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800456e:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004578:	60d3      	str	r3, [r2, #12]
 800457a:	e011      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f899 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02b      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	4908      	ldr	r1, [pc, #32]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ca:	d109      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a02      	ldr	r2, [pc, #8]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d6:	60d3      	str	r3, [r2, #12]
 80045d8:	e014      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e8:	d10c      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2101      	movs	r1, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f867 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d02f      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004610:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800461e:	4928      	ldr	r1, [pc, #160]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462e:	d10d      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f844 	bl	80046c4 <RCCEx_PLLSAI1_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d014      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	74bb      	strb	r3, [r7, #18]
 800464a:	e011      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3320      	adds	r3, #32
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f925 	bl	80048ac <RCCEx_PLLSAI2_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468a:	490d      	ldr	r1, [pc, #52]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ae:	4904      	ldr	r1, [pc, #16]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000

080046c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d2:	4b75      	ldr	r3, [pc, #468]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046de:	4b72      	ldr	r3, [pc, #456]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0203 	and.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d10d      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
       ||
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046f6:	4b6c      	ldr	r3, [pc, #432]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
       ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d047      	beq.n	800479a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	e044      	b.n	800479a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d018      	beq.n	800474a <RCCEx_PLLSAI1_Config+0x86>
 8004718:	2b03      	cmp	r3, #3
 800471a:	d825      	bhi.n	8004768 <RCCEx_PLLSAI1_Config+0xa4>
 800471c:	2b01      	cmp	r3, #1
 800471e:	d002      	beq.n	8004726 <RCCEx_PLLSAI1_Config+0x62>
 8004720:	2b02      	cmp	r3, #2
 8004722:	d009      	beq.n	8004738 <RCCEx_PLLSAI1_Config+0x74>
 8004724:	e020      	b.n	8004768 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004726:	4b60      	ldr	r3, [pc, #384]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11d      	bne.n	800476e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004736:	e01a      	b.n	800476e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004738:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004748:	e013      	b.n	8004772 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474a:	4b57      	ldr	r3, [pc, #348]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004756:	4b54      	ldr	r3, [pc, #336]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004766:	e006      	b.n	8004776 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e004      	b.n	8004778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004776:	bf00      	nop
    }

    if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800477e:	4b4a      	ldr	r3, [pc, #296]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	3b01      	subs	r3, #1
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	430b      	orrs	r3, r1
 8004794:	4944      	ldr	r1, [pc, #272]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d17d      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047a0:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7fd fd32 	bl	8002214 <HAL_GetTick>
 80047b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047b2:	e009      	b.n	80047c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b4:	f7fd fd2e 	bl	8002214 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d902      	bls.n	80047c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	73fb      	strb	r3, [r7, #15]
        break;
 80047c6:	e005      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047c8:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ef      	bne.n	80047b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d160      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e0:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6892      	ldr	r2, [r2, #8]
 80047f0:	0211      	lsls	r1, r2, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68d2      	ldr	r2, [r2, #12]
 80047f6:	0912      	lsrs	r2, r2, #4
 80047f8:	0452      	lsls	r2, r2, #17
 80047fa:	430a      	orrs	r2, r1
 80047fc:	492a      	ldr	r1, [pc, #168]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	610b      	str	r3, [r1, #16]
 8004802:	e027      	b.n	8004854 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d112      	bne.n	8004830 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800480a:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004812:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6892      	ldr	r2, [r2, #8]
 800481a:	0211      	lsls	r1, r2, #8
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6912      	ldr	r2, [r2, #16]
 8004820:	0852      	lsrs	r2, r2, #1
 8004822:	3a01      	subs	r2, #1
 8004824:	0552      	lsls	r2, r2, #21
 8004826:	430a      	orrs	r2, r1
 8004828:	491f      	ldr	r1, [pc, #124]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	610b      	str	r3, [r1, #16]
 800482e:	e011      	b.n	8004854 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6892      	ldr	r2, [r2, #8]
 8004840:	0211      	lsls	r1, r2, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6952      	ldr	r2, [r2, #20]
 8004846:	0852      	lsrs	r2, r2, #1
 8004848:	3a01      	subs	r2, #1
 800484a:	0652      	lsls	r2, r2, #25
 800484c:	430a      	orrs	r2, r1
 800484e:	4916      	ldr	r1, [pc, #88]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800485a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800485e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fd fcd8 	bl	8002214 <HAL_GetTick>
 8004864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004866:	e009      	b.n	800487c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004868:	f7fd fcd4 	bl	8002214 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d902      	bls.n	800487c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	73fb      	strb	r3, [r7, #15]
          break;
 800487a:	e005      	b.n	8004888 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ef      	beq.n	8004868 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	4904      	ldr	r1, [pc, #16]	; (80048a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000

080048ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048c6:	4b67      	ldr	r3, [pc, #412]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d10d      	bne.n	80048f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
       ||
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048de:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
       ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d047      	beq.n	8004982 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e044      	b.n	8004982 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d018      	beq.n	8004932 <RCCEx_PLLSAI2_Config+0x86>
 8004900:	2b03      	cmp	r3, #3
 8004902:	d825      	bhi.n	8004950 <RCCEx_PLLSAI2_Config+0xa4>
 8004904:	2b01      	cmp	r3, #1
 8004906:	d002      	beq.n	800490e <RCCEx_PLLSAI2_Config+0x62>
 8004908:	2b02      	cmp	r3, #2
 800490a:	d009      	beq.n	8004920 <RCCEx_PLLSAI2_Config+0x74>
 800490c:	e020      	b.n	8004950 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800490e:	4b55      	ldr	r3, [pc, #340]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11d      	bne.n	8004956 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491e:	e01a      	b.n	8004956 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004920:	4b50      	ldr	r3, [pc, #320]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004930:	e013      	b.n	800495a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004932:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800493e:	4b49      	ldr	r3, [pc, #292]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800494e:	e006      	b.n	800495e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e004      	b.n	8004960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800495e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004966:	4b3f      	ldr	r3, [pc, #252]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	430b      	orrs	r3, r1
 800497c:	4939      	ldr	r1, [pc, #228]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497e:	4313      	orrs	r3, r2
 8004980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d167      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004994:	f7fd fc3e 	bl	8002214 <HAL_GetTick>
 8004998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800499a:	e009      	b.n	80049b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800499c:	f7fd fc3a 	bl	8002214 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d902      	bls.n	80049b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	73fb      	strb	r3, [r7, #15]
        break;
 80049ae:	e005      	b.n	80049bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049b0:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ef      	bne.n	800499c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d14a      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d111      	bne.n	80049ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049c8:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6892      	ldr	r2, [r2, #8]
 80049d8:	0211      	lsls	r1, r2, #8
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68d2      	ldr	r2, [r2, #12]
 80049de:	0912      	lsrs	r2, r2, #4
 80049e0:	0452      	lsls	r2, r2, #17
 80049e2:	430a      	orrs	r2, r1
 80049e4:	491f      	ldr	r1, [pc, #124]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	614b      	str	r3, [r1, #20]
 80049ea:	e011      	b.n	8004a10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6892      	ldr	r2, [r2, #8]
 80049fc:	0211      	lsls	r1, r2, #8
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6912      	ldr	r2, [r2, #16]
 8004a02:	0852      	lsrs	r2, r2, #1
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0652      	lsls	r2, r2, #25
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	4916      	ldr	r1, [pc, #88]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a10:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fd fbfa 	bl	8002214 <HAL_GetTick>
 8004a20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a22:	e009      	b.n	8004a38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a24:	f7fd fbf6 	bl	8002214 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d902      	bls.n	8004a38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	73fb      	strb	r3, [r7, #15]
          break;
 8004a36:	e005      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ef      	beq.n	8004a24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	4904      	ldr	r1, [pc, #16]	; (8004a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000

08004a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e049      	b.n	8004b0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fd fa4a 	bl	8001f28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f000 fba2 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <HAL_TIM_PWM_Start+0x24>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e03c      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d109      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x3e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	e02f      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d109      	bne.n	8004b70 <HAL_TIM_PWM_Start+0x58>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e022      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d109      	bne.n	8004b8a <HAL_TIM_PWM_Start+0x72>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	e015      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d109      	bne.n	8004ba4 <HAL_TIM_PWM_Start+0x8c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e008      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e09c      	b.n	8004cf8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xb6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bcc:	e023      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d104      	bne.n	8004bde <HAL_TIM_PWM_Start+0xc6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bdc:	e01b      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PWM_Start+0xd6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bec:	e013      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xe6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bfc:	e00b      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0xf6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c0c:	e003      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fe56 	bl	80058d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a35      	ldr	r2, [pc, #212]	; (8004d00 <HAL_TIM_PWM_Start+0x1e8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x13e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a34      	ldr	r2, [pc, #208]	; (8004d04 <HAL_TIM_PWM_Start+0x1ec>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x13e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a32      	ldr	r2, [pc, #200]	; (8004d08 <HAL_TIM_PWM_Start+0x1f0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x13e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a31      	ldr	r2, [pc, #196]	; (8004d0c <HAL_TIM_PWM_Start+0x1f4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x13e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <HAL_TIM_PWM_Start+0x1f8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_PWM_Start+0x142>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_PWM_Start+0x144>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <HAL_TIM_PWM_Start+0x1e8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01d      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0x19e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c82:	d018      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0x19e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <HAL_TIM_PWM_Start+0x1fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0x19e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <HAL_TIM_PWM_Start+0x200>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0x19e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <HAL_TIM_PWM_Start+0x204>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0x19e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a17      	ldr	r2, [pc, #92]	; (8004d04 <HAL_TIM_PWM_Start+0x1ec>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0x19e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_TIM_PWM_Start+0x1f0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d115      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <HAL_TIM_PWM_Start+0x208>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b06      	cmp	r3, #6
 8004cc6:	d015      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1dc>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cce:	d011      	beq.n	8004cf4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	e008      	b.n	8004cf4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e000      	b.n	8004cf6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	00010007 	.word	0x00010007

08004d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d122      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d11b      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0202 	mvn.w	r2, #2
 8004d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa24 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa16 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fa27 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d122      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0204 	mvn.w	r2, #4
 8004da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9fa 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004dc0:	e005      	b.n	8004dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f9ec 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f9fd 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d122      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d11b      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0208 	mvn.w	r2, #8
 8004df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f9d0 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f9c2 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f9d3 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d122      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d11b      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0210 	mvn.w	r2, #16
 8004e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2208      	movs	r2, #8
 8004e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9a6 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f998 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f9a9 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10e      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d107      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0201 	mvn.w	r2, #1
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f972 	bl	800518c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b80      	cmp	r3, #128	; 0x80
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b80      	cmp	r3, #128	; 0x80
 8004ec2:	d107      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fdb6 	bl	8005a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee2:	d10e      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fda9 	bl	8005a54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d10e      	bne.n	8004f2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d107      	bne.n	8004f2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f957 	bl	80051dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d10e      	bne.n	8004f5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d107      	bne.n	8004f5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f06f 0220 	mvn.w	r2, #32
 8004f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fd69 	bl	8005a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e0ff      	b.n	8005182 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b14      	cmp	r3, #20
 8004f8e:	f200 80f0 	bhi.w	8005172 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08005173 	.word	0x08005173
 8004fa0:	08005173 	.word	0x08005173
 8004fa4:	08005173 	.word	0x08005173
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	08005173 	.word	0x08005173
 8004fb0:	08005173 	.word	0x08005173
 8004fb4:	08005173 	.word	0x08005173
 8004fb8:	0800506f 	.word	0x0800506f
 8004fbc:	08005173 	.word	0x08005173
 8004fc0:	08005173 	.word	0x08005173
 8004fc4:	08005173 	.word	0x08005173
 8004fc8:	080050af 	.word	0x080050af
 8004fcc:	08005173 	.word	0x08005173
 8004fd0:	08005173 	.word	0x08005173
 8004fd4:	08005173 	.word	0x08005173
 8004fd8:	080050f1 	.word	0x080050f1
 8004fdc:	08005173 	.word	0x08005173
 8004fe0:	08005173 	.word	0x08005173
 8004fe4:	08005173 	.word	0x08005173
 8004fe8:	08005131 	.word	0x08005131
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f996 	bl	8005324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0208 	orr.w	r2, r2, #8
 8005006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0204 	bic.w	r2, r2, #4
 8005016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6999      	ldr	r1, [r3, #24]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	619a      	str	r2, [r3, #24]
      break;
 800502a:	e0a5      	b.n	8005178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fa06 	bl	8005444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6999      	ldr	r1, [r3, #24]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	021a      	lsls	r2, r3, #8
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	619a      	str	r2, [r3, #24]
      break;
 800506c:	e084      	b.n	8005178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fa6f 	bl	8005558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0208 	orr.w	r2, r2, #8
 8005088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0204 	bic.w	r2, r2, #4
 8005098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69d9      	ldr	r1, [r3, #28]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	61da      	str	r2, [r3, #28]
      break;
 80050ac:	e064      	b.n	8005178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fad7 	bl	8005668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	021a      	lsls	r2, r3, #8
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	61da      	str	r2, [r3, #28]
      break;
 80050ee:	e043      	b.n	8005178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fb20 	bl	800573c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0208 	orr.w	r2, r2, #8
 800510a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0204 	bic.w	r2, r2, #4
 800511a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800512e:	e023      	b.n	8005178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fb64 	bl	8005804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005170:	e002      	b.n	8005178 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
      break;
 8005176:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005180:	7dfb      	ldrb	r3, [r7, #23]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop

0800518c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a40      	ldr	r2, [pc, #256]	; (8005304 <TIM_Base_SetConfig+0x114>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d00f      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <TIM_Base_SetConfig+0x118>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3c      	ldr	r2, [pc, #240]	; (800530c <TIM_Base_SetConfig+0x11c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a3b      	ldr	r2, [pc, #236]	; (8005310 <TIM_Base_SetConfig+0x120>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3a      	ldr	r2, [pc, #232]	; (8005314 <TIM_Base_SetConfig+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2f      	ldr	r2, [pc, #188]	; (8005304 <TIM_Base_SetConfig+0x114>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d01b      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <TIM_Base_SetConfig+0x118>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d017      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <TIM_Base_SetConfig+0x11c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2a      	ldr	r2, [pc, #168]	; (8005310 <TIM_Base_SetConfig+0x120>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a29      	ldr	r2, [pc, #164]	; (8005314 <TIM_Base_SetConfig+0x124>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a28      	ldr	r2, [pc, #160]	; (8005318 <TIM_Base_SetConfig+0x128>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a27      	ldr	r2, [pc, #156]	; (800531c <TIM_Base_SetConfig+0x12c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0x9a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <TIM_Base_SetConfig+0x130>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a10      	ldr	r2, [pc, #64]	; (8005304 <TIM_Base_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00f      	beq.n	80052e8 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a12      	ldr	r2, [pc, #72]	; (8005314 <TIM_Base_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a11      	ldr	r2, [pc, #68]	; (8005318 <TIM_Base_SetConfig+0x128>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0xf8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a10      	ldr	r2, [pc, #64]	; (800531c <TIM_Base_SetConfig+0x12c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0xf8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a0f      	ldr	r2, [pc, #60]	; (8005320 <TIM_Base_SetConfig+0x130>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d103      	bne.n	80052f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	615a      	str	r2, [r3, #20]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40013400 	.word	0x40013400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800

08005324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0201 	bic.w	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0302 	bic.w	r3, r3, #2
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2c      	ldr	r2, [pc, #176]	; (8005430 <TIM_OC1_SetConfig+0x10c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <TIM_OC1_SetConfig+0x110>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <TIM_OC1_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a29      	ldr	r2, [pc, #164]	; (800543c <TIM_OC1_SetConfig+0x118>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC1_SetConfig+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a28      	ldr	r2, [pc, #160]	; (8005440 <TIM_OC1_SetConfig+0x11c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10c      	bne.n	80053be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0308 	bic.w	r3, r3, #8
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <TIM_OC1_SetConfig+0x10c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <TIM_OC1_SetConfig+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <TIM_OC1_SetConfig+0x114>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <TIM_OC1_SetConfig+0x118>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC1_SetConfig+0xc2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a17      	ldr	r2, [pc, #92]	; (8005440 <TIM_OC1_SetConfig+0x11c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d111      	bne.n	800540a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40013400 	.word	0x40013400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800

08005444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0210 	bic.w	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0320 	bic.w	r3, r3, #32
 8005492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a28      	ldr	r2, [pc, #160]	; (8005544 <TIM_OC2_SetConfig+0x100>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC2_SetConfig+0x6c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_OC2_SetConfig+0x104>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10d      	bne.n	80054cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <TIM_OC2_SetConfig+0x100>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <TIM_OC2_SetConfig+0x104>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1b      	ldr	r2, [pc, #108]	; (800554c <TIM_OC2_SetConfig+0x108>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <TIM_OC2_SetConfig+0x10c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC2_SetConfig+0xb0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a19      	ldr	r2, [pc, #100]	; (8005554 <TIM_OC2_SetConfig+0x110>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800

08005558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a27      	ldr	r2, [pc, #156]	; (8005654 <TIM_OC3_SetConfig+0xfc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC3_SetConfig+0x6a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a26      	ldr	r2, [pc, #152]	; (8005658 <TIM_OC3_SetConfig+0x100>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10d      	bne.n	80055de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <TIM_OC3_SetConfig+0xfc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <TIM_OC3_SetConfig+0x100>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1a      	ldr	r2, [pc, #104]	; (800565c <TIM_OC3_SetConfig+0x104>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a19      	ldr	r2, [pc, #100]	; (8005660 <TIM_OC3_SetConfig+0x108>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC3_SetConfig+0xae>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <TIM_OC3_SetConfig+0x10c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d113      	bne.n	800562e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <TIM_OC4_SetConfig+0xc0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00f      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <TIM_OC4_SetConfig+0xc4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <TIM_OC4_SetConfig+0xc8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <TIM_OC4_SetConfig+0xcc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC4_SetConfig+0x84>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a14      	ldr	r2, [pc, #80]	; (8005738 <TIM_OC4_SetConfig+0xd0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d109      	bne.n	8005700 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40013400 	.word	0x40013400
 8005730:	40014000 	.word	0x40014000
 8005734:	40014400 	.word	0x40014400
 8005738:	40014800 	.word	0x40014800

0800573c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005780:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <TIM_OC5_SetConfig+0xb4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <TIM_OC5_SetConfig+0xb8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <TIM_OC5_SetConfig+0xbc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <TIM_OC5_SetConfig+0xc0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_OC5_SetConfig+0x7a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <TIM_OC5_SetConfig+0xc4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d109      	bne.n	80057ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800584a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	051b      	lsls	r3, r3, #20
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <TIM_OC6_SetConfig+0xb8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <TIM_OC6_SetConfig+0xbc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <TIM_OC6_SetConfig+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <TIM_OC6_SetConfig+0xc4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC6_SetConfig+0x7c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a14      	ldr	r2, [pc, #80]	; (80058cc <TIM_OC6_SetConfig+0xc8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40013400 	.word	0x40013400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2201      	movs	r2, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e068      	b.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2e      	ldr	r2, [pc, #184]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2d      	ldr	r2, [pc, #180]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d108      	bne.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800596e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01d      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a6:	d018      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a14      	ldr	r2, [pc, #80]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10c      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40014000 	.word	0x40014000

08005a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e040      	b.n	8005afc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc fad4 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2224      	movs	r2, #36	; 0x24
 8005a94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8c0 	bl	8005c2c <UART_SetConfig>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e022      	b.n	8005afc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fb6c 	bl	800619c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fbf3 	bl	80062e0 <UART_CheckIdleState>
 8005afa:	4603      	mov	r3, r0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	4613      	mov	r3, r2
 8005b12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	f040 8082 	bne.w	8005c22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_UART_Transmit+0x26>
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e07a      	b.n	8005c24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_UART_Transmit+0x38>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e073      	b.n	8005c24 <HAL_UART_Transmit+0x120>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2221      	movs	r2, #33	; 0x21
 8005b50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b52:	f7fc fb5f 	bl	8002214 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b70:	d108      	bne.n	8005b84 <HAL_UART_Transmit+0x80>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e003      	b.n	8005b8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b94:	e02d      	b.n	8005bf2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2180      	movs	r1, #128	; 0x80
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fbe6 	bl	8006372 <UART_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e039      	b.n	8005c24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10b      	bne.n	8005bce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	881a      	ldrh	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	3302      	adds	r3, #2
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	e008      	b.n	8005be0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	b292      	uxth	r2, r2
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1cb      	bne.n	8005b96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2200      	movs	r2, #0
 8005c06:	2140      	movs	r1, #64	; 0x40
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fbb2 	bl	8006372 <UART_WaitOnFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e005      	b.n	8005c24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b08a      	sub	sp, #40	; 0x28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4ba4      	ldr	r3, [pc, #656]	; (8005eec <UART_SetConfig+0x2c0>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c64:	430b      	orrs	r3, r1
 8005c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a99      	ldr	r2, [pc, #612]	; (8005ef0 <UART_SetConfig+0x2c4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	4313      	orrs	r3, r2
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a90      	ldr	r2, [pc, #576]	; (8005ef4 <UART_SetConfig+0x2c8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d126      	bne.n	8005d04 <UART_SetConfig+0xd8>
 8005cb6:	4b90      	ldr	r3, [pc, #576]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d81b      	bhi.n	8005cfc <UART_SetConfig+0xd0>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0xa0>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf5 	.word	0x08005cf5
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e116      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e112      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e10e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e10a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e106      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a7c      	ldr	r2, [pc, #496]	; (8005efc <UART_SetConfig+0x2d0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d138      	bne.n	8005d80 <UART_SetConfig+0x154>
 8005d0e:	4b7a      	ldr	r3, [pc, #488]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d82d      	bhi.n	8005d78 <UART_SetConfig+0x14c>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0xf8>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d79 	.word	0x08005d79
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005d69 	.word	0x08005d69
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d79 	.word	0x08005d79
 8005d40:	08005d79 	.word	0x08005d79
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5e:	e0d8      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d66:	e0d4      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6e:	e0d0      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d76:	e0cc      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7e:	e0c8      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5e      	ldr	r2, [pc, #376]	; (8005f00 <UART_SetConfig+0x2d4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d125      	bne.n	8005dd6 <UART_SetConfig+0x1aa>
 8005d8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d94:	2b30      	cmp	r3, #48	; 0x30
 8005d96:	d016      	beq.n	8005dc6 <UART_SetConfig+0x19a>
 8005d98:	2b30      	cmp	r3, #48	; 0x30
 8005d9a:	d818      	bhi.n	8005dce <UART_SetConfig+0x1a2>
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d00a      	beq.n	8005db6 <UART_SetConfig+0x18a>
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d814      	bhi.n	8005dce <UART_SetConfig+0x1a2>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <UART_SetConfig+0x182>
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d008      	beq.n	8005dbe <UART_SetConfig+0x192>
 8005dac:	e00f      	b.n	8005dce <UART_SetConfig+0x1a2>
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db4:	e0ad      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005db6:	2302      	movs	r3, #2
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbc:	e0a9      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc4:	e0a5      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dcc:	e0a1      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dce:	2310      	movs	r3, #16
 8005dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd4:	e09d      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4a      	ldr	r2, [pc, #296]	; (8005f04 <UART_SetConfig+0x2d8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d125      	bne.n	8005e2c <UART_SetConfig+0x200>
 8005de0:	4b45      	ldr	r3, [pc, #276]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dea:	2bc0      	cmp	r3, #192	; 0xc0
 8005dec:	d016      	beq.n	8005e1c <UART_SetConfig+0x1f0>
 8005dee:	2bc0      	cmp	r3, #192	; 0xc0
 8005df0:	d818      	bhi.n	8005e24 <UART_SetConfig+0x1f8>
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d00a      	beq.n	8005e0c <UART_SetConfig+0x1e0>
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d814      	bhi.n	8005e24 <UART_SetConfig+0x1f8>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <UART_SetConfig+0x1d8>
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d008      	beq.n	8005e14 <UART_SetConfig+0x1e8>
 8005e02:	e00f      	b.n	8005e24 <UART_SetConfig+0x1f8>
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0a:	e082      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e12:	e07e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1a:	e07a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e22:	e076      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2a:	e072      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a35      	ldr	r2, [pc, #212]	; (8005f08 <UART_SetConfig+0x2dc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d12a      	bne.n	8005e8c <UART_SetConfig+0x260>
 8005e36:	4b30      	ldr	r3, [pc, #192]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e44:	d01a      	beq.n	8005e7c <UART_SetConfig+0x250>
 8005e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e4a:	d81b      	bhi.n	8005e84 <UART_SetConfig+0x258>
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e50:	d00c      	beq.n	8005e6c <UART_SetConfig+0x240>
 8005e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e56:	d815      	bhi.n	8005e84 <UART_SetConfig+0x258>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <UART_SetConfig+0x238>
 8005e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e60:	d008      	beq.n	8005e74 <UART_SetConfig+0x248>
 8005e62:	e00f      	b.n	8005e84 <UART_SetConfig+0x258>
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e052      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e72:	e04e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e74:	2304      	movs	r3, #4
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e04a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e046      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8a:	e042      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <UART_SetConfig+0x2c4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d13a      	bne.n	8005f0c <UART_SetConfig+0x2e0>
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea4:	d01a      	beq.n	8005edc <UART_SetConfig+0x2b0>
 8005ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eaa:	d81b      	bhi.n	8005ee4 <UART_SetConfig+0x2b8>
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d00c      	beq.n	8005ecc <UART_SetConfig+0x2a0>
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	d815      	bhi.n	8005ee4 <UART_SetConfig+0x2b8>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <UART_SetConfig+0x298>
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d008      	beq.n	8005ed4 <UART_SetConfig+0x2a8>
 8005ec2:	e00f      	b.n	8005ee4 <UART_SetConfig+0x2b8>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eca:	e022      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed2:	e01e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eda:	e01a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005edc:	2308      	movs	r3, #8
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e016      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e012      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005eec:	efff69f3 	.word	0xefff69f3
 8005ef0:	40008000 	.word	0x40008000
 8005ef4:	40013800 	.word	0x40013800
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40004400 	.word	0x40004400
 8005f00:	40004800 	.word	0x40004800
 8005f04:	40004c00 	.word	0x40004c00
 8005f08:	40005000 	.word	0x40005000
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a9f      	ldr	r2, [pc, #636]	; (8006194 <UART_SetConfig+0x568>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d17a      	bne.n	8006012 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d824      	bhi.n	8005f6e <UART_SetConfig+0x342>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x300>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f59 	.word	0x08005f59
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f5f 	.word	0x08005f5f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f6f 	.word	0x08005f6f
 8005f48:	08005f6f 	.word	0x08005f6f
 8005f4c:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe f842 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e010      	b.n	8005f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b8f      	ldr	r3, [pc, #572]	; (8006198 <UART_SetConfig+0x56c>)
 8005f5a:	61fb      	str	r3, [r7, #28]
        break;
 8005f5c:	e00d      	b.n	8005f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fd ffa3 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8005f62:	61f8      	str	r0, [r7, #28]
        break;
 8005f64:	e009      	b.n	8005f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61fb      	str	r3, [r7, #28]
        break;
 8005f6c:	e005      	b.n	8005f7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80fb 	beq.w	8006178 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	4413      	add	r3, r2
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d305      	bcc.n	8005f9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d903      	bls.n	8005fa6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fa4:	e0e8      	b.n	8006178 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	461c      	mov	r4, r3
 8005fac:	4615      	mov	r5, r2
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	022b      	lsls	r3, r5, #8
 8005fb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fbc:	0222      	lsls	r2, r4, #8
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	6849      	ldr	r1, [r1, #4]
 8005fc2:	0849      	lsrs	r1, r1, #1
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	4688      	mov	r8, r1
 8005fc8:	4681      	mov	r9, r0
 8005fca:	eb12 0a08 	adds.w	sl, r2, r8
 8005fce:	eb43 0b09 	adc.w	fp, r3, r9
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	f7fa fe00 	bl	8000be8 <__aeabi_uldivmod>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4613      	mov	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff6:	d308      	bcc.n	800600a <UART_SetConfig+0x3de>
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffe:	d204      	bcs.n	800600a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	60da      	str	r2, [r3, #12]
 8006008:	e0b6      	b.n	8006178 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006010:	e0b2      	b.n	8006178 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601a:	d15e      	bne.n	80060da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800601c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006020:	2b08      	cmp	r3, #8
 8006022:	d828      	bhi.n	8006076 <UART_SetConfig+0x44a>
 8006024:	a201      	add	r2, pc, #4	; (adr r2, 800602c <UART_SetConfig+0x400>)
 8006026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602a:	bf00      	nop
 800602c:	08006051 	.word	0x08006051
 8006030:	08006059 	.word	0x08006059
 8006034:	08006061 	.word	0x08006061
 8006038:	08006077 	.word	0x08006077
 800603c:	08006067 	.word	0x08006067
 8006040:	08006077 	.word	0x08006077
 8006044:	08006077 	.word	0x08006077
 8006048:	08006077 	.word	0x08006077
 800604c:	0800606f 	.word	0x0800606f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006050:	f7fd ffc2 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8006054:	61f8      	str	r0, [r7, #28]
        break;
 8006056:	e014      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006058:	f7fd ffd4 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 800605c:	61f8      	str	r0, [r7, #28]
        break;
 800605e:	e010      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006060:	4b4d      	ldr	r3, [pc, #308]	; (8006198 <UART_SetConfig+0x56c>)
 8006062:	61fb      	str	r3, [r7, #28]
        break;
 8006064:	e00d      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006066:	f7fd ff1f 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 800606a:	61f8      	str	r0, [r7, #28]
        break;
 800606c:	e009      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006072:	61fb      	str	r3, [r7, #28]
        break;
 8006074:	e005      	b.n	8006082 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d077      	beq.n	8006178 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005a      	lsls	r2, r3, #1
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	441a      	add	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b0f      	cmp	r3, #15
 80060a2:	d916      	bls.n	80060d2 <UART_SetConfig+0x4a6>
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d212      	bcs.n	80060d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f023 030f 	bic.w	r3, r3, #15
 80060b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	8afb      	ldrh	r3, [r7, #22]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	8afa      	ldrh	r2, [r7, #22]
 80060ce:	60da      	str	r2, [r3, #12]
 80060d0:	e052      	b.n	8006178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060d8:	e04e      	b.n	8006178 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d827      	bhi.n	8006132 <UART_SetConfig+0x506>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0x4bc>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	0800610d 	.word	0x0800610d
 80060ec:	08006115 	.word	0x08006115
 80060f0:	0800611d 	.word	0x0800611d
 80060f4:	08006133 	.word	0x08006133
 80060f8:	08006123 	.word	0x08006123
 80060fc:	08006133 	.word	0x08006133
 8006100:	08006133 	.word	0x08006133
 8006104:	08006133 	.word	0x08006133
 8006108:	0800612b 	.word	0x0800612b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800610c:	f7fd ff64 	bl	8003fd8 <HAL_RCC_GetPCLK1Freq>
 8006110:	61f8      	str	r0, [r7, #28]
        break;
 8006112:	e014      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006114:	f7fd ff76 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8006118:	61f8      	str	r0, [r7, #28]
        break;
 800611a:	e010      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800611c:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <UART_SetConfig+0x56c>)
 800611e:	61fb      	str	r3, [r7, #28]
        break;
 8006120:	e00d      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006122:	f7fd fec1 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8006126:	61f8      	str	r0, [r7, #28]
        break;
 8006128:	e009      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612e:	61fb      	str	r3, [r7, #28]
        break;
 8006130:	e005      	b.n	800613e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800613c:	bf00      	nop
    }

    if (pclk != 0U)
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d019      	beq.n	8006178 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	085a      	lsrs	r2, r3, #1
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	441a      	add	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	fbb2 f3f3 	udiv	r3, r2, r3
 8006156:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b0f      	cmp	r3, #15
 800615c:	d909      	bls.n	8006172 <UART_SetConfig+0x546>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006164:	d205      	bcs.n	8006172 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e002      	b.n	8006178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006184:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006188:	4618      	mov	r0, r3
 800618a:	3728      	adds	r7, #40	; 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006192:	bf00      	nop
 8006194:	40008000 	.word	0x40008000
 8006198:	00f42400 	.word	0x00f42400

0800619c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629a:	d10a      	bne.n	80062b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f0:	f7fb ff90 	bl	8002214 <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d10e      	bne.n	8006322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f82d 	bl	8006372 <UART_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e023      	b.n	800636a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b04      	cmp	r3, #4
 800632e:	d10e      	bne.n	800634e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f817 	bl	8006372 <UART_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e00d      	b.n	800636a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b09c      	sub	sp, #112	; 0x70
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	603b      	str	r3, [r7, #0]
 800637e:	4613      	mov	r3, r2
 8006380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006382:	e0a5      	b.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	f000 80a1 	beq.w	80064d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638e:	f7fb ff41 	bl	8002214 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800639a:	429a      	cmp	r2, r3
 800639c:	d302      	bcc.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800639e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d13e      	bne.n	8006422 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063b8:	667b      	str	r3, [r7, #100]	; 0x64
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e6      	bne.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	663b      	str	r3, [r7, #96]	; 0x60
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80063f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e5      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e067      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d04f      	beq.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800643a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643e:	d147      	bne.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006448:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800645e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800646e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e6      	bne.n	800644a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3308      	adds	r3, #8
 8006482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	613b      	str	r3, [r7, #16]
   return(result);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	66bb      	str	r3, [r7, #104]	; 0x68
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800649c:	623a      	str	r2, [r7, #32]
 800649e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	69f9      	ldr	r1, [r7, #28]
 80064a2:	6a3a      	ldr	r2, [r7, #32]
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e5      	bne.n	800647c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e010      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4013      	ands	r3, r2
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	429a      	cmp	r2, r3
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f43f af4a 	beq.w	8006384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3770      	adds	r7, #112	; 0x70
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <__errno>:
 80064fc:	4b01      	ldr	r3, [pc, #4]	; (8006504 <__errno+0x8>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	200000a4 	.word	0x200000a4

08006508 <__libc_init_array>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4d0d      	ldr	r5, [pc, #52]	; (8006540 <__libc_init_array+0x38>)
 800650c:	4c0d      	ldr	r4, [pc, #52]	; (8006544 <__libc_init_array+0x3c>)
 800650e:	1b64      	subs	r4, r4, r5
 8006510:	10a4      	asrs	r4, r4, #2
 8006512:	2600      	movs	r6, #0
 8006514:	42a6      	cmp	r6, r4
 8006516:	d109      	bne.n	800652c <__libc_init_array+0x24>
 8006518:	4d0b      	ldr	r5, [pc, #44]	; (8006548 <__libc_init_array+0x40>)
 800651a:	4c0c      	ldr	r4, [pc, #48]	; (800654c <__libc_init_array+0x44>)
 800651c:	f003 f8a4 	bl	8009668 <_init>
 8006520:	1b64      	subs	r4, r4, r5
 8006522:	10a4      	asrs	r4, r4, #2
 8006524:	2600      	movs	r6, #0
 8006526:	42a6      	cmp	r6, r4
 8006528:	d105      	bne.n	8006536 <__libc_init_array+0x2e>
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006530:	4798      	blx	r3
 8006532:	3601      	adds	r6, #1
 8006534:	e7ee      	b.n	8006514 <__libc_init_array+0xc>
 8006536:	f855 3b04 	ldr.w	r3, [r5], #4
 800653a:	4798      	blx	r3
 800653c:	3601      	adds	r6, #1
 800653e:	e7f2      	b.n	8006526 <__libc_init_array+0x1e>
 8006540:	08009b30 	.word	0x08009b30
 8006544:	08009b30 	.word	0x08009b30
 8006548:	08009b30 	.word	0x08009b30
 800654c:	08009b34 	.word	0x08009b34

08006550 <memset>:
 8006550:	4402      	add	r2, r0
 8006552:	4603      	mov	r3, r0
 8006554:	4293      	cmp	r3, r2
 8006556:	d100      	bne.n	800655a <memset+0xa>
 8006558:	4770      	bx	lr
 800655a:	f803 1b01 	strb.w	r1, [r3], #1
 800655e:	e7f9      	b.n	8006554 <memset+0x4>

08006560 <__cvt>:
 8006560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	ec55 4b10 	vmov	r4, r5, d0
 8006568:	2d00      	cmp	r5, #0
 800656a:	460e      	mov	r6, r1
 800656c:	4619      	mov	r1, r3
 800656e:	462b      	mov	r3, r5
 8006570:	bfbb      	ittet	lt
 8006572:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006576:	461d      	movlt	r5, r3
 8006578:	2300      	movge	r3, #0
 800657a:	232d      	movlt	r3, #45	; 0x2d
 800657c:	700b      	strb	r3, [r1, #0]
 800657e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006580:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006584:	4691      	mov	r9, r2
 8006586:	f023 0820 	bic.w	r8, r3, #32
 800658a:	bfbc      	itt	lt
 800658c:	4622      	movlt	r2, r4
 800658e:	4614      	movlt	r4, r2
 8006590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006594:	d005      	beq.n	80065a2 <__cvt+0x42>
 8006596:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800659a:	d100      	bne.n	800659e <__cvt+0x3e>
 800659c:	3601      	adds	r6, #1
 800659e:	2102      	movs	r1, #2
 80065a0:	e000      	b.n	80065a4 <__cvt+0x44>
 80065a2:	2103      	movs	r1, #3
 80065a4:	ab03      	add	r3, sp, #12
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	ab02      	add	r3, sp, #8
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	ec45 4b10 	vmov	d0, r4, r5
 80065b0:	4653      	mov	r3, sl
 80065b2:	4632      	mov	r2, r6
 80065b4:	f000 fce4 	bl	8006f80 <_dtoa_r>
 80065b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065bc:	4607      	mov	r7, r0
 80065be:	d102      	bne.n	80065c6 <__cvt+0x66>
 80065c0:	f019 0f01 	tst.w	r9, #1
 80065c4:	d022      	beq.n	800660c <__cvt+0xac>
 80065c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065ca:	eb07 0906 	add.w	r9, r7, r6
 80065ce:	d110      	bne.n	80065f2 <__cvt+0x92>
 80065d0:	783b      	ldrb	r3, [r7, #0]
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	d10a      	bne.n	80065ec <__cvt+0x8c>
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	4620      	mov	r0, r4
 80065dc:	4629      	mov	r1, r5
 80065de:	f7fa fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 80065e2:	b918      	cbnz	r0, 80065ec <__cvt+0x8c>
 80065e4:	f1c6 0601 	rsb	r6, r6, #1
 80065e8:	f8ca 6000 	str.w	r6, [sl]
 80065ec:	f8da 3000 	ldr.w	r3, [sl]
 80065f0:	4499      	add	r9, r3
 80065f2:	2200      	movs	r2, #0
 80065f4:	2300      	movs	r3, #0
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa fa65 	bl	8000ac8 <__aeabi_dcmpeq>
 80065fe:	b108      	cbz	r0, 8006604 <__cvt+0xa4>
 8006600:	f8cd 900c 	str.w	r9, [sp, #12]
 8006604:	2230      	movs	r2, #48	; 0x30
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	454b      	cmp	r3, r9
 800660a:	d307      	bcc.n	800661c <__cvt+0xbc>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006610:	1bdb      	subs	r3, r3, r7
 8006612:	4638      	mov	r0, r7
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	b004      	add	sp, #16
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	1c59      	adds	r1, r3, #1
 800661e:	9103      	str	r1, [sp, #12]
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e7f0      	b.n	8006606 <__cvt+0xa6>

08006624 <__exponent>:
 8006624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006626:	4603      	mov	r3, r0
 8006628:	2900      	cmp	r1, #0
 800662a:	bfb8      	it	lt
 800662c:	4249      	neglt	r1, r1
 800662e:	f803 2b02 	strb.w	r2, [r3], #2
 8006632:	bfb4      	ite	lt
 8006634:	222d      	movlt	r2, #45	; 0x2d
 8006636:	222b      	movge	r2, #43	; 0x2b
 8006638:	2909      	cmp	r1, #9
 800663a:	7042      	strb	r2, [r0, #1]
 800663c:	dd2a      	ble.n	8006694 <__exponent+0x70>
 800663e:	f10d 0407 	add.w	r4, sp, #7
 8006642:	46a4      	mov	ip, r4
 8006644:	270a      	movs	r7, #10
 8006646:	46a6      	mov	lr, r4
 8006648:	460a      	mov	r2, r1
 800664a:	fb91 f6f7 	sdiv	r6, r1, r7
 800664e:	fb07 1516 	mls	r5, r7, r6, r1
 8006652:	3530      	adds	r5, #48	; 0x30
 8006654:	2a63      	cmp	r2, #99	; 0x63
 8006656:	f104 34ff 	add.w	r4, r4, #4294967295
 800665a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800665e:	4631      	mov	r1, r6
 8006660:	dcf1      	bgt.n	8006646 <__exponent+0x22>
 8006662:	3130      	adds	r1, #48	; 0x30
 8006664:	f1ae 0502 	sub.w	r5, lr, #2
 8006668:	f804 1c01 	strb.w	r1, [r4, #-1]
 800666c:	1c44      	adds	r4, r0, #1
 800666e:	4629      	mov	r1, r5
 8006670:	4561      	cmp	r1, ip
 8006672:	d30a      	bcc.n	800668a <__exponent+0x66>
 8006674:	f10d 0209 	add.w	r2, sp, #9
 8006678:	eba2 020e 	sub.w	r2, r2, lr
 800667c:	4565      	cmp	r5, ip
 800667e:	bf88      	it	hi
 8006680:	2200      	movhi	r2, #0
 8006682:	4413      	add	r3, r2
 8006684:	1a18      	subs	r0, r3, r0
 8006686:	b003      	add	sp, #12
 8006688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800668e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006692:	e7ed      	b.n	8006670 <__exponent+0x4c>
 8006694:	2330      	movs	r3, #48	; 0x30
 8006696:	3130      	adds	r1, #48	; 0x30
 8006698:	7083      	strb	r3, [r0, #2]
 800669a:	70c1      	strb	r1, [r0, #3]
 800669c:	1d03      	adds	r3, r0, #4
 800669e:	e7f1      	b.n	8006684 <__exponent+0x60>

080066a0 <_printf_float>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	ed2d 8b02 	vpush	{d8}
 80066a8:	b08d      	sub	sp, #52	; 0x34
 80066aa:	460c      	mov	r4, r1
 80066ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066b0:	4616      	mov	r6, r2
 80066b2:	461f      	mov	r7, r3
 80066b4:	4605      	mov	r5, r0
 80066b6:	f001 fb47 	bl	8007d48 <_localeconv_r>
 80066ba:	f8d0 a000 	ldr.w	sl, [r0]
 80066be:	4650      	mov	r0, sl
 80066c0:	f7f9 fd86 	bl	80001d0 <strlen>
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	; 0x28
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	f8d8 3000 	ldr.w	r3, [r8]
 80066d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066d4:	3307      	adds	r3, #7
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	f103 0208 	add.w	r2, r3, #8
 80066de:	f8c8 2000 	str.w	r2, [r8]
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80066f8:	ee08 0a10 	vmov	s16, r0
 80066fc:	4b9f      	ldr	r3, [pc, #636]	; (800697c <_printf_float+0x2dc>)
 80066fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	f7fa fa11 	bl	8000b2c <__aeabi_dcmpun>
 800670a:	bb88      	cbnz	r0, 8006770 <_printf_float+0xd0>
 800670c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006710:	4b9a      	ldr	r3, [pc, #616]	; (800697c <_printf_float+0x2dc>)
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	f7fa f9eb 	bl	8000af0 <__aeabi_dcmple>
 800671a:	bb48      	cbnz	r0, 8006770 <_printf_float+0xd0>
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7fa f9da 	bl	8000adc <__aeabi_dcmplt>
 8006728:	b110      	cbz	r0, 8006730 <_printf_float+0x90>
 800672a:	232d      	movs	r3, #45	; 0x2d
 800672c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006730:	4b93      	ldr	r3, [pc, #588]	; (8006980 <_printf_float+0x2e0>)
 8006732:	4894      	ldr	r0, [pc, #592]	; (8006984 <_printf_float+0x2e4>)
 8006734:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006738:	bf94      	ite	ls
 800673a:	4698      	movls	r8, r3
 800673c:	4680      	movhi	r8, r0
 800673e:	2303      	movs	r3, #3
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	9b05      	ldr	r3, [sp, #20]
 8006744:	f023 0204 	bic.w	r2, r3, #4
 8006748:	6022      	str	r2, [r4, #0]
 800674a:	f04f 0900 	mov.w	r9, #0
 800674e:	9700      	str	r7, [sp, #0]
 8006750:	4633      	mov	r3, r6
 8006752:	aa0b      	add	r2, sp, #44	; 0x2c
 8006754:	4621      	mov	r1, r4
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f9d8 	bl	8006b0c <_printf_common>
 800675c:	3001      	adds	r0, #1
 800675e:	f040 8090 	bne.w	8006882 <_printf_float+0x1e2>
 8006762:	f04f 30ff 	mov.w	r0, #4294967295
 8006766:	b00d      	add	sp, #52	; 0x34
 8006768:	ecbd 8b02 	vpop	{d8}
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7fa f9d8 	bl	8000b2c <__aeabi_dcmpun>
 800677c:	b140      	cbz	r0, 8006790 <_printf_float+0xf0>
 800677e:	464b      	mov	r3, r9
 8006780:	2b00      	cmp	r3, #0
 8006782:	bfbc      	itt	lt
 8006784:	232d      	movlt	r3, #45	; 0x2d
 8006786:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800678a:	487f      	ldr	r0, [pc, #508]	; (8006988 <_printf_float+0x2e8>)
 800678c:	4b7f      	ldr	r3, [pc, #508]	; (800698c <_printf_float+0x2ec>)
 800678e:	e7d1      	b.n	8006734 <_printf_float+0x94>
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006796:	9206      	str	r2, [sp, #24]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	d13f      	bne.n	800681c <_printf_float+0x17c>
 800679c:	2306      	movs	r3, #6
 800679e:	6063      	str	r3, [r4, #4]
 80067a0:	9b05      	ldr	r3, [sp, #20]
 80067a2:	6861      	ldr	r1, [r4, #4]
 80067a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067a8:	2300      	movs	r3, #0
 80067aa:	9303      	str	r3, [sp, #12]
 80067ac:	ab0a      	add	r3, sp, #40	; 0x28
 80067ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067b2:	ab09      	add	r3, sp, #36	; 0x24
 80067b4:	ec49 8b10 	vmov	d0, r8, r9
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff fecd 	bl	8006560 <__cvt>
 80067c6:	9b06      	ldr	r3, [sp, #24]
 80067c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ca:	2b47      	cmp	r3, #71	; 0x47
 80067cc:	4680      	mov	r8, r0
 80067ce:	d108      	bne.n	80067e2 <_printf_float+0x142>
 80067d0:	1cc8      	adds	r0, r1, #3
 80067d2:	db02      	blt.n	80067da <_printf_float+0x13a>
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	4299      	cmp	r1, r3
 80067d8:	dd41      	ble.n	800685e <_printf_float+0x1be>
 80067da:	f1ab 0b02 	sub.w	fp, fp, #2
 80067de:	fa5f fb8b 	uxtb.w	fp, fp
 80067e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067e6:	d820      	bhi.n	800682a <_printf_float+0x18a>
 80067e8:	3901      	subs	r1, #1
 80067ea:	465a      	mov	r2, fp
 80067ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067f0:	9109      	str	r1, [sp, #36]	; 0x24
 80067f2:	f7ff ff17 	bl	8006624 <__exponent>
 80067f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f8:	1813      	adds	r3, r2, r0
 80067fa:	2a01      	cmp	r2, #1
 80067fc:	4681      	mov	r9, r0
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	dc02      	bgt.n	8006808 <_printf_float+0x168>
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	07d2      	lsls	r2, r2, #31
 8006806:	d501      	bpl.n	800680c <_printf_float+0x16c>
 8006808:	3301      	adds	r3, #1
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006810:	2b00      	cmp	r3, #0
 8006812:	d09c      	beq.n	800674e <_printf_float+0xae>
 8006814:	232d      	movs	r3, #45	; 0x2d
 8006816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681a:	e798      	b.n	800674e <_printf_float+0xae>
 800681c:	9a06      	ldr	r2, [sp, #24]
 800681e:	2a47      	cmp	r2, #71	; 0x47
 8006820:	d1be      	bne.n	80067a0 <_printf_float+0x100>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1bc      	bne.n	80067a0 <_printf_float+0x100>
 8006826:	2301      	movs	r3, #1
 8006828:	e7b9      	b.n	800679e <_printf_float+0xfe>
 800682a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800682e:	d118      	bne.n	8006862 <_printf_float+0x1c2>
 8006830:	2900      	cmp	r1, #0
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	dd0b      	ble.n	800684e <_printf_float+0x1ae>
 8006836:	6121      	str	r1, [r4, #16]
 8006838:	b913      	cbnz	r3, 8006840 <_printf_float+0x1a0>
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	07d0      	lsls	r0, r2, #31
 800683e:	d502      	bpl.n	8006846 <_printf_float+0x1a6>
 8006840:	3301      	adds	r3, #1
 8006842:	440b      	add	r3, r1
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	65a1      	str	r1, [r4, #88]	; 0x58
 8006848:	f04f 0900 	mov.w	r9, #0
 800684c:	e7de      	b.n	800680c <_printf_float+0x16c>
 800684e:	b913      	cbnz	r3, 8006856 <_printf_float+0x1b6>
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	07d2      	lsls	r2, r2, #31
 8006854:	d501      	bpl.n	800685a <_printf_float+0x1ba>
 8006856:	3302      	adds	r3, #2
 8006858:	e7f4      	b.n	8006844 <_printf_float+0x1a4>
 800685a:	2301      	movs	r3, #1
 800685c:	e7f2      	b.n	8006844 <_printf_float+0x1a4>
 800685e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006864:	4299      	cmp	r1, r3
 8006866:	db05      	blt.n	8006874 <_printf_float+0x1d4>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	6121      	str	r1, [r4, #16]
 800686c:	07d8      	lsls	r0, r3, #31
 800686e:	d5ea      	bpl.n	8006846 <_printf_float+0x1a6>
 8006870:	1c4b      	adds	r3, r1, #1
 8006872:	e7e7      	b.n	8006844 <_printf_float+0x1a4>
 8006874:	2900      	cmp	r1, #0
 8006876:	bfd4      	ite	le
 8006878:	f1c1 0202 	rsble	r2, r1, #2
 800687c:	2201      	movgt	r2, #1
 800687e:	4413      	add	r3, r2
 8006880:	e7e0      	b.n	8006844 <_printf_float+0x1a4>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	055a      	lsls	r2, r3, #21
 8006886:	d407      	bmi.n	8006898 <_printf_float+0x1f8>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	4642      	mov	r2, r8
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	d12c      	bne.n	80068f0 <_printf_float+0x250>
 8006896:	e764      	b.n	8006762 <_printf_float+0xc2>
 8006898:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800689c:	f240 80e0 	bls.w	8006a60 <_printf_float+0x3c0>
 80068a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068a4:	2200      	movs	r2, #0
 80068a6:	2300      	movs	r3, #0
 80068a8:	f7fa f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d034      	beq.n	800691a <_printf_float+0x27a>
 80068b0:	4a37      	ldr	r2, [pc, #220]	; (8006990 <_printf_float+0x2f0>)
 80068b2:	2301      	movs	r3, #1
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f af51 	beq.w	8006762 <_printf_float+0xc2>
 80068c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c4:	429a      	cmp	r2, r3
 80068c6:	db02      	blt.n	80068ce <_printf_float+0x22e>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	07d8      	lsls	r0, r3, #31
 80068cc:	d510      	bpl.n	80068f0 <_printf_float+0x250>
 80068ce:	ee18 3a10 	vmov	r3, s16
 80068d2:	4652      	mov	r2, sl
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f43f af41 	beq.w	8006762 <_printf_float+0xc2>
 80068e0:	f04f 0800 	mov.w	r8, #0
 80068e4:	f104 091a 	add.w	r9, r4, #26
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	4543      	cmp	r3, r8
 80068ee:	dc09      	bgt.n	8006904 <_printf_float+0x264>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	079b      	lsls	r3, r3, #30
 80068f4:	f100 8105 	bmi.w	8006b02 <_printf_float+0x462>
 80068f8:	68e0      	ldr	r0, [r4, #12]
 80068fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068fc:	4298      	cmp	r0, r3
 80068fe:	bfb8      	it	lt
 8006900:	4618      	movlt	r0, r3
 8006902:	e730      	b.n	8006766 <_printf_float+0xc6>
 8006904:	2301      	movs	r3, #1
 8006906:	464a      	mov	r2, r9
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af27 	beq.w	8006762 <_printf_float+0xc2>
 8006914:	f108 0801 	add.w	r8, r8, #1
 8006918:	e7e6      	b.n	80068e8 <_printf_float+0x248>
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	dc39      	bgt.n	8006994 <_printf_float+0x2f4>
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <_printf_float+0x2f0>)
 8006922:	2301      	movs	r3, #1
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f af19 	beq.w	8006762 <_printf_float+0xc2>
 8006930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006934:	4313      	orrs	r3, r2
 8006936:	d102      	bne.n	800693e <_printf_float+0x29e>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07d9      	lsls	r1, r3, #31
 800693c:	d5d8      	bpl.n	80068f0 <_printf_float+0x250>
 800693e:	ee18 3a10 	vmov	r3, s16
 8006942:	4652      	mov	r2, sl
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af09 	beq.w	8006762 <_printf_float+0xc2>
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	f104 0a1a 	add.w	sl, r4, #26
 8006958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695a:	425b      	negs	r3, r3
 800695c:	454b      	cmp	r3, r9
 800695e:	dc01      	bgt.n	8006964 <_printf_float+0x2c4>
 8006960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006962:	e792      	b.n	800688a <_printf_float+0x1ea>
 8006964:	2301      	movs	r3, #1
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f aef7 	beq.w	8006762 <_printf_float+0xc2>
 8006974:	f109 0901 	add.w	r9, r9, #1
 8006978:	e7ee      	b.n	8006958 <_printf_float+0x2b8>
 800697a:	bf00      	nop
 800697c:	7fefffff 	.word	0x7fefffff
 8006980:	080096dc 	.word	0x080096dc
 8006984:	080096e0 	.word	0x080096e0
 8006988:	080096e8 	.word	0x080096e8
 800698c:	080096e4 	.word	0x080096e4
 8006990:	080096ec 	.word	0x080096ec
 8006994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006998:	429a      	cmp	r2, r3
 800699a:	bfa8      	it	ge
 800699c:	461a      	movge	r2, r3
 800699e:	2a00      	cmp	r2, #0
 80069a0:	4691      	mov	r9, r2
 80069a2:	dc37      	bgt.n	8006a14 <_printf_float+0x374>
 80069a4:	f04f 0b00 	mov.w	fp, #0
 80069a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ac:	f104 021a 	add.w	r2, r4, #26
 80069b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	eba3 0309 	sub.w	r3, r3, r9
 80069b8:	455b      	cmp	r3, fp
 80069ba:	dc33      	bgt.n	8006a24 <_printf_float+0x384>
 80069bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c0:	429a      	cmp	r2, r3
 80069c2:	db3b      	blt.n	8006a3c <_printf_float+0x39c>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	07da      	lsls	r2, r3, #31
 80069c8:	d438      	bmi.n	8006a3c <_printf_float+0x39c>
 80069ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069cc:	9a05      	ldr	r2, [sp, #20]
 80069ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d0:	1a9a      	subs	r2, r3, r2
 80069d2:	eba3 0901 	sub.w	r9, r3, r1
 80069d6:	4591      	cmp	r9, r2
 80069d8:	bfa8      	it	ge
 80069da:	4691      	movge	r9, r2
 80069dc:	f1b9 0f00 	cmp.w	r9, #0
 80069e0:	dc35      	bgt.n	8006a4e <_printf_float+0x3ae>
 80069e2:	f04f 0800 	mov.w	r8, #0
 80069e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ea:	f104 0a1a 	add.w	sl, r4, #26
 80069ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	eba3 0309 	sub.w	r3, r3, r9
 80069f8:	4543      	cmp	r3, r8
 80069fa:	f77f af79 	ble.w	80068f0 <_printf_float+0x250>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4652      	mov	r2, sl
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f aeaa 	beq.w	8006762 <_printf_float+0xc2>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	e7ec      	b.n	80069ee <_printf_float+0x34e>
 8006a14:	4613      	mov	r3, r2
 8006a16:	4631      	mov	r1, r6
 8006a18:	4642      	mov	r2, r8
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d1c0      	bne.n	80069a4 <_printf_float+0x304>
 8006a22:	e69e      	b.n	8006762 <_printf_float+0xc2>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	9205      	str	r2, [sp, #20]
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f ae97 	beq.w	8006762 <_printf_float+0xc2>
 8006a34:	9a05      	ldr	r2, [sp, #20]
 8006a36:	f10b 0b01 	add.w	fp, fp, #1
 8006a3a:	e7b9      	b.n	80069b0 <_printf_float+0x310>
 8006a3c:	ee18 3a10 	vmov	r3, s16
 8006a40:	4652      	mov	r2, sl
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d1be      	bne.n	80069ca <_printf_float+0x32a>
 8006a4c:	e689      	b.n	8006762 <_printf_float+0xc2>
 8006a4e:	9a05      	ldr	r2, [sp, #20]
 8006a50:	464b      	mov	r3, r9
 8006a52:	4442      	add	r2, r8
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d1c1      	bne.n	80069e2 <_printf_float+0x342>
 8006a5e:	e680      	b.n	8006762 <_printf_float+0xc2>
 8006a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a62:	2a01      	cmp	r2, #1
 8006a64:	dc01      	bgt.n	8006a6a <_printf_float+0x3ca>
 8006a66:	07db      	lsls	r3, r3, #31
 8006a68:	d538      	bpl.n	8006adc <_printf_float+0x43c>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f ae74 	beq.w	8006762 <_printf_float+0xc2>
 8006a7a:	ee18 3a10 	vmov	r3, s16
 8006a7e:	4652      	mov	r2, sl
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f ae6b 	beq.w	8006762 <_printf_float+0xc2>
 8006a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	f7fa f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a98:	b9d8      	cbnz	r0, 8006ad2 <_printf_float+0x432>
 8006a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9c:	f108 0201 	add.w	r2, r8, #1
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d10e      	bne.n	8006aca <_printf_float+0x42a>
 8006aac:	e659      	b.n	8006762 <_printf_float+0xc2>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f ae52 	beq.w	8006762 <_printf_float+0xc2>
 8006abe:	f108 0801 	add.w	r8, r8, #1
 8006ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	4543      	cmp	r3, r8
 8006ac8:	dcf1      	bgt.n	8006aae <_printf_float+0x40e>
 8006aca:	464b      	mov	r3, r9
 8006acc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ad0:	e6dc      	b.n	800688c <_printf_float+0x1ec>
 8006ad2:	f04f 0800 	mov.w	r8, #0
 8006ad6:	f104 0a1a 	add.w	sl, r4, #26
 8006ada:	e7f2      	b.n	8006ac2 <_printf_float+0x422>
 8006adc:	2301      	movs	r3, #1
 8006ade:	4642      	mov	r2, r8
 8006ae0:	e7df      	b.n	8006aa2 <_printf_float+0x402>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	464a      	mov	r2, r9
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b8      	blx	r7
 8006aec:	3001      	adds	r0, #1
 8006aee:	f43f ae38 	beq.w	8006762 <_printf_float+0xc2>
 8006af2:	f108 0801 	add.w	r8, r8, #1
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006afa:	1a5b      	subs	r3, r3, r1
 8006afc:	4543      	cmp	r3, r8
 8006afe:	dcf0      	bgt.n	8006ae2 <_printf_float+0x442>
 8006b00:	e6fa      	b.n	80068f8 <_printf_float+0x258>
 8006b02:	f04f 0800 	mov.w	r8, #0
 8006b06:	f104 0919 	add.w	r9, r4, #25
 8006b0a:	e7f4      	b.n	8006af6 <_printf_float+0x456>

08006b0c <_printf_common>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	4616      	mov	r6, r2
 8006b12:	4699      	mov	r9, r3
 8006b14:	688a      	ldr	r2, [r1, #8]
 8006b16:	690b      	ldr	r3, [r1, #16]
 8006b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	bfb8      	it	lt
 8006b20:	4613      	movlt	r3, r2
 8006b22:	6033      	str	r3, [r6, #0]
 8006b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b28:	4607      	mov	r7, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	b10a      	cbz	r2, 8006b32 <_printf_common+0x26>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	0699      	lsls	r1, r3, #26
 8006b36:	bf42      	ittt	mi
 8006b38:	6833      	ldrmi	r3, [r6, #0]
 8006b3a:	3302      	addmi	r3, #2
 8006b3c:	6033      	strmi	r3, [r6, #0]
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	f015 0506 	ands.w	r5, r5, #6
 8006b44:	d106      	bne.n	8006b54 <_printf_common+0x48>
 8006b46:	f104 0a19 	add.w	sl, r4, #25
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	6832      	ldr	r2, [r6, #0]
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	dc26      	bgt.n	8006ba2 <_printf_common+0x96>
 8006b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b58:	1e13      	subs	r3, r2, #0
 8006b5a:	6822      	ldr	r2, [r4, #0]
 8006b5c:	bf18      	it	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	0692      	lsls	r2, r2, #26
 8006b62:	d42b      	bmi.n	8006bbc <_printf_common+0xb0>
 8006b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b68:	4649      	mov	r1, r9
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	47c0      	blx	r8
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d01e      	beq.n	8006bb0 <_printf_common+0xa4>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	68e5      	ldr	r5, [r4, #12]
 8006b76:	6832      	ldr	r2, [r6, #0]
 8006b78:	f003 0306 	and.w	r3, r3, #6
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	bf08      	it	eq
 8006b80:	1aad      	subeq	r5, r5, r2
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	6922      	ldr	r2, [r4, #16]
 8006b86:	bf0c      	ite	eq
 8006b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b8c:	2500      	movne	r5, #0
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bfc4      	itt	gt
 8006b92:	1a9b      	subgt	r3, r3, r2
 8006b94:	18ed      	addgt	r5, r5, r3
 8006b96:	2600      	movs	r6, #0
 8006b98:	341a      	adds	r4, #26
 8006b9a:	42b5      	cmp	r5, r6
 8006b9c:	d11a      	bne.n	8006bd4 <_printf_common+0xc8>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e008      	b.n	8006bb4 <_printf_common+0xa8>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4652      	mov	r2, sl
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	4638      	mov	r0, r7
 8006baa:	47c0      	blx	r8
 8006bac:	3001      	adds	r0, #1
 8006bae:	d103      	bne.n	8006bb8 <_printf_common+0xac>
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb8:	3501      	adds	r5, #1
 8006bba:	e7c6      	b.n	8006b4a <_printf_common+0x3e>
 8006bbc:	18e1      	adds	r1, r4, r3
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	2030      	movs	r0, #48	; 0x30
 8006bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bc6:	4422      	add	r2, r4
 8006bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	e7c7      	b.n	8006b64 <_printf_common+0x58>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	4649      	mov	r1, r9
 8006bda:	4638      	mov	r0, r7
 8006bdc:	47c0      	blx	r8
 8006bde:	3001      	adds	r0, #1
 8006be0:	d0e6      	beq.n	8006bb0 <_printf_common+0xa4>
 8006be2:	3601      	adds	r6, #1
 8006be4:	e7d9      	b.n	8006b9a <_printf_common+0x8e>
	...

08006be8 <_printf_i>:
 8006be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	7e0f      	ldrb	r7, [r1, #24]
 8006bee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bf0:	2f78      	cmp	r7, #120	; 0x78
 8006bf2:	4691      	mov	r9, r2
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	469a      	mov	sl, r3
 8006bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bfe:	d807      	bhi.n	8006c10 <_printf_i+0x28>
 8006c00:	2f62      	cmp	r7, #98	; 0x62
 8006c02:	d80a      	bhi.n	8006c1a <_printf_i+0x32>
 8006c04:	2f00      	cmp	r7, #0
 8006c06:	f000 80d8 	beq.w	8006dba <_printf_i+0x1d2>
 8006c0a:	2f58      	cmp	r7, #88	; 0x58
 8006c0c:	f000 80a3 	beq.w	8006d56 <_printf_i+0x16e>
 8006c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c18:	e03a      	b.n	8006c90 <_printf_i+0xa8>
 8006c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c1e:	2b15      	cmp	r3, #21
 8006c20:	d8f6      	bhi.n	8006c10 <_printf_i+0x28>
 8006c22:	a101      	add	r1, pc, #4	; (adr r1, 8006c28 <_printf_i+0x40>)
 8006c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c95 	.word	0x08006c95
 8006c30:	08006c11 	.word	0x08006c11
 8006c34:	08006c11 	.word	0x08006c11
 8006c38:	08006c11 	.word	0x08006c11
 8006c3c:	08006c11 	.word	0x08006c11
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006c11 	.word	0x08006c11
 8006c48:	08006c11 	.word	0x08006c11
 8006c4c:	08006c11 	.word	0x08006c11
 8006c50:	08006c11 	.word	0x08006c11
 8006c54:	08006da1 	.word	0x08006da1
 8006c58:	08006cc5 	.word	0x08006cc5
 8006c5c:	08006d83 	.word	0x08006d83
 8006c60:	08006c11 	.word	0x08006c11
 8006c64:	08006c11 	.word	0x08006c11
 8006c68:	08006dc3 	.word	0x08006dc3
 8006c6c:	08006c11 	.word	0x08006c11
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006c11 	.word	0x08006c11
 8006c78:	08006c11 	.word	0x08006c11
 8006c7c:	08006d8b 	.word	0x08006d8b
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	1d1a      	adds	r2, r3, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	602a      	str	r2, [r5, #0]
 8006c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0a3      	b.n	8006ddc <_printf_i+0x1f4>
 8006c94:	6820      	ldr	r0, [r4, #0]
 8006c96:	6829      	ldr	r1, [r5, #0]
 8006c98:	0606      	lsls	r6, r0, #24
 8006c9a:	f101 0304 	add.w	r3, r1, #4
 8006c9e:	d50a      	bpl.n	8006cb6 <_printf_i+0xce>
 8006ca0:	680e      	ldr	r6, [r1, #0]
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	2e00      	cmp	r6, #0
 8006ca6:	da03      	bge.n	8006cb0 <_printf_i+0xc8>
 8006ca8:	232d      	movs	r3, #45	; 0x2d
 8006caa:	4276      	negs	r6, r6
 8006cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb0:	485e      	ldr	r0, [pc, #376]	; (8006e2c <_printf_i+0x244>)
 8006cb2:	230a      	movs	r3, #10
 8006cb4:	e019      	b.n	8006cea <_printf_i+0x102>
 8006cb6:	680e      	ldr	r6, [r1, #0]
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cbe:	bf18      	it	ne
 8006cc0:	b236      	sxthne	r6, r6
 8006cc2:	e7ef      	b.n	8006ca4 <_printf_i+0xbc>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	1d19      	adds	r1, r3, #4
 8006cca:	6029      	str	r1, [r5, #0]
 8006ccc:	0601      	lsls	r1, r0, #24
 8006cce:	d501      	bpl.n	8006cd4 <_printf_i+0xec>
 8006cd0:	681e      	ldr	r6, [r3, #0]
 8006cd2:	e002      	b.n	8006cda <_printf_i+0xf2>
 8006cd4:	0646      	lsls	r6, r0, #25
 8006cd6:	d5fb      	bpl.n	8006cd0 <_printf_i+0xe8>
 8006cd8:	881e      	ldrh	r6, [r3, #0]
 8006cda:	4854      	ldr	r0, [pc, #336]	; (8006e2c <_printf_i+0x244>)
 8006cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cde:	bf0c      	ite	eq
 8006ce0:	2308      	moveq	r3, #8
 8006ce2:	230a      	movne	r3, #10
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cea:	6865      	ldr	r5, [r4, #4]
 8006cec:	60a5      	str	r5, [r4, #8]
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	bfa2      	ittt	ge
 8006cf2:	6821      	ldrge	r1, [r4, #0]
 8006cf4:	f021 0104 	bicge.w	r1, r1, #4
 8006cf8:	6021      	strge	r1, [r4, #0]
 8006cfa:	b90e      	cbnz	r6, 8006d00 <_printf_i+0x118>
 8006cfc:	2d00      	cmp	r5, #0
 8006cfe:	d04d      	beq.n	8006d9c <_printf_i+0x1b4>
 8006d00:	4615      	mov	r5, r2
 8006d02:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d06:	fb03 6711 	mls	r7, r3, r1, r6
 8006d0a:	5dc7      	ldrb	r7, [r0, r7]
 8006d0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d10:	4637      	mov	r7, r6
 8006d12:	42bb      	cmp	r3, r7
 8006d14:	460e      	mov	r6, r1
 8006d16:	d9f4      	bls.n	8006d02 <_printf_i+0x11a>
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d10b      	bne.n	8006d34 <_printf_i+0x14c>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	07de      	lsls	r6, r3, #31
 8006d20:	d508      	bpl.n	8006d34 <_printf_i+0x14c>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	6861      	ldr	r1, [r4, #4]
 8006d26:	4299      	cmp	r1, r3
 8006d28:	bfde      	ittt	le
 8006d2a:	2330      	movle	r3, #48	; 0x30
 8006d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d34:	1b52      	subs	r2, r2, r5
 8006d36:	6122      	str	r2, [r4, #16]
 8006d38:	f8cd a000 	str.w	sl, [sp]
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	aa03      	add	r2, sp, #12
 8006d40:	4621      	mov	r1, r4
 8006d42:	4640      	mov	r0, r8
 8006d44:	f7ff fee2 	bl	8006b0c <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d14c      	bne.n	8006de6 <_printf_i+0x1fe>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	b004      	add	sp, #16
 8006d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d56:	4835      	ldr	r0, [pc, #212]	; (8006e2c <_printf_i+0x244>)
 8006d58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d5c:	6829      	ldr	r1, [r5, #0]
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d64:	6029      	str	r1, [r5, #0]
 8006d66:	061d      	lsls	r5, r3, #24
 8006d68:	d514      	bpl.n	8006d94 <_printf_i+0x1ac>
 8006d6a:	07df      	lsls	r7, r3, #31
 8006d6c:	bf44      	itt	mi
 8006d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d72:	6023      	strmi	r3, [r4, #0]
 8006d74:	b91e      	cbnz	r6, 8006d7e <_printf_i+0x196>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	f023 0320 	bic.w	r3, r3, #32
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	2310      	movs	r3, #16
 8006d80:	e7b0      	b.n	8006ce4 <_printf_i+0xfc>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	f043 0320 	orr.w	r3, r3, #32
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	2378      	movs	r3, #120	; 0x78
 8006d8c:	4828      	ldr	r0, [pc, #160]	; (8006e30 <_printf_i+0x248>)
 8006d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d92:	e7e3      	b.n	8006d5c <_printf_i+0x174>
 8006d94:	0659      	lsls	r1, r3, #25
 8006d96:	bf48      	it	mi
 8006d98:	b2b6      	uxthmi	r6, r6
 8006d9a:	e7e6      	b.n	8006d6a <_printf_i+0x182>
 8006d9c:	4615      	mov	r5, r2
 8006d9e:	e7bb      	b.n	8006d18 <_printf_i+0x130>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	6826      	ldr	r6, [r4, #0]
 8006da4:	6961      	ldr	r1, [r4, #20]
 8006da6:	1d18      	adds	r0, r3, #4
 8006da8:	6028      	str	r0, [r5, #0]
 8006daa:	0635      	lsls	r5, r6, #24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	d501      	bpl.n	8006db4 <_printf_i+0x1cc>
 8006db0:	6019      	str	r1, [r3, #0]
 8006db2:	e002      	b.n	8006dba <_printf_i+0x1d2>
 8006db4:	0670      	lsls	r0, r6, #25
 8006db6:	d5fb      	bpl.n	8006db0 <_printf_i+0x1c8>
 8006db8:	8019      	strh	r1, [r3, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	4615      	mov	r5, r2
 8006dc0:	e7ba      	b.n	8006d38 <_printf_i+0x150>
 8006dc2:	682b      	ldr	r3, [r5, #0]
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	602a      	str	r2, [r5, #0]
 8006dc8:	681d      	ldr	r5, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f7f9 fa06 	bl	80001e0 <memchr>
 8006dd4:	b108      	cbz	r0, 8006dda <_printf_i+0x1f2>
 8006dd6:	1b40      	subs	r0, r0, r5
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	2300      	movs	r3, #0
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de4:	e7a8      	b.n	8006d38 <_printf_i+0x150>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	462a      	mov	r2, r5
 8006dea:	4649      	mov	r1, r9
 8006dec:	4640      	mov	r0, r8
 8006dee:	47d0      	blx	sl
 8006df0:	3001      	adds	r0, #1
 8006df2:	d0ab      	beq.n	8006d4c <_printf_i+0x164>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	079b      	lsls	r3, r3, #30
 8006df8:	d413      	bmi.n	8006e22 <_printf_i+0x23a>
 8006dfa:	68e0      	ldr	r0, [r4, #12]
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	4298      	cmp	r0, r3
 8006e00:	bfb8      	it	lt
 8006e02:	4618      	movlt	r0, r3
 8006e04:	e7a4      	b.n	8006d50 <_printf_i+0x168>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	47d0      	blx	sl
 8006e10:	3001      	adds	r0, #1
 8006e12:	d09b      	beq.n	8006d4c <_printf_i+0x164>
 8006e14:	3501      	adds	r5, #1
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	9903      	ldr	r1, [sp, #12]
 8006e1a:	1a5b      	subs	r3, r3, r1
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dcf2      	bgt.n	8006e06 <_printf_i+0x21e>
 8006e20:	e7eb      	b.n	8006dfa <_printf_i+0x212>
 8006e22:	2500      	movs	r5, #0
 8006e24:	f104 0619 	add.w	r6, r4, #25
 8006e28:	e7f5      	b.n	8006e16 <_printf_i+0x22e>
 8006e2a:	bf00      	nop
 8006e2c:	080096ee 	.word	0x080096ee
 8006e30:	080096ff 	.word	0x080096ff

08006e34 <iprintf>:
 8006e34:	b40f      	push	{r0, r1, r2, r3}
 8006e36:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <iprintf+0x2c>)
 8006e38:	b513      	push	{r0, r1, r4, lr}
 8006e3a:	681c      	ldr	r4, [r3, #0]
 8006e3c:	b124      	cbz	r4, 8006e48 <iprintf+0x14>
 8006e3e:	69a3      	ldr	r3, [r4, #24]
 8006e40:	b913      	cbnz	r3, 8006e48 <iprintf+0x14>
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fee2 	bl	8007c0c <__sinit>
 8006e48:	ab05      	add	r3, sp, #20
 8006e4a:	9a04      	ldr	r2, [sp, #16]
 8006e4c:	68a1      	ldr	r1, [r4, #8]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f001 fc3b 	bl	80086cc <_vfiprintf_r>
 8006e56:	b002      	add	sp, #8
 8006e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e5c:	b004      	add	sp, #16
 8006e5e:	4770      	bx	lr
 8006e60:	200000a4 	.word	0x200000a4

08006e64 <quorem>:
 8006e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	6903      	ldr	r3, [r0, #16]
 8006e6a:	690c      	ldr	r4, [r1, #16]
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	4607      	mov	r7, r0
 8006e70:	f2c0 8081 	blt.w	8006f76 <quorem+0x112>
 8006e74:	3c01      	subs	r4, #1
 8006e76:	f101 0814 	add.w	r8, r1, #20
 8006e7a:	f100 0514 	add.w	r5, r0, #20
 8006e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e82:	9301      	str	r3, [sp, #4]
 8006e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e98:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e9c:	d331      	bcc.n	8006f02 <quorem+0x9e>
 8006e9e:	f04f 0e00 	mov.w	lr, #0
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	46ac      	mov	ip, r5
 8006ea6:	46f2      	mov	sl, lr
 8006ea8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006eac:	b293      	uxth	r3, r2
 8006eae:	fb06 e303 	mla	r3, r6, r3, lr
 8006eb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	ebaa 0303 	sub.w	r3, sl, r3
 8006ebc:	f8dc a000 	ldr.w	sl, [ip]
 8006ec0:	0c12      	lsrs	r2, r2, #16
 8006ec2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ec6:	fb06 e202 	mla	r2, r6, r2, lr
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ed2:	b292      	uxth	r2, r2
 8006ed4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006edc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ee0:	4581      	cmp	r9, r0
 8006ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ee6:	f84c 3b04 	str.w	r3, [ip], #4
 8006eea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006eee:	d2db      	bcs.n	8006ea8 <quorem+0x44>
 8006ef0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ef4:	b92b      	cbnz	r3, 8006f02 <quorem+0x9e>
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	429d      	cmp	r5, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	d32e      	bcc.n	8006f5e <quorem+0xfa>
 8006f00:	613c      	str	r4, [r7, #16]
 8006f02:	4638      	mov	r0, r7
 8006f04:	f001 f9c0 	bl	8008288 <__mcmp>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	db24      	blt.n	8006f56 <quorem+0xf2>
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f04f 0c00 	mov.w	ip, #0
 8006f14:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f18:	f8d0 e000 	ldr.w	lr, [r0]
 8006f1c:	b293      	uxth	r3, r2
 8006f1e:	ebac 0303 	sub.w	r3, ip, r3
 8006f22:	0c12      	lsrs	r2, r2, #16
 8006f24:	fa13 f38e 	uxtah	r3, r3, lr
 8006f28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f36:	45c1      	cmp	r9, r8
 8006f38:	f840 3b04 	str.w	r3, [r0], #4
 8006f3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f40:	d2e8      	bcs.n	8006f14 <quorem+0xb0>
 8006f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f4a:	b922      	cbnz	r2, 8006f56 <quorem+0xf2>
 8006f4c:	3b04      	subs	r3, #4
 8006f4e:	429d      	cmp	r5, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	d30a      	bcc.n	8006f6a <quorem+0x106>
 8006f54:	613c      	str	r4, [r7, #16]
 8006f56:	4630      	mov	r0, r6
 8006f58:	b003      	add	sp, #12
 8006f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	3b04      	subs	r3, #4
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	d1cc      	bne.n	8006f00 <quorem+0x9c>
 8006f66:	3c01      	subs	r4, #1
 8006f68:	e7c7      	b.n	8006efa <quorem+0x96>
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d1f0      	bne.n	8006f54 <quorem+0xf0>
 8006f72:	3c01      	subs	r4, #1
 8006f74:	e7eb      	b.n	8006f4e <quorem+0xea>
 8006f76:	2000      	movs	r0, #0
 8006f78:	e7ee      	b.n	8006f58 <quorem+0xf4>
 8006f7a:	0000      	movs	r0, r0
 8006f7c:	0000      	movs	r0, r0
	...

08006f80 <_dtoa_r>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	ed2d 8b04 	vpush	{d8-d9}
 8006f88:	ec57 6b10 	vmov	r6, r7, d0
 8006f8c:	b093      	sub	sp, #76	; 0x4c
 8006f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f94:	9106      	str	r1, [sp, #24]
 8006f96:	ee10 aa10 	vmov	sl, s0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8006fa0:	46bb      	mov	fp, r7
 8006fa2:	b975      	cbnz	r5, 8006fc2 <_dtoa_r+0x42>
 8006fa4:	2010      	movs	r0, #16
 8006fa6:	f000 fed7 	bl	8007d58 <malloc>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6260      	str	r0, [r4, #36]	; 0x24
 8006fae:	b920      	cbnz	r0, 8006fba <_dtoa_r+0x3a>
 8006fb0:	4ba7      	ldr	r3, [pc, #668]	; (8007250 <_dtoa_r+0x2d0>)
 8006fb2:	21ea      	movs	r1, #234	; 0xea
 8006fb4:	48a7      	ldr	r0, [pc, #668]	; (8007254 <_dtoa_r+0x2d4>)
 8006fb6:	f001 fddf 	bl	8008b78 <__assert_func>
 8006fba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fbe:	6005      	str	r5, [r0, #0]
 8006fc0:	60c5      	str	r5, [r0, #12]
 8006fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc4:	6819      	ldr	r1, [r3, #0]
 8006fc6:	b151      	cbz	r1, 8006fde <_dtoa_r+0x5e>
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	604a      	str	r2, [r1, #4]
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4093      	lsls	r3, r2
 8006fd0:	608b      	str	r3, [r1, #8]
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 ff16 	bl	8007e04 <_Bfree>
 8006fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	1e3b      	subs	r3, r7, #0
 8006fe0:	bfaa      	itet	ge
 8006fe2:	2300      	movge	r3, #0
 8006fe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006fe8:	f8c8 3000 	strge.w	r3, [r8]
 8006fec:	4b9a      	ldr	r3, [pc, #616]	; (8007258 <_dtoa_r+0x2d8>)
 8006fee:	bfbc      	itt	lt
 8006ff0:	2201      	movlt	r2, #1
 8006ff2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ff6:	ea33 030b 	bics.w	r3, r3, fp
 8006ffa:	d11b      	bne.n	8007034 <_dtoa_r+0xb4>
 8006ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ffe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007008:	4333      	orrs	r3, r6
 800700a:	f000 8592 	beq.w	8007b32 <_dtoa_r+0xbb2>
 800700e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007010:	b963      	cbnz	r3, 800702c <_dtoa_r+0xac>
 8007012:	4b92      	ldr	r3, [pc, #584]	; (800725c <_dtoa_r+0x2dc>)
 8007014:	e022      	b.n	800705c <_dtoa_r+0xdc>
 8007016:	4b92      	ldr	r3, [pc, #584]	; (8007260 <_dtoa_r+0x2e0>)
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	3308      	adds	r3, #8
 800701c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	9801      	ldr	r0, [sp, #4]
 8007022:	b013      	add	sp, #76	; 0x4c
 8007024:	ecbd 8b04 	vpop	{d8-d9}
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	4b8b      	ldr	r3, [pc, #556]	; (800725c <_dtoa_r+0x2dc>)
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	3303      	adds	r3, #3
 8007032:	e7f3      	b.n	800701c <_dtoa_r+0x9c>
 8007034:	2200      	movs	r2, #0
 8007036:	2300      	movs	r3, #0
 8007038:	4650      	mov	r0, sl
 800703a:	4659      	mov	r1, fp
 800703c:	f7f9 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007040:	ec4b ab19 	vmov	d9, sl, fp
 8007044:	4680      	mov	r8, r0
 8007046:	b158      	cbz	r0, 8007060 <_dtoa_r+0xe0>
 8007048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800704a:	2301      	movs	r3, #1
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 856b 	beq.w	8007b2c <_dtoa_r+0xbac>
 8007056:	4883      	ldr	r0, [pc, #524]	; (8007264 <_dtoa_r+0x2e4>)
 8007058:	6018      	str	r0, [r3, #0]
 800705a:	1e43      	subs	r3, r0, #1
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	e7df      	b.n	8007020 <_dtoa_r+0xa0>
 8007060:	ec4b ab10 	vmov	d0, sl, fp
 8007064:	aa10      	add	r2, sp, #64	; 0x40
 8007066:	a911      	add	r1, sp, #68	; 0x44
 8007068:	4620      	mov	r0, r4
 800706a:	f001 f9b3 	bl	80083d4 <__d2b>
 800706e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007072:	ee08 0a10 	vmov	s16, r0
 8007076:	2d00      	cmp	r5, #0
 8007078:	f000 8084 	beq.w	8007184 <_dtoa_r+0x204>
 800707c:	ee19 3a90 	vmov	r3, s19
 8007080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007088:	4656      	mov	r6, sl
 800708a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800708e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007096:	4b74      	ldr	r3, [pc, #464]	; (8007268 <_dtoa_r+0x2e8>)
 8007098:	2200      	movs	r2, #0
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 f8f3 	bl	8000288 <__aeabi_dsub>
 80070a2:	a365      	add	r3, pc, #404	; (adr r3, 8007238 <_dtoa_r+0x2b8>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	a364      	add	r3, pc, #400	; (adr r3, 8007240 <_dtoa_r+0x2c0>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f8eb 	bl	800028c <__adddf3>
 80070b6:	4606      	mov	r6, r0
 80070b8:	4628      	mov	r0, r5
 80070ba:	460f      	mov	r7, r1
 80070bc:	f7f9 fa32 	bl	8000524 <__aeabi_i2d>
 80070c0:	a361      	add	r3, pc, #388	; (adr r3, 8007248 <_dtoa_r+0x2c8>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fa97 	bl	80005f8 <__aeabi_dmul>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7f9 f8db 	bl	800028c <__adddf3>
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	f7f9 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80070de:	2200      	movs	r2, #0
 80070e0:	9000      	str	r0, [sp, #0]
 80070e2:	2300      	movs	r3, #0
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80070ec:	b150      	cbz	r0, 8007104 <_dtoa_r+0x184>
 80070ee:	9800      	ldr	r0, [sp, #0]
 80070f0:	f7f9 fa18 	bl	8000524 <__aeabi_i2d>
 80070f4:	4632      	mov	r2, r6
 80070f6:	463b      	mov	r3, r7
 80070f8:	f7f9 fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80070fc:	b910      	cbnz	r0, 8007104 <_dtoa_r+0x184>
 80070fe:	9b00      	ldr	r3, [sp, #0]
 8007100:	3b01      	subs	r3, #1
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	2b16      	cmp	r3, #22
 8007108:	d85a      	bhi.n	80071c0 <_dtoa_r+0x240>
 800710a:	9a00      	ldr	r2, [sp, #0]
 800710c:	4b57      	ldr	r3, [pc, #348]	; (800726c <_dtoa_r+0x2ec>)
 800710e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	ec51 0b19 	vmov	r0, r1, d9
 800711a:	f7f9 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	d050      	beq.n	80071c4 <_dtoa_r+0x244>
 8007122:	9b00      	ldr	r3, [sp, #0]
 8007124:	3b01      	subs	r3, #1
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	2300      	movs	r3, #0
 800712a:	930b      	str	r3, [sp, #44]	; 0x2c
 800712c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800712e:	1b5d      	subs	r5, r3, r5
 8007130:	1e6b      	subs	r3, r5, #1
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	bf45      	ittet	mi
 8007136:	f1c5 0301 	rsbmi	r3, r5, #1
 800713a:	9304      	strmi	r3, [sp, #16]
 800713c:	2300      	movpl	r3, #0
 800713e:	2300      	movmi	r3, #0
 8007140:	bf4c      	ite	mi
 8007142:	9305      	strmi	r3, [sp, #20]
 8007144:	9304      	strpl	r3, [sp, #16]
 8007146:	9b00      	ldr	r3, [sp, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	db3d      	blt.n	80071c8 <_dtoa_r+0x248>
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	9a00      	ldr	r2, [sp, #0]
 8007150:	920a      	str	r2, [sp, #40]	; 0x28
 8007152:	4413      	add	r3, r2
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	2300      	movs	r3, #0
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	9b06      	ldr	r3, [sp, #24]
 800715c:	2b09      	cmp	r3, #9
 800715e:	f200 8089 	bhi.w	8007274 <_dtoa_r+0x2f4>
 8007162:	2b05      	cmp	r3, #5
 8007164:	bfc4      	itt	gt
 8007166:	3b04      	subgt	r3, #4
 8007168:	9306      	strgt	r3, [sp, #24]
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	f1a3 0302 	sub.w	r3, r3, #2
 8007170:	bfcc      	ite	gt
 8007172:	2500      	movgt	r5, #0
 8007174:	2501      	movle	r5, #1
 8007176:	2b03      	cmp	r3, #3
 8007178:	f200 8087 	bhi.w	800728a <_dtoa_r+0x30a>
 800717c:	e8df f003 	tbb	[pc, r3]
 8007180:	59383a2d 	.word	0x59383a2d
 8007184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007188:	441d      	add	r5, r3
 800718a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800718e:	2b20      	cmp	r3, #32
 8007190:	bfc1      	itttt	gt
 8007192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800719a:	fa0b f303 	lslgt.w	r3, fp, r3
 800719e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071a2:	bfda      	itte	le
 80071a4:	f1c3 0320 	rsble	r3, r3, #32
 80071a8:	fa06 f003 	lslle.w	r0, r6, r3
 80071ac:	4318      	orrgt	r0, r3
 80071ae:	f7f9 f9a9 	bl	8000504 <__aeabi_ui2d>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4606      	mov	r6, r0
 80071b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071ba:	3d01      	subs	r5, #1
 80071bc:	930e      	str	r3, [sp, #56]	; 0x38
 80071be:	e76a      	b.n	8007096 <_dtoa_r+0x116>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e7b2      	b.n	800712a <_dtoa_r+0x1aa>
 80071c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80071c6:	e7b1      	b.n	800712c <_dtoa_r+0x1ac>
 80071c8:	9b04      	ldr	r3, [sp, #16]
 80071ca:	9a00      	ldr	r2, [sp, #0]
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	4253      	negs	r3, r2
 80071d2:	9307      	str	r3, [sp, #28]
 80071d4:	2300      	movs	r3, #0
 80071d6:	930a      	str	r3, [sp, #40]	; 0x28
 80071d8:	e7bf      	b.n	800715a <_dtoa_r+0x1da>
 80071da:	2300      	movs	r3, #0
 80071dc:	9308      	str	r3, [sp, #32]
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dc55      	bgt.n	8007290 <_dtoa_r+0x310>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071ea:	461a      	mov	r2, r3
 80071ec:	9209      	str	r2, [sp, #36]	; 0x24
 80071ee:	e00c      	b.n	800720a <_dtoa_r+0x28a>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7f3      	b.n	80071dc <_dtoa_r+0x25c>
 80071f4:	2300      	movs	r3, #0
 80071f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f8:	9308      	str	r3, [sp, #32]
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	4413      	add	r3, r2
 80071fe:	9302      	str	r3, [sp, #8]
 8007200:	3301      	adds	r3, #1
 8007202:	2b01      	cmp	r3, #1
 8007204:	9303      	str	r3, [sp, #12]
 8007206:	bfb8      	it	lt
 8007208:	2301      	movlt	r3, #1
 800720a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800720c:	2200      	movs	r2, #0
 800720e:	6042      	str	r2, [r0, #4]
 8007210:	2204      	movs	r2, #4
 8007212:	f102 0614 	add.w	r6, r2, #20
 8007216:	429e      	cmp	r6, r3
 8007218:	6841      	ldr	r1, [r0, #4]
 800721a:	d93d      	bls.n	8007298 <_dtoa_r+0x318>
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fdb1 	bl	8007d84 <_Balloc>
 8007222:	9001      	str	r0, [sp, #4]
 8007224:	2800      	cmp	r0, #0
 8007226:	d13b      	bne.n	80072a0 <_dtoa_r+0x320>
 8007228:	4b11      	ldr	r3, [pc, #68]	; (8007270 <_dtoa_r+0x2f0>)
 800722a:	4602      	mov	r2, r0
 800722c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007230:	e6c0      	b.n	8006fb4 <_dtoa_r+0x34>
 8007232:	2301      	movs	r3, #1
 8007234:	e7df      	b.n	80071f6 <_dtoa_r+0x276>
 8007236:	bf00      	nop
 8007238:	636f4361 	.word	0x636f4361
 800723c:	3fd287a7 	.word	0x3fd287a7
 8007240:	8b60c8b3 	.word	0x8b60c8b3
 8007244:	3fc68a28 	.word	0x3fc68a28
 8007248:	509f79fb 	.word	0x509f79fb
 800724c:	3fd34413 	.word	0x3fd34413
 8007250:	0800971d 	.word	0x0800971d
 8007254:	08009734 	.word	0x08009734
 8007258:	7ff00000 	.word	0x7ff00000
 800725c:	08009719 	.word	0x08009719
 8007260:	08009710 	.word	0x08009710
 8007264:	080096ed 	.word	0x080096ed
 8007268:	3ff80000 	.word	0x3ff80000
 800726c:	08009888 	.word	0x08009888
 8007270:	0800978f 	.word	0x0800978f
 8007274:	2501      	movs	r5, #1
 8007276:	2300      	movs	r3, #0
 8007278:	9306      	str	r3, [sp, #24]
 800727a:	9508      	str	r5, [sp, #32]
 800727c:	f04f 33ff 	mov.w	r3, #4294967295
 8007280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	2312      	movs	r3, #18
 8007288:	e7b0      	b.n	80071ec <_dtoa_r+0x26c>
 800728a:	2301      	movs	r3, #1
 800728c:	9308      	str	r3, [sp, #32]
 800728e:	e7f5      	b.n	800727c <_dtoa_r+0x2fc>
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007296:	e7b8      	b.n	800720a <_dtoa_r+0x28a>
 8007298:	3101      	adds	r1, #1
 800729a:	6041      	str	r1, [r0, #4]
 800729c:	0052      	lsls	r2, r2, #1
 800729e:	e7b8      	b.n	8007212 <_dtoa_r+0x292>
 80072a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a2:	9a01      	ldr	r2, [sp, #4]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	2b0e      	cmp	r3, #14
 80072aa:	f200 809d 	bhi.w	80073e8 <_dtoa_r+0x468>
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	f000 809a 	beq.w	80073e8 <_dtoa_r+0x468>
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd32      	ble.n	8007320 <_dtoa_r+0x3a0>
 80072ba:	4ab7      	ldr	r2, [pc, #732]	; (8007598 <_dtoa_r+0x618>)
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072c8:	9b00      	ldr	r3, [sp, #0]
 80072ca:	05d8      	lsls	r0, r3, #23
 80072cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80072d0:	d516      	bpl.n	8007300 <_dtoa_r+0x380>
 80072d2:	4bb2      	ldr	r3, [pc, #712]	; (800759c <_dtoa_r+0x61c>)
 80072d4:	ec51 0b19 	vmov	r0, r1, d9
 80072d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072dc:	f7f9 fab6 	bl	800084c <__aeabi_ddiv>
 80072e0:	f007 070f 	and.w	r7, r7, #15
 80072e4:	4682      	mov	sl, r0
 80072e6:	468b      	mov	fp, r1
 80072e8:	2503      	movs	r5, #3
 80072ea:	4eac      	ldr	r6, [pc, #688]	; (800759c <_dtoa_r+0x61c>)
 80072ec:	b957      	cbnz	r7, 8007304 <_dtoa_r+0x384>
 80072ee:	4642      	mov	r2, r8
 80072f0:	464b      	mov	r3, r9
 80072f2:	4650      	mov	r0, sl
 80072f4:	4659      	mov	r1, fp
 80072f6:	f7f9 faa9 	bl	800084c <__aeabi_ddiv>
 80072fa:	4682      	mov	sl, r0
 80072fc:	468b      	mov	fp, r1
 80072fe:	e028      	b.n	8007352 <_dtoa_r+0x3d2>
 8007300:	2502      	movs	r5, #2
 8007302:	e7f2      	b.n	80072ea <_dtoa_r+0x36a>
 8007304:	07f9      	lsls	r1, r7, #31
 8007306:	d508      	bpl.n	800731a <_dtoa_r+0x39a>
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	3501      	adds	r5, #1
 8007316:	4680      	mov	r8, r0
 8007318:	4689      	mov	r9, r1
 800731a:	107f      	asrs	r7, r7, #1
 800731c:	3608      	adds	r6, #8
 800731e:	e7e5      	b.n	80072ec <_dtoa_r+0x36c>
 8007320:	f000 809b 	beq.w	800745a <_dtoa_r+0x4da>
 8007324:	9b00      	ldr	r3, [sp, #0]
 8007326:	4f9d      	ldr	r7, [pc, #628]	; (800759c <_dtoa_r+0x61c>)
 8007328:	425e      	negs	r6, r3
 800732a:	4b9b      	ldr	r3, [pc, #620]	; (8007598 <_dtoa_r+0x618>)
 800732c:	f006 020f 	and.w	r2, r6, #15
 8007330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	ec51 0b19 	vmov	r0, r1, d9
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	1136      	asrs	r6, r6, #4
 8007342:	4682      	mov	sl, r0
 8007344:	468b      	mov	fp, r1
 8007346:	2300      	movs	r3, #0
 8007348:	2502      	movs	r5, #2
 800734a:	2e00      	cmp	r6, #0
 800734c:	d17a      	bne.n	8007444 <_dtoa_r+0x4c4>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1d3      	bne.n	80072fa <_dtoa_r+0x37a>
 8007352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8082 	beq.w	800745e <_dtoa_r+0x4de>
 800735a:	4b91      	ldr	r3, [pc, #580]	; (80075a0 <_dtoa_r+0x620>)
 800735c:	2200      	movs	r2, #0
 800735e:	4650      	mov	r0, sl
 8007360:	4659      	mov	r1, fp
 8007362:	f7f9 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8007366:	2800      	cmp	r0, #0
 8007368:	d079      	beq.n	800745e <_dtoa_r+0x4de>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d076      	beq.n	800745e <_dtoa_r+0x4de>
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	dd36      	ble.n	80073e4 <_dtoa_r+0x464>
 8007376:	9b00      	ldr	r3, [sp, #0]
 8007378:	4650      	mov	r0, sl
 800737a:	4659      	mov	r1, fp
 800737c:	1e5f      	subs	r7, r3, #1
 800737e:	2200      	movs	r2, #0
 8007380:	4b88      	ldr	r3, [pc, #544]	; (80075a4 <_dtoa_r+0x624>)
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	9e02      	ldr	r6, [sp, #8]
 8007388:	4682      	mov	sl, r0
 800738a:	468b      	mov	fp, r1
 800738c:	3501      	adds	r5, #1
 800738e:	4628      	mov	r0, r5
 8007390:	f7f9 f8c8 	bl	8000524 <__aeabi_i2d>
 8007394:	4652      	mov	r2, sl
 8007396:	465b      	mov	r3, fp
 8007398:	f7f9 f92e 	bl	80005f8 <__aeabi_dmul>
 800739c:	4b82      	ldr	r3, [pc, #520]	; (80075a8 <_dtoa_r+0x628>)
 800739e:	2200      	movs	r2, #0
 80073a0:	f7f8 ff74 	bl	800028c <__adddf3>
 80073a4:	46d0      	mov	r8, sl
 80073a6:	46d9      	mov	r9, fp
 80073a8:	4682      	mov	sl, r0
 80073aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	d158      	bne.n	8007464 <_dtoa_r+0x4e4>
 80073b2:	4b7e      	ldr	r3, [pc, #504]	; (80075ac <_dtoa_r+0x62c>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	4640      	mov	r0, r8
 80073b8:	4649      	mov	r1, r9
 80073ba:	f7f8 ff65 	bl	8000288 <__aeabi_dsub>
 80073be:	4652      	mov	r2, sl
 80073c0:	465b      	mov	r3, fp
 80073c2:	4680      	mov	r8, r0
 80073c4:	4689      	mov	r9, r1
 80073c6:	f7f9 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f040 8295 	bne.w	80078fa <_dtoa_r+0x97a>
 80073d0:	4652      	mov	r2, sl
 80073d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073d6:	4640      	mov	r0, r8
 80073d8:	4649      	mov	r1, r9
 80073da:	f7f9 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	f040 8289 	bne.w	80078f6 <_dtoa_r+0x976>
 80073e4:	ec5b ab19 	vmov	sl, fp, d9
 80073e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f2c0 8148 	blt.w	8007680 <_dtoa_r+0x700>
 80073f0:	9a00      	ldr	r2, [sp, #0]
 80073f2:	2a0e      	cmp	r2, #14
 80073f4:	f300 8144 	bgt.w	8007680 <_dtoa_r+0x700>
 80073f8:	4b67      	ldr	r3, [pc, #412]	; (8007598 <_dtoa_r+0x618>)
 80073fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	f280 80d5 	bge.w	80075b4 <_dtoa_r+0x634>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f300 80d1 	bgt.w	80075b4 <_dtoa_r+0x634>
 8007412:	f040 826f 	bne.w	80078f4 <_dtoa_r+0x974>
 8007416:	4b65      	ldr	r3, [pc, #404]	; (80075ac <_dtoa_r+0x62c>)
 8007418:	2200      	movs	r2, #0
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	4652      	mov	r2, sl
 8007424:	465b      	mov	r3, fp
 8007426:	f7f9 fb6d 	bl	8000b04 <__aeabi_dcmpge>
 800742a:	9e03      	ldr	r6, [sp, #12]
 800742c:	4637      	mov	r7, r6
 800742e:	2800      	cmp	r0, #0
 8007430:	f040 8245 	bne.w	80078be <_dtoa_r+0x93e>
 8007434:	9d01      	ldr	r5, [sp, #4]
 8007436:	2331      	movs	r3, #49	; 0x31
 8007438:	f805 3b01 	strb.w	r3, [r5], #1
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	3301      	adds	r3, #1
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	e240      	b.n	80078c6 <_dtoa_r+0x946>
 8007444:	07f2      	lsls	r2, r6, #31
 8007446:	d505      	bpl.n	8007454 <_dtoa_r+0x4d4>
 8007448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744c:	f7f9 f8d4 	bl	80005f8 <__aeabi_dmul>
 8007450:	3501      	adds	r5, #1
 8007452:	2301      	movs	r3, #1
 8007454:	1076      	asrs	r6, r6, #1
 8007456:	3708      	adds	r7, #8
 8007458:	e777      	b.n	800734a <_dtoa_r+0x3ca>
 800745a:	2502      	movs	r5, #2
 800745c:	e779      	b.n	8007352 <_dtoa_r+0x3d2>
 800745e:	9f00      	ldr	r7, [sp, #0]
 8007460:	9e03      	ldr	r6, [sp, #12]
 8007462:	e794      	b.n	800738e <_dtoa_r+0x40e>
 8007464:	9901      	ldr	r1, [sp, #4]
 8007466:	4b4c      	ldr	r3, [pc, #304]	; (8007598 <_dtoa_r+0x618>)
 8007468:	4431      	add	r1, r6
 800746a:	910d      	str	r1, [sp, #52]	; 0x34
 800746c:	9908      	ldr	r1, [sp, #32]
 800746e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007476:	2900      	cmp	r1, #0
 8007478:	d043      	beq.n	8007502 <_dtoa_r+0x582>
 800747a:	494d      	ldr	r1, [pc, #308]	; (80075b0 <_dtoa_r+0x630>)
 800747c:	2000      	movs	r0, #0
 800747e:	f7f9 f9e5 	bl	800084c <__aeabi_ddiv>
 8007482:	4652      	mov	r2, sl
 8007484:	465b      	mov	r3, fp
 8007486:	f7f8 feff 	bl	8000288 <__aeabi_dsub>
 800748a:	9d01      	ldr	r5, [sp, #4]
 800748c:	4682      	mov	sl, r0
 800748e:	468b      	mov	fp, r1
 8007490:	4649      	mov	r1, r9
 8007492:	4640      	mov	r0, r8
 8007494:	f7f9 fb60 	bl	8000b58 <__aeabi_d2iz>
 8007498:	4606      	mov	r6, r0
 800749a:	f7f9 f843 	bl	8000524 <__aeabi_i2d>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f8 feef 	bl	8000288 <__aeabi_dsub>
 80074aa:	3630      	adds	r6, #48	; 0x30
 80074ac:	f805 6b01 	strb.w	r6, [r5], #1
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	f7f9 fb10 	bl	8000adc <__aeabi_dcmplt>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d163      	bne.n	8007588 <_dtoa_r+0x608>
 80074c0:	4642      	mov	r2, r8
 80074c2:	464b      	mov	r3, r9
 80074c4:	4936      	ldr	r1, [pc, #216]	; (80075a0 <_dtoa_r+0x620>)
 80074c6:	2000      	movs	r0, #0
 80074c8:	f7f8 fede 	bl	8000288 <__aeabi_dsub>
 80074cc:	4652      	mov	r2, sl
 80074ce:	465b      	mov	r3, fp
 80074d0:	f7f9 fb04 	bl	8000adc <__aeabi_dcmplt>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f040 80b5 	bne.w	8007644 <_dtoa_r+0x6c4>
 80074da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074dc:	429d      	cmp	r5, r3
 80074de:	d081      	beq.n	80073e4 <_dtoa_r+0x464>
 80074e0:	4b30      	ldr	r3, [pc, #192]	; (80075a4 <_dtoa_r+0x624>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	4650      	mov	r0, sl
 80074e6:	4659      	mov	r1, fp
 80074e8:	f7f9 f886 	bl	80005f8 <__aeabi_dmul>
 80074ec:	4b2d      	ldr	r3, [pc, #180]	; (80075a4 <_dtoa_r+0x624>)
 80074ee:	4682      	mov	sl, r0
 80074f0:	468b      	mov	fp, r1
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	2200      	movs	r2, #0
 80074f8:	f7f9 f87e 	bl	80005f8 <__aeabi_dmul>
 80074fc:	4680      	mov	r8, r0
 80074fe:	4689      	mov	r9, r1
 8007500:	e7c6      	b.n	8007490 <_dtoa_r+0x510>
 8007502:	4650      	mov	r0, sl
 8007504:	4659      	mov	r1, fp
 8007506:	f7f9 f877 	bl	80005f8 <__aeabi_dmul>
 800750a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750c:	9d01      	ldr	r5, [sp, #4]
 800750e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007510:	4682      	mov	sl, r0
 8007512:	468b      	mov	fp, r1
 8007514:	4649      	mov	r1, r9
 8007516:	4640      	mov	r0, r8
 8007518:	f7f9 fb1e 	bl	8000b58 <__aeabi_d2iz>
 800751c:	4606      	mov	r6, r0
 800751e:	f7f9 f801 	bl	8000524 <__aeabi_i2d>
 8007522:	3630      	adds	r6, #48	; 0x30
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f8 feac 	bl	8000288 <__aeabi_dsub>
 8007530:	f805 6b01 	strb.w	r6, [r5], #1
 8007534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007536:	429d      	cmp	r5, r3
 8007538:	4680      	mov	r8, r0
 800753a:	4689      	mov	r9, r1
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	d124      	bne.n	800758c <_dtoa_r+0x60c>
 8007542:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <_dtoa_r+0x630>)
 8007544:	4650      	mov	r0, sl
 8007546:	4659      	mov	r1, fp
 8007548:	f7f8 fea0 	bl	800028c <__adddf3>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4640      	mov	r0, r8
 8007552:	4649      	mov	r1, r9
 8007554:	f7f9 fae0 	bl	8000b18 <__aeabi_dcmpgt>
 8007558:	2800      	cmp	r0, #0
 800755a:	d173      	bne.n	8007644 <_dtoa_r+0x6c4>
 800755c:	4652      	mov	r2, sl
 800755e:	465b      	mov	r3, fp
 8007560:	4913      	ldr	r1, [pc, #76]	; (80075b0 <_dtoa_r+0x630>)
 8007562:	2000      	movs	r0, #0
 8007564:	f7f8 fe90 	bl	8000288 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4640      	mov	r0, r8
 800756e:	4649      	mov	r1, r9
 8007570:	f7f9 fab4 	bl	8000adc <__aeabi_dcmplt>
 8007574:	2800      	cmp	r0, #0
 8007576:	f43f af35 	beq.w	80073e4 <_dtoa_r+0x464>
 800757a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800757c:	1e6b      	subs	r3, r5, #1
 800757e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007584:	2b30      	cmp	r3, #48	; 0x30
 8007586:	d0f8      	beq.n	800757a <_dtoa_r+0x5fa>
 8007588:	9700      	str	r7, [sp, #0]
 800758a:	e049      	b.n	8007620 <_dtoa_r+0x6a0>
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <_dtoa_r+0x624>)
 800758e:	f7f9 f833 	bl	80005f8 <__aeabi_dmul>
 8007592:	4680      	mov	r8, r0
 8007594:	4689      	mov	r9, r1
 8007596:	e7bd      	b.n	8007514 <_dtoa_r+0x594>
 8007598:	08009888 	.word	0x08009888
 800759c:	08009860 	.word	0x08009860
 80075a0:	3ff00000 	.word	0x3ff00000
 80075a4:	40240000 	.word	0x40240000
 80075a8:	401c0000 	.word	0x401c0000
 80075ac:	40140000 	.word	0x40140000
 80075b0:	3fe00000 	.word	0x3fe00000
 80075b4:	9d01      	ldr	r5, [sp, #4]
 80075b6:	4656      	mov	r6, sl
 80075b8:	465f      	mov	r7, fp
 80075ba:	4642      	mov	r2, r8
 80075bc:	464b      	mov	r3, r9
 80075be:	4630      	mov	r0, r6
 80075c0:	4639      	mov	r1, r7
 80075c2:	f7f9 f943 	bl	800084c <__aeabi_ddiv>
 80075c6:	f7f9 fac7 	bl	8000b58 <__aeabi_d2iz>
 80075ca:	4682      	mov	sl, r0
 80075cc:	f7f8 ffaa 	bl	8000524 <__aeabi_i2d>
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	f7f9 f810 	bl	80005f8 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4630      	mov	r0, r6
 80075de:	4639      	mov	r1, r7
 80075e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80075e4:	f7f8 fe50 	bl	8000288 <__aeabi_dsub>
 80075e8:	f805 6b01 	strb.w	r6, [r5], #1
 80075ec:	9e01      	ldr	r6, [sp, #4]
 80075ee:	9f03      	ldr	r7, [sp, #12]
 80075f0:	1bae      	subs	r6, r5, r6
 80075f2:	42b7      	cmp	r7, r6
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	d135      	bne.n	8007666 <_dtoa_r+0x6e6>
 80075fa:	f7f8 fe47 	bl	800028c <__adddf3>
 80075fe:	4642      	mov	r2, r8
 8007600:	464b      	mov	r3, r9
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	f7f9 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800760a:	b9d0      	cbnz	r0, 8007642 <_dtoa_r+0x6c2>
 800760c:	4642      	mov	r2, r8
 800760e:	464b      	mov	r3, r9
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f9 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007618:	b110      	cbz	r0, 8007620 <_dtoa_r+0x6a0>
 800761a:	f01a 0f01 	tst.w	sl, #1
 800761e:	d110      	bne.n	8007642 <_dtoa_r+0x6c2>
 8007620:	4620      	mov	r0, r4
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	f000 fbed 	bl	8007e04 <_Bfree>
 800762a:	2300      	movs	r3, #0
 800762c:	9800      	ldr	r0, [sp, #0]
 800762e:	702b      	strb	r3, [r5, #0]
 8007630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007632:	3001      	adds	r0, #1
 8007634:	6018      	str	r0, [r3, #0]
 8007636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007638:	2b00      	cmp	r3, #0
 800763a:	f43f acf1 	beq.w	8007020 <_dtoa_r+0xa0>
 800763e:	601d      	str	r5, [r3, #0]
 8007640:	e4ee      	b.n	8007020 <_dtoa_r+0xa0>
 8007642:	9f00      	ldr	r7, [sp, #0]
 8007644:	462b      	mov	r3, r5
 8007646:	461d      	mov	r5, r3
 8007648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800764c:	2a39      	cmp	r2, #57	; 0x39
 800764e:	d106      	bne.n	800765e <_dtoa_r+0x6de>
 8007650:	9a01      	ldr	r2, [sp, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d1f7      	bne.n	8007646 <_dtoa_r+0x6c6>
 8007656:	9901      	ldr	r1, [sp, #4]
 8007658:	2230      	movs	r2, #48	; 0x30
 800765a:	3701      	adds	r7, #1
 800765c:	700a      	strb	r2, [r1, #0]
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	3201      	adds	r2, #1
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	e790      	b.n	8007588 <_dtoa_r+0x608>
 8007666:	4ba6      	ldr	r3, [pc, #664]	; (8007900 <_dtoa_r+0x980>)
 8007668:	2200      	movs	r2, #0
 800766a:	f7f8 ffc5 	bl	80005f8 <__aeabi_dmul>
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	4606      	mov	r6, r0
 8007674:	460f      	mov	r7, r1
 8007676:	f7f9 fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800767a:	2800      	cmp	r0, #0
 800767c:	d09d      	beq.n	80075ba <_dtoa_r+0x63a>
 800767e:	e7cf      	b.n	8007620 <_dtoa_r+0x6a0>
 8007680:	9a08      	ldr	r2, [sp, #32]
 8007682:	2a00      	cmp	r2, #0
 8007684:	f000 80d7 	beq.w	8007836 <_dtoa_r+0x8b6>
 8007688:	9a06      	ldr	r2, [sp, #24]
 800768a:	2a01      	cmp	r2, #1
 800768c:	f300 80ba 	bgt.w	8007804 <_dtoa_r+0x884>
 8007690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007692:	2a00      	cmp	r2, #0
 8007694:	f000 80b2 	beq.w	80077fc <_dtoa_r+0x87c>
 8007698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800769c:	9e07      	ldr	r6, [sp, #28]
 800769e:	9d04      	ldr	r5, [sp, #16]
 80076a0:	9a04      	ldr	r2, [sp, #16]
 80076a2:	441a      	add	r2, r3
 80076a4:	9204      	str	r2, [sp, #16]
 80076a6:	9a05      	ldr	r2, [sp, #20]
 80076a8:	2101      	movs	r1, #1
 80076aa:	441a      	add	r2, r3
 80076ac:	4620      	mov	r0, r4
 80076ae:	9205      	str	r2, [sp, #20]
 80076b0:	f000 fc60 	bl	8007f74 <__i2b>
 80076b4:	4607      	mov	r7, r0
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	dd0c      	ble.n	80076d4 <_dtoa_r+0x754>
 80076ba:	9b05      	ldr	r3, [sp, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dd09      	ble.n	80076d4 <_dtoa_r+0x754>
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	9a04      	ldr	r2, [sp, #16]
 80076c4:	bfa8      	it	ge
 80076c6:	462b      	movge	r3, r5
 80076c8:	1ad2      	subs	r2, r2, r3
 80076ca:	9204      	str	r2, [sp, #16]
 80076cc:	9a05      	ldr	r2, [sp, #20]
 80076ce:	1aed      	subs	r5, r5, r3
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	b31b      	cbz	r3, 8007720 <_dtoa_r+0x7a0>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80af 	beq.w	800783e <_dtoa_r+0x8be>
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	dd13      	ble.n	800770c <_dtoa_r+0x78c>
 80076e4:	4639      	mov	r1, r7
 80076e6:	4632      	mov	r2, r6
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fd03 	bl	80080f4 <__pow5mult>
 80076ee:	ee18 2a10 	vmov	r2, s16
 80076f2:	4601      	mov	r1, r0
 80076f4:	4607      	mov	r7, r0
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fc52 	bl	8007fa0 <__multiply>
 80076fc:	ee18 1a10 	vmov	r1, s16
 8007700:	4680      	mov	r8, r0
 8007702:	4620      	mov	r0, r4
 8007704:	f000 fb7e 	bl	8007e04 <_Bfree>
 8007708:	ee08 8a10 	vmov	s16, r8
 800770c:	9b07      	ldr	r3, [sp, #28]
 800770e:	1b9a      	subs	r2, r3, r6
 8007710:	d006      	beq.n	8007720 <_dtoa_r+0x7a0>
 8007712:	ee18 1a10 	vmov	r1, s16
 8007716:	4620      	mov	r0, r4
 8007718:	f000 fcec 	bl	80080f4 <__pow5mult>
 800771c:	ee08 0a10 	vmov	s16, r0
 8007720:	2101      	movs	r1, #1
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fc26 	bl	8007f74 <__i2b>
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	2b00      	cmp	r3, #0
 800772c:	4606      	mov	r6, r0
 800772e:	f340 8088 	ble.w	8007842 <_dtoa_r+0x8c2>
 8007732:	461a      	mov	r2, r3
 8007734:	4601      	mov	r1, r0
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fcdc 	bl	80080f4 <__pow5mult>
 800773c:	9b06      	ldr	r3, [sp, #24]
 800773e:	2b01      	cmp	r3, #1
 8007740:	4606      	mov	r6, r0
 8007742:	f340 8081 	ble.w	8007848 <_dtoa_r+0x8c8>
 8007746:	f04f 0800 	mov.w	r8, #0
 800774a:	6933      	ldr	r3, [r6, #16]
 800774c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007750:	6918      	ldr	r0, [r3, #16]
 8007752:	f000 fbbf 	bl	8007ed4 <__hi0bits>
 8007756:	f1c0 0020 	rsb	r0, r0, #32
 800775a:	9b05      	ldr	r3, [sp, #20]
 800775c:	4418      	add	r0, r3
 800775e:	f010 001f 	ands.w	r0, r0, #31
 8007762:	f000 8092 	beq.w	800788a <_dtoa_r+0x90a>
 8007766:	f1c0 0320 	rsb	r3, r0, #32
 800776a:	2b04      	cmp	r3, #4
 800776c:	f340 808a 	ble.w	8007884 <_dtoa_r+0x904>
 8007770:	f1c0 001c 	rsb	r0, r0, #28
 8007774:	9b04      	ldr	r3, [sp, #16]
 8007776:	4403      	add	r3, r0
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	4403      	add	r3, r0
 800777e:	4405      	add	r5, r0
 8007780:	9305      	str	r3, [sp, #20]
 8007782:	9b04      	ldr	r3, [sp, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd07      	ble.n	8007798 <_dtoa_r+0x818>
 8007788:	ee18 1a10 	vmov	r1, s16
 800778c:	461a      	mov	r2, r3
 800778e:	4620      	mov	r0, r4
 8007790:	f000 fd0a 	bl	80081a8 <__lshift>
 8007794:	ee08 0a10 	vmov	s16, r0
 8007798:	9b05      	ldr	r3, [sp, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd05      	ble.n	80077aa <_dtoa_r+0x82a>
 800779e:	4631      	mov	r1, r6
 80077a0:	461a      	mov	r2, r3
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fd00 	bl	80081a8 <__lshift>
 80077a8:	4606      	mov	r6, r0
 80077aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d06e      	beq.n	800788e <_dtoa_r+0x90e>
 80077b0:	ee18 0a10 	vmov	r0, s16
 80077b4:	4631      	mov	r1, r6
 80077b6:	f000 fd67 	bl	8008288 <__mcmp>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	da67      	bge.n	800788e <_dtoa_r+0x90e>
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	ee18 1a10 	vmov	r1, s16
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	220a      	movs	r2, #10
 80077ca:	2300      	movs	r3, #0
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fb3b 	bl	8007e48 <__multadd>
 80077d2:	9b08      	ldr	r3, [sp, #32]
 80077d4:	ee08 0a10 	vmov	s16, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 81b1 	beq.w	8007b40 <_dtoa_r+0xbc0>
 80077de:	2300      	movs	r3, #0
 80077e0:	4639      	mov	r1, r7
 80077e2:	220a      	movs	r2, #10
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fb2f 	bl	8007e48 <__multadd>
 80077ea:	9b02      	ldr	r3, [sp, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	4607      	mov	r7, r0
 80077f0:	f300 808e 	bgt.w	8007910 <_dtoa_r+0x990>
 80077f4:	9b06      	ldr	r3, [sp, #24]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	dc51      	bgt.n	800789e <_dtoa_r+0x91e>
 80077fa:	e089      	b.n	8007910 <_dtoa_r+0x990>
 80077fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007802:	e74b      	b.n	800769c <_dtoa_r+0x71c>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1e5e      	subs	r6, r3, #1
 8007808:	9b07      	ldr	r3, [sp, #28]
 800780a:	42b3      	cmp	r3, r6
 800780c:	bfbf      	itttt	lt
 800780e:	9b07      	ldrlt	r3, [sp, #28]
 8007810:	9607      	strlt	r6, [sp, #28]
 8007812:	1af2      	sublt	r2, r6, r3
 8007814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007816:	bfb6      	itet	lt
 8007818:	189b      	addlt	r3, r3, r2
 800781a:	1b9e      	subge	r6, r3, r6
 800781c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	bfb8      	it	lt
 8007822:	2600      	movlt	r6, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfb7      	itett	lt
 8007828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800782c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007830:	1a9d      	sublt	r5, r3, r2
 8007832:	2300      	movlt	r3, #0
 8007834:	e734      	b.n	80076a0 <_dtoa_r+0x720>
 8007836:	9e07      	ldr	r6, [sp, #28]
 8007838:	9d04      	ldr	r5, [sp, #16]
 800783a:	9f08      	ldr	r7, [sp, #32]
 800783c:	e73b      	b.n	80076b6 <_dtoa_r+0x736>
 800783e:	9a07      	ldr	r2, [sp, #28]
 8007840:	e767      	b.n	8007712 <_dtoa_r+0x792>
 8007842:	9b06      	ldr	r3, [sp, #24]
 8007844:	2b01      	cmp	r3, #1
 8007846:	dc18      	bgt.n	800787a <_dtoa_r+0x8fa>
 8007848:	f1ba 0f00 	cmp.w	sl, #0
 800784c:	d115      	bne.n	800787a <_dtoa_r+0x8fa>
 800784e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007852:	b993      	cbnz	r3, 800787a <_dtoa_r+0x8fa>
 8007854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007858:	0d1b      	lsrs	r3, r3, #20
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	b183      	cbz	r3, 8007880 <_dtoa_r+0x900>
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	3301      	adds	r3, #1
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	9b05      	ldr	r3, [sp, #20]
 8007866:	3301      	adds	r3, #1
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	f04f 0801 	mov.w	r8, #1
 800786e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	f47f af6a 	bne.w	800774a <_dtoa_r+0x7ca>
 8007876:	2001      	movs	r0, #1
 8007878:	e76f      	b.n	800775a <_dtoa_r+0x7da>
 800787a:	f04f 0800 	mov.w	r8, #0
 800787e:	e7f6      	b.n	800786e <_dtoa_r+0x8ee>
 8007880:	4698      	mov	r8, r3
 8007882:	e7f4      	b.n	800786e <_dtoa_r+0x8ee>
 8007884:	f43f af7d 	beq.w	8007782 <_dtoa_r+0x802>
 8007888:	4618      	mov	r0, r3
 800788a:	301c      	adds	r0, #28
 800788c:	e772      	b.n	8007774 <_dtoa_r+0x7f4>
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dc37      	bgt.n	8007904 <_dtoa_r+0x984>
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	2b02      	cmp	r3, #2
 8007898:	dd34      	ble.n	8007904 <_dtoa_r+0x984>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	9302      	str	r3, [sp, #8]
 800789e:	9b02      	ldr	r3, [sp, #8]
 80078a0:	b96b      	cbnz	r3, 80078be <_dtoa_r+0x93e>
 80078a2:	4631      	mov	r1, r6
 80078a4:	2205      	movs	r2, #5
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 face 	bl	8007e48 <__multadd>
 80078ac:	4601      	mov	r1, r0
 80078ae:	4606      	mov	r6, r0
 80078b0:	ee18 0a10 	vmov	r0, s16
 80078b4:	f000 fce8 	bl	8008288 <__mcmp>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f73f adbb 	bgt.w	8007434 <_dtoa_r+0x4b4>
 80078be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c0:	9d01      	ldr	r5, [sp, #4]
 80078c2:	43db      	mvns	r3, r3
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	4631      	mov	r1, r6
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fa99 	bl	8007e04 <_Bfree>
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	f43f aea4 	beq.w	8007620 <_dtoa_r+0x6a0>
 80078d8:	f1b8 0f00 	cmp.w	r8, #0
 80078dc:	d005      	beq.n	80078ea <_dtoa_r+0x96a>
 80078de:	45b8      	cmp	r8, r7
 80078e0:	d003      	beq.n	80078ea <_dtoa_r+0x96a>
 80078e2:	4641      	mov	r1, r8
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fa8d 	bl	8007e04 <_Bfree>
 80078ea:	4639      	mov	r1, r7
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fa89 	bl	8007e04 <_Bfree>
 80078f2:	e695      	b.n	8007620 <_dtoa_r+0x6a0>
 80078f4:	2600      	movs	r6, #0
 80078f6:	4637      	mov	r7, r6
 80078f8:	e7e1      	b.n	80078be <_dtoa_r+0x93e>
 80078fa:	9700      	str	r7, [sp, #0]
 80078fc:	4637      	mov	r7, r6
 80078fe:	e599      	b.n	8007434 <_dtoa_r+0x4b4>
 8007900:	40240000 	.word	0x40240000
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80ca 	beq.w	8007aa0 <_dtoa_r+0xb20>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	9302      	str	r3, [sp, #8]
 8007910:	2d00      	cmp	r5, #0
 8007912:	dd05      	ble.n	8007920 <_dtoa_r+0x9a0>
 8007914:	4639      	mov	r1, r7
 8007916:	462a      	mov	r2, r5
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fc45 	bl	80081a8 <__lshift>
 800791e:	4607      	mov	r7, r0
 8007920:	f1b8 0f00 	cmp.w	r8, #0
 8007924:	d05b      	beq.n	80079de <_dtoa_r+0xa5e>
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fa2b 	bl	8007d84 <_Balloc>
 800792e:	4605      	mov	r5, r0
 8007930:	b928      	cbnz	r0, 800793e <_dtoa_r+0x9be>
 8007932:	4b87      	ldr	r3, [pc, #540]	; (8007b50 <_dtoa_r+0xbd0>)
 8007934:	4602      	mov	r2, r0
 8007936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800793a:	f7ff bb3b 	b.w	8006fb4 <_dtoa_r+0x34>
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	3202      	adds	r2, #2
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	f107 010c 	add.w	r1, r7, #12
 8007948:	300c      	adds	r0, #12
 800794a:	f000 fa0d 	bl	8007d68 <memcpy>
 800794e:	2201      	movs	r2, #1
 8007950:	4629      	mov	r1, r5
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fc28 	bl	80081a8 <__lshift>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	f103 0901 	add.w	r9, r3, #1
 800795e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007962:	4413      	add	r3, r2
 8007964:	9305      	str	r3, [sp, #20]
 8007966:	f00a 0301 	and.w	r3, sl, #1
 800796a:	46b8      	mov	r8, r7
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	4607      	mov	r7, r0
 8007970:	4631      	mov	r1, r6
 8007972:	ee18 0a10 	vmov	r0, s16
 8007976:	f7ff fa75 	bl	8006e64 <quorem>
 800797a:	4641      	mov	r1, r8
 800797c:	9002      	str	r0, [sp, #8]
 800797e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007982:	ee18 0a10 	vmov	r0, s16
 8007986:	f000 fc7f 	bl	8008288 <__mcmp>
 800798a:	463a      	mov	r2, r7
 800798c:	9003      	str	r0, [sp, #12]
 800798e:	4631      	mov	r1, r6
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fc95 	bl	80082c0 <__mdiff>
 8007996:	68c2      	ldr	r2, [r0, #12]
 8007998:	f109 3bff 	add.w	fp, r9, #4294967295
 800799c:	4605      	mov	r5, r0
 800799e:	bb02      	cbnz	r2, 80079e2 <_dtoa_r+0xa62>
 80079a0:	4601      	mov	r1, r0
 80079a2:	ee18 0a10 	vmov	r0, s16
 80079a6:	f000 fc6f 	bl	8008288 <__mcmp>
 80079aa:	4602      	mov	r2, r0
 80079ac:	4629      	mov	r1, r5
 80079ae:	4620      	mov	r0, r4
 80079b0:	9207      	str	r2, [sp, #28]
 80079b2:	f000 fa27 	bl	8007e04 <_Bfree>
 80079b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80079ba:	ea43 0102 	orr.w	r1, r3, r2
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	430b      	orrs	r3, r1
 80079c2:	464d      	mov	r5, r9
 80079c4:	d10f      	bne.n	80079e6 <_dtoa_r+0xa66>
 80079c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079ca:	d02a      	beq.n	8007a22 <_dtoa_r+0xaa2>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd02      	ble.n	80079d8 <_dtoa_r+0xa58>
 80079d2:	9b02      	ldr	r3, [sp, #8]
 80079d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80079d8:	f88b a000 	strb.w	sl, [fp]
 80079dc:	e775      	b.n	80078ca <_dtoa_r+0x94a>
 80079de:	4638      	mov	r0, r7
 80079e0:	e7ba      	b.n	8007958 <_dtoa_r+0x9d8>
 80079e2:	2201      	movs	r2, #1
 80079e4:	e7e2      	b.n	80079ac <_dtoa_r+0xa2c>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	db04      	blt.n	80079f6 <_dtoa_r+0xa76>
 80079ec:	9906      	ldr	r1, [sp, #24]
 80079ee:	430b      	orrs	r3, r1
 80079f0:	9904      	ldr	r1, [sp, #16]
 80079f2:	430b      	orrs	r3, r1
 80079f4:	d122      	bne.n	8007a3c <_dtoa_r+0xabc>
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	ddee      	ble.n	80079d8 <_dtoa_r+0xa58>
 80079fa:	ee18 1a10 	vmov	r1, s16
 80079fe:	2201      	movs	r2, #1
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fbd1 	bl	80081a8 <__lshift>
 8007a06:	4631      	mov	r1, r6
 8007a08:	ee08 0a10 	vmov	s16, r0
 8007a0c:	f000 fc3c 	bl	8008288 <__mcmp>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	dc03      	bgt.n	8007a1c <_dtoa_r+0xa9c>
 8007a14:	d1e0      	bne.n	80079d8 <_dtoa_r+0xa58>
 8007a16:	f01a 0f01 	tst.w	sl, #1
 8007a1a:	d0dd      	beq.n	80079d8 <_dtoa_r+0xa58>
 8007a1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a20:	d1d7      	bne.n	80079d2 <_dtoa_r+0xa52>
 8007a22:	2339      	movs	r3, #57	; 0x39
 8007a24:	f88b 3000 	strb.w	r3, [fp]
 8007a28:	462b      	mov	r3, r5
 8007a2a:	461d      	mov	r5, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a32:	2a39      	cmp	r2, #57	; 0x39
 8007a34:	d071      	beq.n	8007b1a <_dtoa_r+0xb9a>
 8007a36:	3201      	adds	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e746      	b.n	80078ca <_dtoa_r+0x94a>
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	dd07      	ble.n	8007a50 <_dtoa_r+0xad0>
 8007a40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a44:	d0ed      	beq.n	8007a22 <_dtoa_r+0xaa2>
 8007a46:	f10a 0301 	add.w	r3, sl, #1
 8007a4a:	f88b 3000 	strb.w	r3, [fp]
 8007a4e:	e73c      	b.n	80078ca <_dtoa_r+0x94a>
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007a56:	4599      	cmp	r9, r3
 8007a58:	d047      	beq.n	8007aea <_dtoa_r+0xb6a>
 8007a5a:	ee18 1a10 	vmov	r1, s16
 8007a5e:	2300      	movs	r3, #0
 8007a60:	220a      	movs	r2, #10
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f9f0 	bl	8007e48 <__multadd>
 8007a68:	45b8      	cmp	r8, r7
 8007a6a:	ee08 0a10 	vmov	s16, r0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	f04f 020a 	mov.w	r2, #10
 8007a76:	4641      	mov	r1, r8
 8007a78:	4620      	mov	r0, r4
 8007a7a:	d106      	bne.n	8007a8a <_dtoa_r+0xb0a>
 8007a7c:	f000 f9e4 	bl	8007e48 <__multadd>
 8007a80:	4680      	mov	r8, r0
 8007a82:	4607      	mov	r7, r0
 8007a84:	f109 0901 	add.w	r9, r9, #1
 8007a88:	e772      	b.n	8007970 <_dtoa_r+0x9f0>
 8007a8a:	f000 f9dd 	bl	8007e48 <__multadd>
 8007a8e:	4639      	mov	r1, r7
 8007a90:	4680      	mov	r8, r0
 8007a92:	2300      	movs	r3, #0
 8007a94:	220a      	movs	r2, #10
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f9d6 	bl	8007e48 <__multadd>
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	e7f1      	b.n	8007a84 <_dtoa_r+0xb04>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	9302      	str	r3, [sp, #8]
 8007aa4:	9d01      	ldr	r5, [sp, #4]
 8007aa6:	ee18 0a10 	vmov	r0, s16
 8007aaa:	4631      	mov	r1, r6
 8007aac:	f7ff f9da 	bl	8006e64 <quorem>
 8007ab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	f805 ab01 	strb.w	sl, [r5], #1
 8007aba:	1aea      	subs	r2, r5, r3
 8007abc:	9b02      	ldr	r3, [sp, #8]
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	dd09      	ble.n	8007ad6 <_dtoa_r+0xb56>
 8007ac2:	ee18 1a10 	vmov	r1, s16
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	220a      	movs	r2, #10
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 f9bc 	bl	8007e48 <__multadd>
 8007ad0:	ee08 0a10 	vmov	s16, r0
 8007ad4:	e7e7      	b.n	8007aa6 <_dtoa_r+0xb26>
 8007ad6:	9b02      	ldr	r3, [sp, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bfc8      	it	gt
 8007adc:	461d      	movgt	r5, r3
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	bfd8      	it	le
 8007ae2:	2501      	movle	r5, #1
 8007ae4:	441d      	add	r5, r3
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	ee18 1a10 	vmov	r1, s16
 8007aee:	2201      	movs	r2, #1
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fb59 	bl	80081a8 <__lshift>
 8007af6:	4631      	mov	r1, r6
 8007af8:	ee08 0a10 	vmov	s16, r0
 8007afc:	f000 fbc4 	bl	8008288 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dc91      	bgt.n	8007a28 <_dtoa_r+0xaa8>
 8007b04:	d102      	bne.n	8007b0c <_dtoa_r+0xb8c>
 8007b06:	f01a 0f01 	tst.w	sl, #1
 8007b0a:	d18d      	bne.n	8007a28 <_dtoa_r+0xaa8>
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	461d      	mov	r5, r3
 8007b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b14:	2a30      	cmp	r2, #48	; 0x30
 8007b16:	d0fa      	beq.n	8007b0e <_dtoa_r+0xb8e>
 8007b18:	e6d7      	b.n	80078ca <_dtoa_r+0x94a>
 8007b1a:	9a01      	ldr	r2, [sp, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d184      	bne.n	8007a2a <_dtoa_r+0xaaa>
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2331      	movs	r3, #49	; 0x31
 8007b28:	7013      	strb	r3, [r2, #0]
 8007b2a:	e6ce      	b.n	80078ca <_dtoa_r+0x94a>
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <_dtoa_r+0xbd4>)
 8007b2e:	f7ff ba95 	b.w	800705c <_dtoa_r+0xdc>
 8007b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f47f aa6e 	bne.w	8007016 <_dtoa_r+0x96>
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <_dtoa_r+0xbd8>)
 8007b3c:	f7ff ba8e 	b.w	800705c <_dtoa_r+0xdc>
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	dcae      	bgt.n	8007aa4 <_dtoa_r+0xb24>
 8007b46:	9b06      	ldr	r3, [sp, #24]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	f73f aea8 	bgt.w	800789e <_dtoa_r+0x91e>
 8007b4e:	e7a9      	b.n	8007aa4 <_dtoa_r+0xb24>
 8007b50:	0800978f 	.word	0x0800978f
 8007b54:	080096ec 	.word	0x080096ec
 8007b58:	08009710 	.word	0x08009710

08007b5c <std>:
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	4604      	mov	r4, r0
 8007b62:	e9c0 3300 	strd	r3, r3, [r0]
 8007b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6a:	6083      	str	r3, [r0, #8]
 8007b6c:	8181      	strh	r1, [r0, #12]
 8007b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b70:	81c2      	strh	r2, [r0, #14]
 8007b72:	6183      	str	r3, [r0, #24]
 8007b74:	4619      	mov	r1, r3
 8007b76:	2208      	movs	r2, #8
 8007b78:	305c      	adds	r0, #92	; 0x5c
 8007b7a:	f7fe fce9 	bl	8006550 <memset>
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x38>)
 8007b80:	6263      	str	r3, [r4, #36]	; 0x24
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x3c>)
 8007b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x40>)
 8007b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x44>)
 8007b8c:	6224      	str	r4, [r4, #32]
 8007b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	0800894d 	.word	0x0800894d
 8007b98:	0800896f 	.word	0x0800896f
 8007b9c:	080089a7 	.word	0x080089a7
 8007ba0:	080089cb 	.word	0x080089cb

08007ba4 <_cleanup_r>:
 8007ba4:	4901      	ldr	r1, [pc, #4]	; (8007bac <_cleanup_r+0x8>)
 8007ba6:	f000 b8af 	b.w	8007d08 <_fwalk_reent>
 8007baa:	bf00      	nop
 8007bac:	08008ce1 	.word	0x08008ce1

08007bb0 <__sfmoreglue>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	2268      	movs	r2, #104	; 0x68
 8007bb4:	1e4d      	subs	r5, r1, #1
 8007bb6:	4355      	muls	r5, r2
 8007bb8:	460e      	mov	r6, r1
 8007bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bbe:	f000 fce7 	bl	8008590 <_malloc_r>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	b140      	cbz	r0, 8007bd8 <__sfmoreglue+0x28>
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bcc:	300c      	adds	r0, #12
 8007bce:	60a0      	str	r0, [r4, #8]
 8007bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd4:	f7fe fcbc 	bl	8006550 <memset>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	bd70      	pop	{r4, r5, r6, pc}

08007bdc <__sfp_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sfp_lock_acquire+0x8>)
 8007bde:	f000 b8b8 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	2000041d 	.word	0x2000041d

08007be8 <__sfp_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sfp_lock_release+0x8>)
 8007bea:	f000 b8b3 	b.w	8007d54 <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	2000041d 	.word	0x2000041d

08007bf4 <__sinit_lock_acquire>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__sinit_lock_acquire+0x8>)
 8007bf6:	f000 b8ac 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	2000041e 	.word	0x2000041e

08007c00 <__sinit_lock_release>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__sinit_lock_release+0x8>)
 8007c02:	f000 b8a7 	b.w	8007d54 <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	2000041e 	.word	0x2000041e

08007c0c <__sinit>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	f7ff fff0 	bl	8007bf4 <__sinit_lock_acquire>
 8007c14:	69a3      	ldr	r3, [r4, #24]
 8007c16:	b11b      	cbz	r3, 8007c20 <__sinit+0x14>
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f7ff bff0 	b.w	8007c00 <__sinit_lock_release>
 8007c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c24:	6523      	str	r3, [r4, #80]	; 0x50
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <__sinit+0x68>)
 8007c28:	4a13      	ldr	r2, [pc, #76]	; (8007c78 <__sinit+0x6c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	bf04      	itt	eq
 8007c32:	2301      	moveq	r3, #1
 8007c34:	61a3      	streq	r3, [r4, #24]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 f820 	bl	8007c7c <__sfp>
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f81c 	bl	8007c7c <__sfp>
 8007c44:	60a0      	str	r0, [r4, #8]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 f818 	bl	8007c7c <__sfp>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	60e0      	str	r0, [r4, #12]
 8007c50:	2104      	movs	r1, #4
 8007c52:	6860      	ldr	r0, [r4, #4]
 8007c54:	f7ff ff82 	bl	8007b5c <std>
 8007c58:	68a0      	ldr	r0, [r4, #8]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2109      	movs	r1, #9
 8007c5e:	f7ff ff7d 	bl	8007b5c <std>
 8007c62:	68e0      	ldr	r0, [r4, #12]
 8007c64:	2202      	movs	r2, #2
 8007c66:	2112      	movs	r1, #18
 8007c68:	f7ff ff78 	bl	8007b5c <std>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	61a3      	str	r3, [r4, #24]
 8007c70:	e7d2      	b.n	8007c18 <__sinit+0xc>
 8007c72:	bf00      	nop
 8007c74:	080096d8 	.word	0x080096d8
 8007c78:	08007ba5 	.word	0x08007ba5

08007c7c <__sfp>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f7ff ffac 	bl	8007bdc <__sfp_lock_acquire>
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <__sfp+0x84>)
 8007c86:	681e      	ldr	r6, [r3, #0]
 8007c88:	69b3      	ldr	r3, [r6, #24]
 8007c8a:	b913      	cbnz	r3, 8007c92 <__sfp+0x16>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ffbd 	bl	8007c0c <__sinit>
 8007c92:	3648      	adds	r6, #72	; 0x48
 8007c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	d503      	bpl.n	8007ca4 <__sfp+0x28>
 8007c9c:	6833      	ldr	r3, [r6, #0]
 8007c9e:	b30b      	cbz	r3, 8007ce4 <__sfp+0x68>
 8007ca0:	6836      	ldr	r6, [r6, #0]
 8007ca2:	e7f7      	b.n	8007c94 <__sfp+0x18>
 8007ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ca8:	b9d5      	cbnz	r5, 8007ce0 <__sfp+0x64>
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <__sfp+0x88>)
 8007cac:	60e3      	str	r3, [r4, #12]
 8007cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb4:	f000 f84c 	bl	8007d50 <__retarget_lock_init_recursive>
 8007cb8:	f7ff ff96 	bl	8007be8 <__sfp_lock_release>
 8007cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cc4:	6025      	str	r5, [r4, #0]
 8007cc6:	61a5      	str	r5, [r4, #24]
 8007cc8:	2208      	movs	r2, #8
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd0:	f7fe fc3e 	bl	8006550 <memset>
 8007cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cdc:	4620      	mov	r0, r4
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce0:	3468      	adds	r4, #104	; 0x68
 8007ce2:	e7d9      	b.n	8007c98 <__sfp+0x1c>
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff62 	bl	8007bb0 <__sfmoreglue>
 8007cec:	4604      	mov	r4, r0
 8007cee:	6030      	str	r0, [r6, #0]
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d1d5      	bne.n	8007ca0 <__sfp+0x24>
 8007cf4:	f7ff ff78 	bl	8007be8 <__sfp_lock_release>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	e7ee      	b.n	8007cdc <__sfp+0x60>
 8007cfe:	bf00      	nop
 8007d00:	080096d8 	.word	0x080096d8
 8007d04:	ffff0001 	.word	0xffff0001

08007d08 <_fwalk_reent>:
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	4688      	mov	r8, r1
 8007d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d14:	2700      	movs	r7, #0
 8007d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d1e:	d505      	bpl.n	8007d2c <_fwalk_reent+0x24>
 8007d20:	6824      	ldr	r4, [r4, #0]
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d1f7      	bne.n	8007d16 <_fwalk_reent+0xe>
 8007d26:	4638      	mov	r0, r7
 8007d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2c:	89ab      	ldrh	r3, [r5, #12]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d907      	bls.n	8007d42 <_fwalk_reent+0x3a>
 8007d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d36:	3301      	adds	r3, #1
 8007d38:	d003      	beq.n	8007d42 <_fwalk_reent+0x3a>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	47c0      	blx	r8
 8007d40:	4307      	orrs	r7, r0
 8007d42:	3568      	adds	r5, #104	; 0x68
 8007d44:	e7e9      	b.n	8007d1a <_fwalk_reent+0x12>
	...

08007d48 <_localeconv_r>:
 8007d48:	4800      	ldr	r0, [pc, #0]	; (8007d4c <_localeconv_r+0x4>)
 8007d4a:	4770      	bx	lr
 8007d4c:	200001f8 	.word	0x200001f8

08007d50 <__retarget_lock_init_recursive>:
 8007d50:	4770      	bx	lr

08007d52 <__retarget_lock_acquire_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <__retarget_lock_release_recursive>:
 8007d54:	4770      	bx	lr
	...

08007d58 <malloc>:
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <malloc+0xc>)
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	f000 bc17 	b.w	8008590 <_malloc_r>
 8007d62:	bf00      	nop
 8007d64:	200000a4 	.word	0x200000a4

08007d68 <memcpy>:
 8007d68:	440a      	add	r2, r1
 8007d6a:	4291      	cmp	r1, r2
 8007d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d70:	d100      	bne.n	8007d74 <memcpy+0xc>
 8007d72:	4770      	bx	lr
 8007d74:	b510      	push	{r4, lr}
 8007d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	d1f9      	bne.n	8007d76 <memcpy+0xe>
 8007d82:	bd10      	pop	{r4, pc}

08007d84 <_Balloc>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d88:	4604      	mov	r4, r0
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	b976      	cbnz	r6, 8007dac <_Balloc+0x28>
 8007d8e:	2010      	movs	r0, #16
 8007d90:	f7ff ffe2 	bl	8007d58 <malloc>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6260      	str	r0, [r4, #36]	; 0x24
 8007d98:	b920      	cbnz	r0, 8007da4 <_Balloc+0x20>
 8007d9a:	4b18      	ldr	r3, [pc, #96]	; (8007dfc <_Balloc+0x78>)
 8007d9c:	4818      	ldr	r0, [pc, #96]	; (8007e00 <_Balloc+0x7c>)
 8007d9e:	2166      	movs	r1, #102	; 0x66
 8007da0:	f000 feea 	bl	8008b78 <__assert_func>
 8007da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007da8:	6006      	str	r6, [r0, #0]
 8007daa:	60c6      	str	r6, [r0, #12]
 8007dac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007dae:	68f3      	ldr	r3, [r6, #12]
 8007db0:	b183      	cbz	r3, 8007dd4 <_Balloc+0x50>
 8007db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dba:	b9b8      	cbnz	r0, 8007dec <_Balloc+0x68>
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8007dc2:	1d72      	adds	r2, r6, #5
 8007dc4:	0092      	lsls	r2, r2, #2
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 fb60 	bl	800848c <_calloc_r>
 8007dcc:	b160      	cbz	r0, 8007de8 <_Balloc+0x64>
 8007dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dd2:	e00e      	b.n	8007df2 <_Balloc+0x6e>
 8007dd4:	2221      	movs	r2, #33	; 0x21
 8007dd6:	2104      	movs	r1, #4
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 fb57 	bl	800848c <_calloc_r>
 8007dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de0:	60f0      	str	r0, [r6, #12]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e4      	bne.n	8007db2 <_Balloc+0x2e>
 8007de8:	2000      	movs	r0, #0
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	6802      	ldr	r2, [r0, #0]
 8007dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007df2:	2300      	movs	r3, #0
 8007df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007df8:	e7f7      	b.n	8007dea <_Balloc+0x66>
 8007dfa:	bf00      	nop
 8007dfc:	0800971d 	.word	0x0800971d
 8007e00:	08009800 	.word	0x08009800

08007e04 <_Bfree>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e08:	4605      	mov	r5, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	b976      	cbnz	r6, 8007e2c <_Bfree+0x28>
 8007e0e:	2010      	movs	r0, #16
 8007e10:	f7ff ffa2 	bl	8007d58 <malloc>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6268      	str	r0, [r5, #36]	; 0x24
 8007e18:	b920      	cbnz	r0, 8007e24 <_Bfree+0x20>
 8007e1a:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <_Bfree+0x3c>)
 8007e1c:	4809      	ldr	r0, [pc, #36]	; (8007e44 <_Bfree+0x40>)
 8007e1e:	218a      	movs	r1, #138	; 0x8a
 8007e20:	f000 feaa 	bl	8008b78 <__assert_func>
 8007e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e28:	6006      	str	r6, [r0, #0]
 8007e2a:	60c6      	str	r6, [r0, #12]
 8007e2c:	b13c      	cbz	r4, 8007e3e <_Bfree+0x3a>
 8007e2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e30:	6862      	ldr	r2, [r4, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e38:	6021      	str	r1, [r4, #0]
 8007e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	0800971d 	.word	0x0800971d
 8007e44:	08009800 	.word	0x08009800

08007e48 <__multadd>:
 8007e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4c:	690d      	ldr	r5, [r1, #16]
 8007e4e:	4607      	mov	r7, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	461e      	mov	r6, r3
 8007e54:	f101 0c14 	add.w	ip, r1, #20
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e5e:	b299      	uxth	r1, r3
 8007e60:	fb02 6101 	mla	r1, r2, r1, r6
 8007e64:	0c1e      	lsrs	r6, r3, #16
 8007e66:	0c0b      	lsrs	r3, r1, #16
 8007e68:	fb02 3306 	mla	r3, r2, r6, r3
 8007e6c:	b289      	uxth	r1, r1
 8007e6e:	3001      	adds	r0, #1
 8007e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e74:	4285      	cmp	r5, r0
 8007e76:	f84c 1b04 	str.w	r1, [ip], #4
 8007e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e7e:	dcec      	bgt.n	8007e5a <__multadd+0x12>
 8007e80:	b30e      	cbz	r6, 8007ec6 <__multadd+0x7e>
 8007e82:	68a3      	ldr	r3, [r4, #8]
 8007e84:	42ab      	cmp	r3, r5
 8007e86:	dc19      	bgt.n	8007ebc <__multadd+0x74>
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	3101      	adds	r1, #1
 8007e8e:	f7ff ff79 	bl	8007d84 <_Balloc>
 8007e92:	4680      	mov	r8, r0
 8007e94:	b928      	cbnz	r0, 8007ea2 <__multadd+0x5a>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <__multadd+0x84>)
 8007e9a:	480d      	ldr	r0, [pc, #52]	; (8007ed0 <__multadd+0x88>)
 8007e9c:	21b5      	movs	r1, #181	; 0xb5
 8007e9e:	f000 fe6b 	bl	8008b78 <__assert_func>
 8007ea2:	6922      	ldr	r2, [r4, #16]
 8007ea4:	3202      	adds	r2, #2
 8007ea6:	f104 010c 	add.w	r1, r4, #12
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	300c      	adds	r0, #12
 8007eae:	f7ff ff5b 	bl	8007d68 <memcpy>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff ffa5 	bl	8007e04 <_Bfree>
 8007eba:	4644      	mov	r4, r8
 8007ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ec0:	3501      	adds	r5, #1
 8007ec2:	615e      	str	r6, [r3, #20]
 8007ec4:	6125      	str	r5, [r4, #16]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ecc:	0800978f 	.word	0x0800978f
 8007ed0:	08009800 	.word	0x08009800

08007ed4 <__hi0bits>:
 8007ed4:	0c03      	lsrs	r3, r0, #16
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	b9d3      	cbnz	r3, 8007f10 <__hi0bits+0x3c>
 8007eda:	0400      	lsls	r0, r0, #16
 8007edc:	2310      	movs	r3, #16
 8007ede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ee2:	bf04      	itt	eq
 8007ee4:	0200      	lsleq	r0, r0, #8
 8007ee6:	3308      	addeq	r3, #8
 8007ee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007eec:	bf04      	itt	eq
 8007eee:	0100      	lsleq	r0, r0, #4
 8007ef0:	3304      	addeq	r3, #4
 8007ef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ef6:	bf04      	itt	eq
 8007ef8:	0080      	lsleq	r0, r0, #2
 8007efa:	3302      	addeq	r3, #2
 8007efc:	2800      	cmp	r0, #0
 8007efe:	db05      	blt.n	8007f0c <__hi0bits+0x38>
 8007f00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f04:	f103 0301 	add.w	r3, r3, #1
 8007f08:	bf08      	it	eq
 8007f0a:	2320      	moveq	r3, #32
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	4770      	bx	lr
 8007f10:	2300      	movs	r3, #0
 8007f12:	e7e4      	b.n	8007ede <__hi0bits+0xa>

08007f14 <__lo0bits>:
 8007f14:	6803      	ldr	r3, [r0, #0]
 8007f16:	f013 0207 	ands.w	r2, r3, #7
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	d00b      	beq.n	8007f36 <__lo0bits+0x22>
 8007f1e:	07da      	lsls	r2, r3, #31
 8007f20:	d423      	bmi.n	8007f6a <__lo0bits+0x56>
 8007f22:	0798      	lsls	r0, r3, #30
 8007f24:	bf49      	itett	mi
 8007f26:	085b      	lsrmi	r3, r3, #1
 8007f28:	089b      	lsrpl	r3, r3, #2
 8007f2a:	2001      	movmi	r0, #1
 8007f2c:	600b      	strmi	r3, [r1, #0]
 8007f2e:	bf5c      	itt	pl
 8007f30:	600b      	strpl	r3, [r1, #0]
 8007f32:	2002      	movpl	r0, #2
 8007f34:	4770      	bx	lr
 8007f36:	b298      	uxth	r0, r3
 8007f38:	b9a8      	cbnz	r0, 8007f66 <__lo0bits+0x52>
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	2010      	movs	r0, #16
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	b90a      	cbnz	r2, 8007f46 <__lo0bits+0x32>
 8007f42:	3008      	adds	r0, #8
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	071a      	lsls	r2, r3, #28
 8007f48:	bf04      	itt	eq
 8007f4a:	091b      	lsreq	r3, r3, #4
 8007f4c:	3004      	addeq	r0, #4
 8007f4e:	079a      	lsls	r2, r3, #30
 8007f50:	bf04      	itt	eq
 8007f52:	089b      	lsreq	r3, r3, #2
 8007f54:	3002      	addeq	r0, #2
 8007f56:	07da      	lsls	r2, r3, #31
 8007f58:	d403      	bmi.n	8007f62 <__lo0bits+0x4e>
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	f100 0001 	add.w	r0, r0, #1
 8007f60:	d005      	beq.n	8007f6e <__lo0bits+0x5a>
 8007f62:	600b      	str	r3, [r1, #0]
 8007f64:	4770      	bx	lr
 8007f66:	4610      	mov	r0, r2
 8007f68:	e7e9      	b.n	8007f3e <__lo0bits+0x2a>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	4770      	bx	lr
 8007f6e:	2020      	movs	r0, #32
 8007f70:	4770      	bx	lr
	...

08007f74 <__i2b>:
 8007f74:	b510      	push	{r4, lr}
 8007f76:	460c      	mov	r4, r1
 8007f78:	2101      	movs	r1, #1
 8007f7a:	f7ff ff03 	bl	8007d84 <_Balloc>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	b928      	cbnz	r0, 8007f8e <__i2b+0x1a>
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <__i2b+0x24>)
 8007f84:	4805      	ldr	r0, [pc, #20]	; (8007f9c <__i2b+0x28>)
 8007f86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f8a:	f000 fdf5 	bl	8008b78 <__assert_func>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	6144      	str	r4, [r0, #20]
 8007f92:	6103      	str	r3, [r0, #16]
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	bf00      	nop
 8007f98:	0800978f 	.word	0x0800978f
 8007f9c:	08009800 	.word	0x08009800

08007fa0 <__multiply>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	4691      	mov	r9, r2
 8007fa6:	690a      	ldr	r2, [r1, #16]
 8007fa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	bfb8      	it	lt
 8007fb0:	460b      	movlt	r3, r1
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	bfbc      	itt	lt
 8007fb6:	464c      	movlt	r4, r9
 8007fb8:	4699      	movlt	r9, r3
 8007fba:	6927      	ldr	r7, [r4, #16]
 8007fbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fc0:	68a3      	ldr	r3, [r4, #8]
 8007fc2:	6861      	ldr	r1, [r4, #4]
 8007fc4:	eb07 060a 	add.w	r6, r7, sl
 8007fc8:	42b3      	cmp	r3, r6
 8007fca:	b085      	sub	sp, #20
 8007fcc:	bfb8      	it	lt
 8007fce:	3101      	addlt	r1, #1
 8007fd0:	f7ff fed8 	bl	8007d84 <_Balloc>
 8007fd4:	b930      	cbnz	r0, 8007fe4 <__multiply+0x44>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b44      	ldr	r3, [pc, #272]	; (80080ec <__multiply+0x14c>)
 8007fda:	4845      	ldr	r0, [pc, #276]	; (80080f0 <__multiply+0x150>)
 8007fdc:	f240 115d 	movw	r1, #349	; 0x15d
 8007fe0:	f000 fdca 	bl	8008b78 <__assert_func>
 8007fe4:	f100 0514 	add.w	r5, r0, #20
 8007fe8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fec:	462b      	mov	r3, r5
 8007fee:	2200      	movs	r2, #0
 8007ff0:	4543      	cmp	r3, r8
 8007ff2:	d321      	bcc.n	8008038 <__multiply+0x98>
 8007ff4:	f104 0314 	add.w	r3, r4, #20
 8007ff8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ffc:	f109 0314 	add.w	r3, r9, #20
 8008000:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	1b3a      	subs	r2, r7, r4
 8008008:	3a15      	subs	r2, #21
 800800a:	f022 0203 	bic.w	r2, r2, #3
 800800e:	3204      	adds	r2, #4
 8008010:	f104 0115 	add.w	r1, r4, #21
 8008014:	428f      	cmp	r7, r1
 8008016:	bf38      	it	cc
 8008018:	2204      	movcc	r2, #4
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	9a02      	ldr	r2, [sp, #8]
 800801e:	9303      	str	r3, [sp, #12]
 8008020:	429a      	cmp	r2, r3
 8008022:	d80c      	bhi.n	800803e <__multiply+0x9e>
 8008024:	2e00      	cmp	r6, #0
 8008026:	dd03      	ble.n	8008030 <__multiply+0x90>
 8008028:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800802c:	2b00      	cmp	r3, #0
 800802e:	d05a      	beq.n	80080e6 <__multiply+0x146>
 8008030:	6106      	str	r6, [r0, #16]
 8008032:	b005      	add	sp, #20
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	f843 2b04 	str.w	r2, [r3], #4
 800803c:	e7d8      	b.n	8007ff0 <__multiply+0x50>
 800803e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008042:	f1ba 0f00 	cmp.w	sl, #0
 8008046:	d024      	beq.n	8008092 <__multiply+0xf2>
 8008048:	f104 0e14 	add.w	lr, r4, #20
 800804c:	46a9      	mov	r9, r5
 800804e:	f04f 0c00 	mov.w	ip, #0
 8008052:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008056:	f8d9 1000 	ldr.w	r1, [r9]
 800805a:	fa1f fb82 	uxth.w	fp, r2
 800805e:	b289      	uxth	r1, r1
 8008060:	fb0a 110b 	mla	r1, sl, fp, r1
 8008064:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008068:	f8d9 2000 	ldr.w	r2, [r9]
 800806c:	4461      	add	r1, ip
 800806e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008072:	fb0a c20b 	mla	r2, sl, fp, ip
 8008076:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800807a:	b289      	uxth	r1, r1
 800807c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008080:	4577      	cmp	r7, lr
 8008082:	f849 1b04 	str.w	r1, [r9], #4
 8008086:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800808a:	d8e2      	bhi.n	8008052 <__multiply+0xb2>
 800808c:	9a01      	ldr	r2, [sp, #4]
 800808e:	f845 c002 	str.w	ip, [r5, r2]
 8008092:	9a03      	ldr	r2, [sp, #12]
 8008094:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008098:	3304      	adds	r3, #4
 800809a:	f1b9 0f00 	cmp.w	r9, #0
 800809e:	d020      	beq.n	80080e2 <__multiply+0x142>
 80080a0:	6829      	ldr	r1, [r5, #0]
 80080a2:	f104 0c14 	add.w	ip, r4, #20
 80080a6:	46ae      	mov	lr, r5
 80080a8:	f04f 0a00 	mov.w	sl, #0
 80080ac:	f8bc b000 	ldrh.w	fp, [ip]
 80080b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080b4:	fb09 220b 	mla	r2, r9, fp, r2
 80080b8:	4492      	add	sl, r2
 80080ba:	b289      	uxth	r1, r1
 80080bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80080c0:	f84e 1b04 	str.w	r1, [lr], #4
 80080c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080c8:	f8be 1000 	ldrh.w	r1, [lr]
 80080cc:	0c12      	lsrs	r2, r2, #16
 80080ce:	fb09 1102 	mla	r1, r9, r2, r1
 80080d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80080d6:	4567      	cmp	r7, ip
 80080d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080dc:	d8e6      	bhi.n	80080ac <__multiply+0x10c>
 80080de:	9a01      	ldr	r2, [sp, #4]
 80080e0:	50a9      	str	r1, [r5, r2]
 80080e2:	3504      	adds	r5, #4
 80080e4:	e79a      	b.n	800801c <__multiply+0x7c>
 80080e6:	3e01      	subs	r6, #1
 80080e8:	e79c      	b.n	8008024 <__multiply+0x84>
 80080ea:	bf00      	nop
 80080ec:	0800978f 	.word	0x0800978f
 80080f0:	08009800 	.word	0x08009800

080080f4 <__pow5mult>:
 80080f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f8:	4615      	mov	r5, r2
 80080fa:	f012 0203 	ands.w	r2, r2, #3
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	d007      	beq.n	8008114 <__pow5mult+0x20>
 8008104:	4c25      	ldr	r4, [pc, #148]	; (800819c <__pow5mult+0xa8>)
 8008106:	3a01      	subs	r2, #1
 8008108:	2300      	movs	r3, #0
 800810a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800810e:	f7ff fe9b 	bl	8007e48 <__multadd>
 8008112:	4607      	mov	r7, r0
 8008114:	10ad      	asrs	r5, r5, #2
 8008116:	d03d      	beq.n	8008194 <__pow5mult+0xa0>
 8008118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800811a:	b97c      	cbnz	r4, 800813c <__pow5mult+0x48>
 800811c:	2010      	movs	r0, #16
 800811e:	f7ff fe1b 	bl	8007d58 <malloc>
 8008122:	4602      	mov	r2, r0
 8008124:	6270      	str	r0, [r6, #36]	; 0x24
 8008126:	b928      	cbnz	r0, 8008134 <__pow5mult+0x40>
 8008128:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <__pow5mult+0xac>)
 800812a:	481e      	ldr	r0, [pc, #120]	; (80081a4 <__pow5mult+0xb0>)
 800812c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008130:	f000 fd22 	bl	8008b78 <__assert_func>
 8008134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008138:	6004      	str	r4, [r0, #0]
 800813a:	60c4      	str	r4, [r0, #12]
 800813c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008144:	b94c      	cbnz	r4, 800815a <__pow5mult+0x66>
 8008146:	f240 2171 	movw	r1, #625	; 0x271
 800814a:	4630      	mov	r0, r6
 800814c:	f7ff ff12 	bl	8007f74 <__i2b>
 8008150:	2300      	movs	r3, #0
 8008152:	f8c8 0008 	str.w	r0, [r8, #8]
 8008156:	4604      	mov	r4, r0
 8008158:	6003      	str	r3, [r0, #0]
 800815a:	f04f 0900 	mov.w	r9, #0
 800815e:	07eb      	lsls	r3, r5, #31
 8008160:	d50a      	bpl.n	8008178 <__pow5mult+0x84>
 8008162:	4639      	mov	r1, r7
 8008164:	4622      	mov	r2, r4
 8008166:	4630      	mov	r0, r6
 8008168:	f7ff ff1a 	bl	8007fa0 <__multiply>
 800816c:	4639      	mov	r1, r7
 800816e:	4680      	mov	r8, r0
 8008170:	4630      	mov	r0, r6
 8008172:	f7ff fe47 	bl	8007e04 <_Bfree>
 8008176:	4647      	mov	r7, r8
 8008178:	106d      	asrs	r5, r5, #1
 800817a:	d00b      	beq.n	8008194 <__pow5mult+0xa0>
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	b938      	cbnz	r0, 8008190 <__pow5mult+0x9c>
 8008180:	4622      	mov	r2, r4
 8008182:	4621      	mov	r1, r4
 8008184:	4630      	mov	r0, r6
 8008186:	f7ff ff0b 	bl	8007fa0 <__multiply>
 800818a:	6020      	str	r0, [r4, #0]
 800818c:	f8c0 9000 	str.w	r9, [r0]
 8008190:	4604      	mov	r4, r0
 8008192:	e7e4      	b.n	800815e <__pow5mult+0x6a>
 8008194:	4638      	mov	r0, r7
 8008196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819a:	bf00      	nop
 800819c:	08009950 	.word	0x08009950
 80081a0:	0800971d 	.word	0x0800971d
 80081a4:	08009800 	.word	0x08009800

080081a8 <__lshift>:
 80081a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ac:	460c      	mov	r4, r1
 80081ae:	6849      	ldr	r1, [r1, #4]
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081b6:	68a3      	ldr	r3, [r4, #8]
 80081b8:	4607      	mov	r7, r0
 80081ba:	4691      	mov	r9, r2
 80081bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081c0:	f108 0601 	add.w	r6, r8, #1
 80081c4:	42b3      	cmp	r3, r6
 80081c6:	db0b      	blt.n	80081e0 <__lshift+0x38>
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff fddb 	bl	8007d84 <_Balloc>
 80081ce:	4605      	mov	r5, r0
 80081d0:	b948      	cbnz	r0, 80081e6 <__lshift+0x3e>
 80081d2:	4602      	mov	r2, r0
 80081d4:	4b2a      	ldr	r3, [pc, #168]	; (8008280 <__lshift+0xd8>)
 80081d6:	482b      	ldr	r0, [pc, #172]	; (8008284 <__lshift+0xdc>)
 80081d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80081dc:	f000 fccc 	bl	8008b78 <__assert_func>
 80081e0:	3101      	adds	r1, #1
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	e7ee      	b.n	80081c4 <__lshift+0x1c>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f100 0114 	add.w	r1, r0, #20
 80081ec:	f100 0210 	add.w	r2, r0, #16
 80081f0:	4618      	mov	r0, r3
 80081f2:	4553      	cmp	r3, sl
 80081f4:	db37      	blt.n	8008266 <__lshift+0xbe>
 80081f6:	6920      	ldr	r0, [r4, #16]
 80081f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081fc:	f104 0314 	add.w	r3, r4, #20
 8008200:	f019 091f 	ands.w	r9, r9, #31
 8008204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008208:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800820c:	d02f      	beq.n	800826e <__lshift+0xc6>
 800820e:	f1c9 0e20 	rsb	lr, r9, #32
 8008212:	468a      	mov	sl, r1
 8008214:	f04f 0c00 	mov.w	ip, #0
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	fa02 f209 	lsl.w	r2, r2, r9
 800821e:	ea42 020c 	orr.w	r2, r2, ip
 8008222:	f84a 2b04 	str.w	r2, [sl], #4
 8008226:	f853 2b04 	ldr.w	r2, [r3], #4
 800822a:	4298      	cmp	r0, r3
 800822c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008230:	d8f2      	bhi.n	8008218 <__lshift+0x70>
 8008232:	1b03      	subs	r3, r0, r4
 8008234:	3b15      	subs	r3, #21
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	3304      	adds	r3, #4
 800823c:	f104 0215 	add.w	r2, r4, #21
 8008240:	4290      	cmp	r0, r2
 8008242:	bf38      	it	cc
 8008244:	2304      	movcc	r3, #4
 8008246:	f841 c003 	str.w	ip, [r1, r3]
 800824a:	f1bc 0f00 	cmp.w	ip, #0
 800824e:	d001      	beq.n	8008254 <__lshift+0xac>
 8008250:	f108 0602 	add.w	r6, r8, #2
 8008254:	3e01      	subs	r6, #1
 8008256:	4638      	mov	r0, r7
 8008258:	612e      	str	r6, [r5, #16]
 800825a:	4621      	mov	r1, r4
 800825c:	f7ff fdd2 	bl	8007e04 <_Bfree>
 8008260:	4628      	mov	r0, r5
 8008262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008266:	f842 0f04 	str.w	r0, [r2, #4]!
 800826a:	3301      	adds	r3, #1
 800826c:	e7c1      	b.n	80081f2 <__lshift+0x4a>
 800826e:	3904      	subs	r1, #4
 8008270:	f853 2b04 	ldr.w	r2, [r3], #4
 8008274:	f841 2f04 	str.w	r2, [r1, #4]!
 8008278:	4298      	cmp	r0, r3
 800827a:	d8f9      	bhi.n	8008270 <__lshift+0xc8>
 800827c:	e7ea      	b.n	8008254 <__lshift+0xac>
 800827e:	bf00      	nop
 8008280:	0800978f 	.word	0x0800978f
 8008284:	08009800 	.word	0x08009800

08008288 <__mcmp>:
 8008288:	b530      	push	{r4, r5, lr}
 800828a:	6902      	ldr	r2, [r0, #16]
 800828c:	690c      	ldr	r4, [r1, #16]
 800828e:	1b12      	subs	r2, r2, r4
 8008290:	d10e      	bne.n	80082b0 <__mcmp+0x28>
 8008292:	f100 0314 	add.w	r3, r0, #20
 8008296:	3114      	adds	r1, #20
 8008298:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800829c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082a8:	42a5      	cmp	r5, r4
 80082aa:	d003      	beq.n	80082b4 <__mcmp+0x2c>
 80082ac:	d305      	bcc.n	80082ba <__mcmp+0x32>
 80082ae:	2201      	movs	r2, #1
 80082b0:	4610      	mov	r0, r2
 80082b2:	bd30      	pop	{r4, r5, pc}
 80082b4:	4283      	cmp	r3, r0
 80082b6:	d3f3      	bcc.n	80082a0 <__mcmp+0x18>
 80082b8:	e7fa      	b.n	80082b0 <__mcmp+0x28>
 80082ba:	f04f 32ff 	mov.w	r2, #4294967295
 80082be:	e7f7      	b.n	80082b0 <__mcmp+0x28>

080082c0 <__mdiff>:
 80082c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	460c      	mov	r4, r1
 80082c6:	4606      	mov	r6, r0
 80082c8:	4611      	mov	r1, r2
 80082ca:	4620      	mov	r0, r4
 80082cc:	4690      	mov	r8, r2
 80082ce:	f7ff ffdb 	bl	8008288 <__mcmp>
 80082d2:	1e05      	subs	r5, r0, #0
 80082d4:	d110      	bne.n	80082f8 <__mdiff+0x38>
 80082d6:	4629      	mov	r1, r5
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff fd53 	bl	8007d84 <_Balloc>
 80082de:	b930      	cbnz	r0, 80082ee <__mdiff+0x2e>
 80082e0:	4b3a      	ldr	r3, [pc, #232]	; (80083cc <__mdiff+0x10c>)
 80082e2:	4602      	mov	r2, r0
 80082e4:	f240 2132 	movw	r1, #562	; 0x232
 80082e8:	4839      	ldr	r0, [pc, #228]	; (80083d0 <__mdiff+0x110>)
 80082ea:	f000 fc45 	bl	8008b78 <__assert_func>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f8:	bfa4      	itt	ge
 80082fa:	4643      	movge	r3, r8
 80082fc:	46a0      	movge	r8, r4
 80082fe:	4630      	mov	r0, r6
 8008300:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008304:	bfa6      	itte	ge
 8008306:	461c      	movge	r4, r3
 8008308:	2500      	movge	r5, #0
 800830a:	2501      	movlt	r5, #1
 800830c:	f7ff fd3a 	bl	8007d84 <_Balloc>
 8008310:	b920      	cbnz	r0, 800831c <__mdiff+0x5c>
 8008312:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <__mdiff+0x10c>)
 8008314:	4602      	mov	r2, r0
 8008316:	f44f 7110 	mov.w	r1, #576	; 0x240
 800831a:	e7e5      	b.n	80082e8 <__mdiff+0x28>
 800831c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008320:	6926      	ldr	r6, [r4, #16]
 8008322:	60c5      	str	r5, [r0, #12]
 8008324:	f104 0914 	add.w	r9, r4, #20
 8008328:	f108 0514 	add.w	r5, r8, #20
 800832c:	f100 0e14 	add.w	lr, r0, #20
 8008330:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008334:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008338:	f108 0210 	add.w	r2, r8, #16
 800833c:	46f2      	mov	sl, lr
 800833e:	2100      	movs	r1, #0
 8008340:	f859 3b04 	ldr.w	r3, [r9], #4
 8008344:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008348:	fa1f f883 	uxth.w	r8, r3
 800834c:	fa11 f18b 	uxtah	r1, r1, fp
 8008350:	0c1b      	lsrs	r3, r3, #16
 8008352:	eba1 0808 	sub.w	r8, r1, r8
 8008356:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800835a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800835e:	fa1f f888 	uxth.w	r8, r8
 8008362:	1419      	asrs	r1, r3, #16
 8008364:	454e      	cmp	r6, r9
 8008366:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800836a:	f84a 3b04 	str.w	r3, [sl], #4
 800836e:	d8e7      	bhi.n	8008340 <__mdiff+0x80>
 8008370:	1b33      	subs	r3, r6, r4
 8008372:	3b15      	subs	r3, #21
 8008374:	f023 0303 	bic.w	r3, r3, #3
 8008378:	3304      	adds	r3, #4
 800837a:	3415      	adds	r4, #21
 800837c:	42a6      	cmp	r6, r4
 800837e:	bf38      	it	cc
 8008380:	2304      	movcc	r3, #4
 8008382:	441d      	add	r5, r3
 8008384:	4473      	add	r3, lr
 8008386:	469e      	mov	lr, r3
 8008388:	462e      	mov	r6, r5
 800838a:	4566      	cmp	r6, ip
 800838c:	d30e      	bcc.n	80083ac <__mdiff+0xec>
 800838e:	f10c 0203 	add.w	r2, ip, #3
 8008392:	1b52      	subs	r2, r2, r5
 8008394:	f022 0203 	bic.w	r2, r2, #3
 8008398:	3d03      	subs	r5, #3
 800839a:	45ac      	cmp	ip, r5
 800839c:	bf38      	it	cc
 800839e:	2200      	movcc	r2, #0
 80083a0:	441a      	add	r2, r3
 80083a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80083a6:	b17b      	cbz	r3, 80083c8 <__mdiff+0x108>
 80083a8:	6107      	str	r7, [r0, #16]
 80083aa:	e7a3      	b.n	80082f4 <__mdiff+0x34>
 80083ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80083b0:	fa11 f288 	uxtah	r2, r1, r8
 80083b4:	1414      	asrs	r4, r2, #16
 80083b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083ba:	b292      	uxth	r2, r2
 80083bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80083c0:	f84e 2b04 	str.w	r2, [lr], #4
 80083c4:	1421      	asrs	r1, r4, #16
 80083c6:	e7e0      	b.n	800838a <__mdiff+0xca>
 80083c8:	3f01      	subs	r7, #1
 80083ca:	e7ea      	b.n	80083a2 <__mdiff+0xe2>
 80083cc:	0800978f 	.word	0x0800978f
 80083d0:	08009800 	.word	0x08009800

080083d4 <__d2b>:
 80083d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	4689      	mov	r9, r1
 80083da:	2101      	movs	r1, #1
 80083dc:	ec57 6b10 	vmov	r6, r7, d0
 80083e0:	4690      	mov	r8, r2
 80083e2:	f7ff fccf 	bl	8007d84 <_Balloc>
 80083e6:	4604      	mov	r4, r0
 80083e8:	b930      	cbnz	r0, 80083f8 <__d2b+0x24>
 80083ea:	4602      	mov	r2, r0
 80083ec:	4b25      	ldr	r3, [pc, #148]	; (8008484 <__d2b+0xb0>)
 80083ee:	4826      	ldr	r0, [pc, #152]	; (8008488 <__d2b+0xb4>)
 80083f0:	f240 310a 	movw	r1, #778	; 0x30a
 80083f4:	f000 fbc0 	bl	8008b78 <__assert_func>
 80083f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008400:	bb35      	cbnz	r5, 8008450 <__d2b+0x7c>
 8008402:	2e00      	cmp	r6, #0
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	d028      	beq.n	800845a <__d2b+0x86>
 8008408:	4668      	mov	r0, sp
 800840a:	9600      	str	r6, [sp, #0]
 800840c:	f7ff fd82 	bl	8007f14 <__lo0bits>
 8008410:	9900      	ldr	r1, [sp, #0]
 8008412:	b300      	cbz	r0, 8008456 <__d2b+0x82>
 8008414:	9a01      	ldr	r2, [sp, #4]
 8008416:	f1c0 0320 	rsb	r3, r0, #32
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	430b      	orrs	r3, r1
 8008420:	40c2      	lsrs	r2, r0
 8008422:	6163      	str	r3, [r4, #20]
 8008424:	9201      	str	r2, [sp, #4]
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	61a3      	str	r3, [r4, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	bf14      	ite	ne
 800842e:	2202      	movne	r2, #2
 8008430:	2201      	moveq	r2, #1
 8008432:	6122      	str	r2, [r4, #16]
 8008434:	b1d5      	cbz	r5, 800846c <__d2b+0x98>
 8008436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800843a:	4405      	add	r5, r0
 800843c:	f8c9 5000 	str.w	r5, [r9]
 8008440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008444:	f8c8 0000 	str.w	r0, [r8]
 8008448:	4620      	mov	r0, r4
 800844a:	b003      	add	sp, #12
 800844c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008454:	e7d5      	b.n	8008402 <__d2b+0x2e>
 8008456:	6161      	str	r1, [r4, #20]
 8008458:	e7e5      	b.n	8008426 <__d2b+0x52>
 800845a:	a801      	add	r0, sp, #4
 800845c:	f7ff fd5a 	bl	8007f14 <__lo0bits>
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	6163      	str	r3, [r4, #20]
 8008464:	2201      	movs	r2, #1
 8008466:	6122      	str	r2, [r4, #16]
 8008468:	3020      	adds	r0, #32
 800846a:	e7e3      	b.n	8008434 <__d2b+0x60>
 800846c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008474:	f8c9 0000 	str.w	r0, [r9]
 8008478:	6918      	ldr	r0, [r3, #16]
 800847a:	f7ff fd2b 	bl	8007ed4 <__hi0bits>
 800847e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008482:	e7df      	b.n	8008444 <__d2b+0x70>
 8008484:	0800978f 	.word	0x0800978f
 8008488:	08009800 	.word	0x08009800

0800848c <_calloc_r>:
 800848c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848e:	fba1 2402 	umull	r2, r4, r1, r2
 8008492:	b94c      	cbnz	r4, 80084a8 <_calloc_r+0x1c>
 8008494:	4611      	mov	r1, r2
 8008496:	9201      	str	r2, [sp, #4]
 8008498:	f000 f87a 	bl	8008590 <_malloc_r>
 800849c:	9a01      	ldr	r2, [sp, #4]
 800849e:	4605      	mov	r5, r0
 80084a0:	b930      	cbnz	r0, 80084b0 <_calloc_r+0x24>
 80084a2:	4628      	mov	r0, r5
 80084a4:	b003      	add	sp, #12
 80084a6:	bd30      	pop	{r4, r5, pc}
 80084a8:	220c      	movs	r2, #12
 80084aa:	6002      	str	r2, [r0, #0]
 80084ac:	2500      	movs	r5, #0
 80084ae:	e7f8      	b.n	80084a2 <_calloc_r+0x16>
 80084b0:	4621      	mov	r1, r4
 80084b2:	f7fe f84d 	bl	8006550 <memset>
 80084b6:	e7f4      	b.n	80084a2 <_calloc_r+0x16>

080084b8 <_free_r>:
 80084b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ba:	2900      	cmp	r1, #0
 80084bc:	d044      	beq.n	8008548 <_free_r+0x90>
 80084be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c2:	9001      	str	r0, [sp, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f1a1 0404 	sub.w	r4, r1, #4
 80084ca:	bfb8      	it	lt
 80084cc:	18e4      	addlt	r4, r4, r3
 80084ce:	f000 fcdf 	bl	8008e90 <__malloc_lock>
 80084d2:	4a1e      	ldr	r2, [pc, #120]	; (800854c <_free_r+0x94>)
 80084d4:	9801      	ldr	r0, [sp, #4]
 80084d6:	6813      	ldr	r3, [r2, #0]
 80084d8:	b933      	cbnz	r3, 80084e8 <_free_r+0x30>
 80084da:	6063      	str	r3, [r4, #4]
 80084dc:	6014      	str	r4, [r2, #0]
 80084de:	b003      	add	sp, #12
 80084e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084e4:	f000 bcda 	b.w	8008e9c <__malloc_unlock>
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d908      	bls.n	80084fe <_free_r+0x46>
 80084ec:	6825      	ldr	r5, [r4, #0]
 80084ee:	1961      	adds	r1, r4, r5
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf01      	itttt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	1949      	addeq	r1, r1, r5
 80084fa:	6021      	streq	r1, [r4, #0]
 80084fc:	e7ed      	b.n	80084da <_free_r+0x22>
 80084fe:	461a      	mov	r2, r3
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	b10b      	cbz	r3, 8008508 <_free_r+0x50>
 8008504:	42a3      	cmp	r3, r4
 8008506:	d9fa      	bls.n	80084fe <_free_r+0x46>
 8008508:	6811      	ldr	r1, [r2, #0]
 800850a:	1855      	adds	r5, r2, r1
 800850c:	42a5      	cmp	r5, r4
 800850e:	d10b      	bne.n	8008528 <_free_r+0x70>
 8008510:	6824      	ldr	r4, [r4, #0]
 8008512:	4421      	add	r1, r4
 8008514:	1854      	adds	r4, r2, r1
 8008516:	42a3      	cmp	r3, r4
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	d1e0      	bne.n	80084de <_free_r+0x26>
 800851c:	681c      	ldr	r4, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	6053      	str	r3, [r2, #4]
 8008522:	4421      	add	r1, r4
 8008524:	6011      	str	r1, [r2, #0]
 8008526:	e7da      	b.n	80084de <_free_r+0x26>
 8008528:	d902      	bls.n	8008530 <_free_r+0x78>
 800852a:	230c      	movs	r3, #12
 800852c:	6003      	str	r3, [r0, #0]
 800852e:	e7d6      	b.n	80084de <_free_r+0x26>
 8008530:	6825      	ldr	r5, [r4, #0]
 8008532:	1961      	adds	r1, r4, r5
 8008534:	428b      	cmp	r3, r1
 8008536:	bf04      	itt	eq
 8008538:	6819      	ldreq	r1, [r3, #0]
 800853a:	685b      	ldreq	r3, [r3, #4]
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	bf04      	itt	eq
 8008540:	1949      	addeq	r1, r1, r5
 8008542:	6021      	streq	r1, [r4, #0]
 8008544:	6054      	str	r4, [r2, #4]
 8008546:	e7ca      	b.n	80084de <_free_r+0x26>
 8008548:	b003      	add	sp, #12
 800854a:	bd30      	pop	{r4, r5, pc}
 800854c:	20000420 	.word	0x20000420

08008550 <sbrk_aligned>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4e0e      	ldr	r6, [pc, #56]	; (800858c <sbrk_aligned+0x3c>)
 8008554:	460c      	mov	r4, r1
 8008556:	6831      	ldr	r1, [r6, #0]
 8008558:	4605      	mov	r5, r0
 800855a:	b911      	cbnz	r1, 8008562 <sbrk_aligned+0x12>
 800855c:	f000 f9e6 	bl	800892c <_sbrk_r>
 8008560:	6030      	str	r0, [r6, #0]
 8008562:	4621      	mov	r1, r4
 8008564:	4628      	mov	r0, r5
 8008566:	f000 f9e1 	bl	800892c <_sbrk_r>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d00a      	beq.n	8008584 <sbrk_aligned+0x34>
 800856e:	1cc4      	adds	r4, r0, #3
 8008570:	f024 0403 	bic.w	r4, r4, #3
 8008574:	42a0      	cmp	r0, r4
 8008576:	d007      	beq.n	8008588 <sbrk_aligned+0x38>
 8008578:	1a21      	subs	r1, r4, r0
 800857a:	4628      	mov	r0, r5
 800857c:	f000 f9d6 	bl	800892c <_sbrk_r>
 8008580:	3001      	adds	r0, #1
 8008582:	d101      	bne.n	8008588 <sbrk_aligned+0x38>
 8008584:	f04f 34ff 	mov.w	r4, #4294967295
 8008588:	4620      	mov	r0, r4
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	20000424 	.word	0x20000424

08008590 <_malloc_r>:
 8008590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008594:	1ccd      	adds	r5, r1, #3
 8008596:	f025 0503 	bic.w	r5, r5, #3
 800859a:	3508      	adds	r5, #8
 800859c:	2d0c      	cmp	r5, #12
 800859e:	bf38      	it	cc
 80085a0:	250c      	movcc	r5, #12
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	4607      	mov	r7, r0
 80085a6:	db01      	blt.n	80085ac <_malloc_r+0x1c>
 80085a8:	42a9      	cmp	r1, r5
 80085aa:	d905      	bls.n	80085b8 <_malloc_r+0x28>
 80085ac:	230c      	movs	r3, #12
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	2600      	movs	r6, #0
 80085b2:	4630      	mov	r0, r6
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	4e2e      	ldr	r6, [pc, #184]	; (8008674 <_malloc_r+0xe4>)
 80085ba:	f000 fc69 	bl	8008e90 <__malloc_lock>
 80085be:	6833      	ldr	r3, [r6, #0]
 80085c0:	461c      	mov	r4, r3
 80085c2:	bb34      	cbnz	r4, 8008612 <_malloc_r+0x82>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4638      	mov	r0, r7
 80085c8:	f7ff ffc2 	bl	8008550 <sbrk_aligned>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	4604      	mov	r4, r0
 80085d0:	d14d      	bne.n	800866e <_malloc_r+0xde>
 80085d2:	6834      	ldr	r4, [r6, #0]
 80085d4:	4626      	mov	r6, r4
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	d140      	bne.n	800865c <_malloc_r+0xcc>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	4631      	mov	r1, r6
 80085de:	4638      	mov	r0, r7
 80085e0:	eb04 0803 	add.w	r8, r4, r3
 80085e4:	f000 f9a2 	bl	800892c <_sbrk_r>
 80085e8:	4580      	cmp	r8, r0
 80085ea:	d13a      	bne.n	8008662 <_malloc_r+0xd2>
 80085ec:	6821      	ldr	r1, [r4, #0]
 80085ee:	3503      	adds	r5, #3
 80085f0:	1a6d      	subs	r5, r5, r1
 80085f2:	f025 0503 	bic.w	r5, r5, #3
 80085f6:	3508      	adds	r5, #8
 80085f8:	2d0c      	cmp	r5, #12
 80085fa:	bf38      	it	cc
 80085fc:	250c      	movcc	r5, #12
 80085fe:	4629      	mov	r1, r5
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ffa5 	bl	8008550 <sbrk_aligned>
 8008606:	3001      	adds	r0, #1
 8008608:	d02b      	beq.n	8008662 <_malloc_r+0xd2>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	442b      	add	r3, r5
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	e00e      	b.n	8008630 <_malloc_r+0xa0>
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	1b52      	subs	r2, r2, r5
 8008616:	d41e      	bmi.n	8008656 <_malloc_r+0xc6>
 8008618:	2a0b      	cmp	r2, #11
 800861a:	d916      	bls.n	800864a <_malloc_r+0xba>
 800861c:	1961      	adds	r1, r4, r5
 800861e:	42a3      	cmp	r3, r4
 8008620:	6025      	str	r5, [r4, #0]
 8008622:	bf18      	it	ne
 8008624:	6059      	strne	r1, [r3, #4]
 8008626:	6863      	ldr	r3, [r4, #4]
 8008628:	bf08      	it	eq
 800862a:	6031      	streq	r1, [r6, #0]
 800862c:	5162      	str	r2, [r4, r5]
 800862e:	604b      	str	r3, [r1, #4]
 8008630:	4638      	mov	r0, r7
 8008632:	f104 060b 	add.w	r6, r4, #11
 8008636:	f000 fc31 	bl	8008e9c <__malloc_unlock>
 800863a:	f026 0607 	bic.w	r6, r6, #7
 800863e:	1d23      	adds	r3, r4, #4
 8008640:	1af2      	subs	r2, r6, r3
 8008642:	d0b6      	beq.n	80085b2 <_malloc_r+0x22>
 8008644:	1b9b      	subs	r3, r3, r6
 8008646:	50a3      	str	r3, [r4, r2]
 8008648:	e7b3      	b.n	80085b2 <_malloc_r+0x22>
 800864a:	6862      	ldr	r2, [r4, #4]
 800864c:	42a3      	cmp	r3, r4
 800864e:	bf0c      	ite	eq
 8008650:	6032      	streq	r2, [r6, #0]
 8008652:	605a      	strne	r2, [r3, #4]
 8008654:	e7ec      	b.n	8008630 <_malloc_r+0xa0>
 8008656:	4623      	mov	r3, r4
 8008658:	6864      	ldr	r4, [r4, #4]
 800865a:	e7b2      	b.n	80085c2 <_malloc_r+0x32>
 800865c:	4634      	mov	r4, r6
 800865e:	6876      	ldr	r6, [r6, #4]
 8008660:	e7b9      	b.n	80085d6 <_malloc_r+0x46>
 8008662:	230c      	movs	r3, #12
 8008664:	603b      	str	r3, [r7, #0]
 8008666:	4638      	mov	r0, r7
 8008668:	f000 fc18 	bl	8008e9c <__malloc_unlock>
 800866c:	e7a1      	b.n	80085b2 <_malloc_r+0x22>
 800866e:	6025      	str	r5, [r4, #0]
 8008670:	e7de      	b.n	8008630 <_malloc_r+0xa0>
 8008672:	bf00      	nop
 8008674:	20000420 	.word	0x20000420

08008678 <__sfputc_r>:
 8008678:	6893      	ldr	r3, [r2, #8]
 800867a:	3b01      	subs	r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	b410      	push	{r4}
 8008680:	6093      	str	r3, [r2, #8]
 8008682:	da08      	bge.n	8008696 <__sfputc_r+0x1e>
 8008684:	6994      	ldr	r4, [r2, #24]
 8008686:	42a3      	cmp	r3, r4
 8008688:	db01      	blt.n	800868e <__sfputc_r+0x16>
 800868a:	290a      	cmp	r1, #10
 800868c:	d103      	bne.n	8008696 <__sfputc_r+0x1e>
 800868e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008692:	f000 b99f 	b.w	80089d4 <__swbuf_r>
 8008696:	6813      	ldr	r3, [r2, #0]
 8008698:	1c58      	adds	r0, r3, #1
 800869a:	6010      	str	r0, [r2, #0]
 800869c:	7019      	strb	r1, [r3, #0]
 800869e:	4608      	mov	r0, r1
 80086a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <__sfputs_r>:
 80086a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a8:	4606      	mov	r6, r0
 80086aa:	460f      	mov	r7, r1
 80086ac:	4614      	mov	r4, r2
 80086ae:	18d5      	adds	r5, r2, r3
 80086b0:	42ac      	cmp	r4, r5
 80086b2:	d101      	bne.n	80086b8 <__sfputs_r+0x12>
 80086b4:	2000      	movs	r0, #0
 80086b6:	e007      	b.n	80086c8 <__sfputs_r+0x22>
 80086b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086bc:	463a      	mov	r2, r7
 80086be:	4630      	mov	r0, r6
 80086c0:	f7ff ffda 	bl	8008678 <__sfputc_r>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d1f3      	bne.n	80086b0 <__sfputs_r+0xa>
 80086c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086cc <_vfiprintf_r>:
 80086cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d0:	460d      	mov	r5, r1
 80086d2:	b09d      	sub	sp, #116	; 0x74
 80086d4:	4614      	mov	r4, r2
 80086d6:	4698      	mov	r8, r3
 80086d8:	4606      	mov	r6, r0
 80086da:	b118      	cbz	r0, 80086e4 <_vfiprintf_r+0x18>
 80086dc:	6983      	ldr	r3, [r0, #24]
 80086de:	b90b      	cbnz	r3, 80086e4 <_vfiprintf_r+0x18>
 80086e0:	f7ff fa94 	bl	8007c0c <__sinit>
 80086e4:	4b89      	ldr	r3, [pc, #548]	; (800890c <_vfiprintf_r+0x240>)
 80086e6:	429d      	cmp	r5, r3
 80086e8:	d11b      	bne.n	8008722 <_vfiprintf_r+0x56>
 80086ea:	6875      	ldr	r5, [r6, #4]
 80086ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ee:	07d9      	lsls	r1, r3, #31
 80086f0:	d405      	bmi.n	80086fe <_vfiprintf_r+0x32>
 80086f2:	89ab      	ldrh	r3, [r5, #12]
 80086f4:	059a      	lsls	r2, r3, #22
 80086f6:	d402      	bmi.n	80086fe <_vfiprintf_r+0x32>
 80086f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086fa:	f7ff fb2a 	bl	8007d52 <__retarget_lock_acquire_recursive>
 80086fe:	89ab      	ldrh	r3, [r5, #12]
 8008700:	071b      	lsls	r3, r3, #28
 8008702:	d501      	bpl.n	8008708 <_vfiprintf_r+0x3c>
 8008704:	692b      	ldr	r3, [r5, #16]
 8008706:	b9eb      	cbnz	r3, 8008744 <_vfiprintf_r+0x78>
 8008708:	4629      	mov	r1, r5
 800870a:	4630      	mov	r0, r6
 800870c:	f000 f9c6 	bl	8008a9c <__swsetup_r>
 8008710:	b1c0      	cbz	r0, 8008744 <_vfiprintf_r+0x78>
 8008712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008714:	07dc      	lsls	r4, r3, #31
 8008716:	d50e      	bpl.n	8008736 <_vfiprintf_r+0x6a>
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	b01d      	add	sp, #116	; 0x74
 800871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008722:	4b7b      	ldr	r3, [pc, #492]	; (8008910 <_vfiprintf_r+0x244>)
 8008724:	429d      	cmp	r5, r3
 8008726:	d101      	bne.n	800872c <_vfiprintf_r+0x60>
 8008728:	68b5      	ldr	r5, [r6, #8]
 800872a:	e7df      	b.n	80086ec <_vfiprintf_r+0x20>
 800872c:	4b79      	ldr	r3, [pc, #484]	; (8008914 <_vfiprintf_r+0x248>)
 800872e:	429d      	cmp	r5, r3
 8008730:	bf08      	it	eq
 8008732:	68f5      	ldreq	r5, [r6, #12]
 8008734:	e7da      	b.n	80086ec <_vfiprintf_r+0x20>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	0598      	lsls	r0, r3, #22
 800873a:	d4ed      	bmi.n	8008718 <_vfiprintf_r+0x4c>
 800873c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800873e:	f7ff fb09 	bl	8007d54 <__retarget_lock_release_recursive>
 8008742:	e7e9      	b.n	8008718 <_vfiprintf_r+0x4c>
 8008744:	2300      	movs	r3, #0
 8008746:	9309      	str	r3, [sp, #36]	; 0x24
 8008748:	2320      	movs	r3, #32
 800874a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800874e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008752:	2330      	movs	r3, #48	; 0x30
 8008754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008918 <_vfiprintf_r+0x24c>
 8008758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800875c:	f04f 0901 	mov.w	r9, #1
 8008760:	4623      	mov	r3, r4
 8008762:	469a      	mov	sl, r3
 8008764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008768:	b10a      	cbz	r2, 800876e <_vfiprintf_r+0xa2>
 800876a:	2a25      	cmp	r2, #37	; 0x25
 800876c:	d1f9      	bne.n	8008762 <_vfiprintf_r+0x96>
 800876e:	ebba 0b04 	subs.w	fp, sl, r4
 8008772:	d00b      	beq.n	800878c <_vfiprintf_r+0xc0>
 8008774:	465b      	mov	r3, fp
 8008776:	4622      	mov	r2, r4
 8008778:	4629      	mov	r1, r5
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ff93 	bl	80086a6 <__sfputs_r>
 8008780:	3001      	adds	r0, #1
 8008782:	f000 80aa 	beq.w	80088da <_vfiprintf_r+0x20e>
 8008786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008788:	445a      	add	r2, fp
 800878a:	9209      	str	r2, [sp, #36]	; 0x24
 800878c:	f89a 3000 	ldrb.w	r3, [sl]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 80a2 	beq.w	80088da <_vfiprintf_r+0x20e>
 8008796:	2300      	movs	r3, #0
 8008798:	f04f 32ff 	mov.w	r2, #4294967295
 800879c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087a0:	f10a 0a01 	add.w	sl, sl, #1
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	9307      	str	r3, [sp, #28]
 80087a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087ac:	931a      	str	r3, [sp, #104]	; 0x68
 80087ae:	4654      	mov	r4, sl
 80087b0:	2205      	movs	r2, #5
 80087b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b6:	4858      	ldr	r0, [pc, #352]	; (8008918 <_vfiprintf_r+0x24c>)
 80087b8:	f7f7 fd12 	bl	80001e0 <memchr>
 80087bc:	9a04      	ldr	r2, [sp, #16]
 80087be:	b9d8      	cbnz	r0, 80087f8 <_vfiprintf_r+0x12c>
 80087c0:	06d1      	lsls	r1, r2, #27
 80087c2:	bf44      	itt	mi
 80087c4:	2320      	movmi	r3, #32
 80087c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ca:	0713      	lsls	r3, r2, #28
 80087cc:	bf44      	itt	mi
 80087ce:	232b      	movmi	r3, #43	; 0x2b
 80087d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087d4:	f89a 3000 	ldrb.w	r3, [sl]
 80087d8:	2b2a      	cmp	r3, #42	; 0x2a
 80087da:	d015      	beq.n	8008808 <_vfiprintf_r+0x13c>
 80087dc:	9a07      	ldr	r2, [sp, #28]
 80087de:	4654      	mov	r4, sl
 80087e0:	2000      	movs	r0, #0
 80087e2:	f04f 0c0a 	mov.w	ip, #10
 80087e6:	4621      	mov	r1, r4
 80087e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ec:	3b30      	subs	r3, #48	; 0x30
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	d94e      	bls.n	8008890 <_vfiprintf_r+0x1c4>
 80087f2:	b1b0      	cbz	r0, 8008822 <_vfiprintf_r+0x156>
 80087f4:	9207      	str	r2, [sp, #28]
 80087f6:	e014      	b.n	8008822 <_vfiprintf_r+0x156>
 80087f8:	eba0 0308 	sub.w	r3, r0, r8
 80087fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008800:	4313      	orrs	r3, r2
 8008802:	9304      	str	r3, [sp, #16]
 8008804:	46a2      	mov	sl, r4
 8008806:	e7d2      	b.n	80087ae <_vfiprintf_r+0xe2>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	1d19      	adds	r1, r3, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	9103      	str	r1, [sp, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfbb      	ittet	lt
 8008814:	425b      	neglt	r3, r3
 8008816:	f042 0202 	orrlt.w	r2, r2, #2
 800881a:	9307      	strge	r3, [sp, #28]
 800881c:	9307      	strlt	r3, [sp, #28]
 800881e:	bfb8      	it	lt
 8008820:	9204      	strlt	r2, [sp, #16]
 8008822:	7823      	ldrb	r3, [r4, #0]
 8008824:	2b2e      	cmp	r3, #46	; 0x2e
 8008826:	d10c      	bne.n	8008842 <_vfiprintf_r+0x176>
 8008828:	7863      	ldrb	r3, [r4, #1]
 800882a:	2b2a      	cmp	r3, #42	; 0x2a
 800882c:	d135      	bne.n	800889a <_vfiprintf_r+0x1ce>
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	9203      	str	r2, [sp, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	bfb8      	it	lt
 800883a:	f04f 33ff 	movlt.w	r3, #4294967295
 800883e:	3402      	adds	r4, #2
 8008840:	9305      	str	r3, [sp, #20]
 8008842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008928 <_vfiprintf_r+0x25c>
 8008846:	7821      	ldrb	r1, [r4, #0]
 8008848:	2203      	movs	r2, #3
 800884a:	4650      	mov	r0, sl
 800884c:	f7f7 fcc8 	bl	80001e0 <memchr>
 8008850:	b140      	cbz	r0, 8008864 <_vfiprintf_r+0x198>
 8008852:	2340      	movs	r3, #64	; 0x40
 8008854:	eba0 000a 	sub.w	r0, r0, sl
 8008858:	fa03 f000 	lsl.w	r0, r3, r0
 800885c:	9b04      	ldr	r3, [sp, #16]
 800885e:	4303      	orrs	r3, r0
 8008860:	3401      	adds	r4, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008868:	482c      	ldr	r0, [pc, #176]	; (800891c <_vfiprintf_r+0x250>)
 800886a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800886e:	2206      	movs	r2, #6
 8008870:	f7f7 fcb6 	bl	80001e0 <memchr>
 8008874:	2800      	cmp	r0, #0
 8008876:	d03f      	beq.n	80088f8 <_vfiprintf_r+0x22c>
 8008878:	4b29      	ldr	r3, [pc, #164]	; (8008920 <_vfiprintf_r+0x254>)
 800887a:	bb1b      	cbnz	r3, 80088c4 <_vfiprintf_r+0x1f8>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	3307      	adds	r3, #7
 8008880:	f023 0307 	bic.w	r3, r3, #7
 8008884:	3308      	adds	r3, #8
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888a:	443b      	add	r3, r7
 800888c:	9309      	str	r3, [sp, #36]	; 0x24
 800888e:	e767      	b.n	8008760 <_vfiprintf_r+0x94>
 8008890:	fb0c 3202 	mla	r2, ip, r2, r3
 8008894:	460c      	mov	r4, r1
 8008896:	2001      	movs	r0, #1
 8008898:	e7a5      	b.n	80087e6 <_vfiprintf_r+0x11a>
 800889a:	2300      	movs	r3, #0
 800889c:	3401      	adds	r4, #1
 800889e:	9305      	str	r3, [sp, #20]
 80088a0:	4619      	mov	r1, r3
 80088a2:	f04f 0c0a 	mov.w	ip, #10
 80088a6:	4620      	mov	r0, r4
 80088a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ac:	3a30      	subs	r2, #48	; 0x30
 80088ae:	2a09      	cmp	r2, #9
 80088b0:	d903      	bls.n	80088ba <_vfiprintf_r+0x1ee>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0c5      	beq.n	8008842 <_vfiprintf_r+0x176>
 80088b6:	9105      	str	r1, [sp, #20]
 80088b8:	e7c3      	b.n	8008842 <_vfiprintf_r+0x176>
 80088ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80088be:	4604      	mov	r4, r0
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7f0      	b.n	80088a6 <_vfiprintf_r+0x1da>
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	462a      	mov	r2, r5
 80088ca:	4b16      	ldr	r3, [pc, #88]	; (8008924 <_vfiprintf_r+0x258>)
 80088cc:	a904      	add	r1, sp, #16
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7fd fee6 	bl	80066a0 <_printf_float>
 80088d4:	4607      	mov	r7, r0
 80088d6:	1c78      	adds	r0, r7, #1
 80088d8:	d1d6      	bne.n	8008888 <_vfiprintf_r+0x1bc>
 80088da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088dc:	07d9      	lsls	r1, r3, #31
 80088de:	d405      	bmi.n	80088ec <_vfiprintf_r+0x220>
 80088e0:	89ab      	ldrh	r3, [r5, #12]
 80088e2:	059a      	lsls	r2, r3, #22
 80088e4:	d402      	bmi.n	80088ec <_vfiprintf_r+0x220>
 80088e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e8:	f7ff fa34 	bl	8007d54 <__retarget_lock_release_recursive>
 80088ec:	89ab      	ldrh	r3, [r5, #12]
 80088ee:	065b      	lsls	r3, r3, #25
 80088f0:	f53f af12 	bmi.w	8008718 <_vfiprintf_r+0x4c>
 80088f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088f6:	e711      	b.n	800871c <_vfiprintf_r+0x50>
 80088f8:	ab03      	add	r3, sp, #12
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	462a      	mov	r2, r5
 80088fe:	4b09      	ldr	r3, [pc, #36]	; (8008924 <_vfiprintf_r+0x258>)
 8008900:	a904      	add	r1, sp, #16
 8008902:	4630      	mov	r0, r6
 8008904:	f7fe f970 	bl	8006be8 <_printf_i>
 8008908:	e7e4      	b.n	80088d4 <_vfiprintf_r+0x208>
 800890a:	bf00      	nop
 800890c:	080097c0 	.word	0x080097c0
 8008910:	080097e0 	.word	0x080097e0
 8008914:	080097a0 	.word	0x080097a0
 8008918:	0800995c 	.word	0x0800995c
 800891c:	08009966 	.word	0x08009966
 8008920:	080066a1 	.word	0x080066a1
 8008924:	080086a7 	.word	0x080086a7
 8008928:	08009962 	.word	0x08009962

0800892c <_sbrk_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d06      	ldr	r5, [pc, #24]	; (8008948 <_sbrk_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	f7f9 fa48 	bl	8001dcc <_sbrk>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_sbrk_r+0x1a>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_sbrk_r+0x1a>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	20000428 	.word	0x20000428

0800894c <__sread>:
 800894c:	b510      	push	{r4, lr}
 800894e:	460c      	mov	r4, r1
 8008950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008954:	f000 faa8 	bl	8008ea8 <_read_r>
 8008958:	2800      	cmp	r0, #0
 800895a:	bfab      	itete	ge
 800895c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800895e:	89a3      	ldrhlt	r3, [r4, #12]
 8008960:	181b      	addge	r3, r3, r0
 8008962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008966:	bfac      	ite	ge
 8008968:	6563      	strge	r3, [r4, #84]	; 0x54
 800896a:	81a3      	strhlt	r3, [r4, #12]
 800896c:	bd10      	pop	{r4, pc}

0800896e <__swrite>:
 800896e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008972:	461f      	mov	r7, r3
 8008974:	898b      	ldrh	r3, [r1, #12]
 8008976:	05db      	lsls	r3, r3, #23
 8008978:	4605      	mov	r5, r0
 800897a:	460c      	mov	r4, r1
 800897c:	4616      	mov	r6, r2
 800897e:	d505      	bpl.n	800898c <__swrite+0x1e>
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	2302      	movs	r3, #2
 8008986:	2200      	movs	r2, #0
 8008988:	f000 f9f8 	bl	8008d7c <_lseek_r>
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	4632      	mov	r2, r6
 800899a:	463b      	mov	r3, r7
 800899c:	4628      	mov	r0, r5
 800899e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	f000 b869 	b.w	8008a78 <_write_r>

080089a6 <__sseek>:
 80089a6:	b510      	push	{r4, lr}
 80089a8:	460c      	mov	r4, r1
 80089aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ae:	f000 f9e5 	bl	8008d7c <_lseek_r>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	bf15      	itete	ne
 80089b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089c2:	81a3      	strheq	r3, [r4, #12]
 80089c4:	bf18      	it	ne
 80089c6:	81a3      	strhne	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__sclose>:
 80089ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ce:	f000 b8f1 	b.w	8008bb4 <_close_r>
	...

080089d4 <__swbuf_r>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	460e      	mov	r6, r1
 80089d8:	4614      	mov	r4, r2
 80089da:	4605      	mov	r5, r0
 80089dc:	b118      	cbz	r0, 80089e6 <__swbuf_r+0x12>
 80089de:	6983      	ldr	r3, [r0, #24]
 80089e0:	b90b      	cbnz	r3, 80089e6 <__swbuf_r+0x12>
 80089e2:	f7ff f913 	bl	8007c0c <__sinit>
 80089e6:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <__swbuf_r+0x98>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d12b      	bne.n	8008a44 <__swbuf_r+0x70>
 80089ec:	686c      	ldr	r4, [r5, #4]
 80089ee:	69a3      	ldr	r3, [r4, #24]
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	071a      	lsls	r2, r3, #28
 80089f6:	d52f      	bpl.n	8008a58 <__swbuf_r+0x84>
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	b36b      	cbz	r3, 8008a58 <__swbuf_r+0x84>
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	1ac0      	subs	r0, r0, r3
 8008a02:	6963      	ldr	r3, [r4, #20]
 8008a04:	b2f6      	uxtb	r6, r6
 8008a06:	4283      	cmp	r3, r0
 8008a08:	4637      	mov	r7, r6
 8008a0a:	dc04      	bgt.n	8008a16 <__swbuf_r+0x42>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 f966 	bl	8008ce0 <_fflush_r>
 8008a14:	bb30      	cbnz	r0, 8008a64 <__swbuf_r+0x90>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	60a3      	str	r3, [r4, #8]
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	701e      	strb	r6, [r3, #0]
 8008a24:	6963      	ldr	r3, [r4, #20]
 8008a26:	3001      	adds	r0, #1
 8008a28:	4283      	cmp	r3, r0
 8008a2a:	d004      	beq.n	8008a36 <__swbuf_r+0x62>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	07db      	lsls	r3, r3, #31
 8008a30:	d506      	bpl.n	8008a40 <__swbuf_r+0x6c>
 8008a32:	2e0a      	cmp	r6, #10
 8008a34:	d104      	bne.n	8008a40 <__swbuf_r+0x6c>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f951 	bl	8008ce0 <_fflush_r>
 8008a3e:	b988      	cbnz	r0, 8008a64 <__swbuf_r+0x90>
 8008a40:	4638      	mov	r0, r7
 8008a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <__swbuf_r+0x9c>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d101      	bne.n	8008a4e <__swbuf_r+0x7a>
 8008a4a:	68ac      	ldr	r4, [r5, #8]
 8008a4c:	e7cf      	b.n	80089ee <__swbuf_r+0x1a>
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <__swbuf_r+0xa0>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	bf08      	it	eq
 8008a54:	68ec      	ldreq	r4, [r5, #12]
 8008a56:	e7ca      	b.n	80089ee <__swbuf_r+0x1a>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f000 f81e 	bl	8008a9c <__swsetup_r>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d0cb      	beq.n	80089fc <__swbuf_r+0x28>
 8008a64:	f04f 37ff 	mov.w	r7, #4294967295
 8008a68:	e7ea      	b.n	8008a40 <__swbuf_r+0x6c>
 8008a6a:	bf00      	nop
 8008a6c:	080097c0 	.word	0x080097c0
 8008a70:	080097e0 	.word	0x080097e0
 8008a74:	080097a0 	.word	0x080097a0

08008a78 <_write_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_write_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f7f9 f94f 	bl	8001d2a <_write>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_write_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_write_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	20000428 	.word	0x20000428

08008a9c <__swsetup_r>:
 8008a9c:	4b32      	ldr	r3, [pc, #200]	; (8008b68 <__swsetup_r+0xcc>)
 8008a9e:	b570      	push	{r4, r5, r6, lr}
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	b125      	cbz	r5, 8008ab2 <__swsetup_r+0x16>
 8008aa8:	69ab      	ldr	r3, [r5, #24]
 8008aaa:	b913      	cbnz	r3, 8008ab2 <__swsetup_r+0x16>
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7ff f8ad 	bl	8007c0c <__sinit>
 8008ab2:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <__swsetup_r+0xd0>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d10f      	bne.n	8008ad8 <__swsetup_r+0x3c>
 8008ab8:	686c      	ldr	r4, [r5, #4]
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ac0:	0719      	lsls	r1, r3, #28
 8008ac2:	d42c      	bmi.n	8008b1e <__swsetup_r+0x82>
 8008ac4:	06dd      	lsls	r5, r3, #27
 8008ac6:	d411      	bmi.n	8008aec <__swsetup_r+0x50>
 8008ac8:	2309      	movs	r3, #9
 8008aca:	6033      	str	r3, [r6, #0]
 8008acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad6:	e03e      	b.n	8008b56 <__swsetup_r+0xba>
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <__swsetup_r+0xd4>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d101      	bne.n	8008ae2 <__swsetup_r+0x46>
 8008ade:	68ac      	ldr	r4, [r5, #8]
 8008ae0:	e7eb      	b.n	8008aba <__swsetup_r+0x1e>
 8008ae2:	4b24      	ldr	r3, [pc, #144]	; (8008b74 <__swsetup_r+0xd8>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	bf08      	it	eq
 8008ae8:	68ec      	ldreq	r4, [r5, #12]
 8008aea:	e7e6      	b.n	8008aba <__swsetup_r+0x1e>
 8008aec:	0758      	lsls	r0, r3, #29
 8008aee:	d512      	bpl.n	8008b16 <__swsetup_r+0x7a>
 8008af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af2:	b141      	cbz	r1, 8008b06 <__swsetup_r+0x6a>
 8008af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af8:	4299      	cmp	r1, r3
 8008afa:	d002      	beq.n	8008b02 <__swsetup_r+0x66>
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff fcdb 	bl	80084b8 <_free_r>
 8008b02:	2300      	movs	r3, #0
 8008b04:	6363      	str	r3, [r4, #52]	; 0x34
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f043 0308 	orr.w	r3, r3, #8
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	b94b      	cbnz	r3, 8008b36 <__swsetup_r+0x9a>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2c:	d003      	beq.n	8008b36 <__swsetup_r+0x9a>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 f95b 	bl	8008dec <__smakebuf_r>
 8008b36:	89a0      	ldrh	r0, [r4, #12]
 8008b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b3c:	f010 0301 	ands.w	r3, r0, #1
 8008b40:	d00a      	beq.n	8008b58 <__swsetup_r+0xbc>
 8008b42:	2300      	movs	r3, #0
 8008b44:	60a3      	str	r3, [r4, #8]
 8008b46:	6963      	ldr	r3, [r4, #20]
 8008b48:	425b      	negs	r3, r3
 8008b4a:	61a3      	str	r3, [r4, #24]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	b943      	cbnz	r3, 8008b62 <__swsetup_r+0xc6>
 8008b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b54:	d1ba      	bne.n	8008acc <__swsetup_r+0x30>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	0781      	lsls	r1, r0, #30
 8008b5a:	bf58      	it	pl
 8008b5c:	6963      	ldrpl	r3, [r4, #20]
 8008b5e:	60a3      	str	r3, [r4, #8]
 8008b60:	e7f4      	b.n	8008b4c <__swsetup_r+0xb0>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e7f7      	b.n	8008b56 <__swsetup_r+0xba>
 8008b66:	bf00      	nop
 8008b68:	200000a4 	.word	0x200000a4
 8008b6c:	080097c0 	.word	0x080097c0
 8008b70:	080097e0 	.word	0x080097e0
 8008b74:	080097a0 	.word	0x080097a0

08008b78 <__assert_func>:
 8008b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b7a:	4614      	mov	r4, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <__assert_func+0x2c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4605      	mov	r5, r0
 8008b84:	68d8      	ldr	r0, [r3, #12]
 8008b86:	b14c      	cbz	r4, 8008b9c <__assert_func+0x24>
 8008b88:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <__assert_func+0x30>)
 8008b8a:	9100      	str	r1, [sp, #0]
 8008b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b90:	4906      	ldr	r1, [pc, #24]	; (8008bac <__assert_func+0x34>)
 8008b92:	462b      	mov	r3, r5
 8008b94:	f000 f8e0 	bl	8008d58 <fiprintf>
 8008b98:	f000 f9a5 	bl	8008ee6 <abort>
 8008b9c:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <__assert_func+0x38>)
 8008b9e:	461c      	mov	r4, r3
 8008ba0:	e7f3      	b.n	8008b8a <__assert_func+0x12>
 8008ba2:	bf00      	nop
 8008ba4:	200000a4 	.word	0x200000a4
 8008ba8:	0800996d 	.word	0x0800996d
 8008bac:	0800997a 	.word	0x0800997a
 8008bb0:	080099a8 	.word	0x080099a8

08008bb4 <_close_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d06      	ldr	r5, [pc, #24]	; (8008bd0 <_close_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7f9 f8cf 	bl	8001d62 <_close>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_close_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_close_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000428 	.word	0x20000428

08008bd4 <__sflush_r>:
 8008bd4:	898a      	ldrh	r2, [r1, #12]
 8008bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	4605      	mov	r5, r0
 8008bdc:	0710      	lsls	r0, r2, #28
 8008bde:	460c      	mov	r4, r1
 8008be0:	d458      	bmi.n	8008c94 <__sflush_r+0xc0>
 8008be2:	684b      	ldr	r3, [r1, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dc05      	bgt.n	8008bf4 <__sflush_r+0x20>
 8008be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	dc02      	bgt.n	8008bf4 <__sflush_r+0x20>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bf6:	2e00      	cmp	r6, #0
 8008bf8:	d0f9      	beq.n	8008bee <__sflush_r+0x1a>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c00:	682f      	ldr	r7, [r5, #0]
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	d032      	beq.n	8008c6c <__sflush_r+0x98>
 8008c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	075a      	lsls	r2, r3, #29
 8008c0c:	d505      	bpl.n	8008c1a <__sflush_r+0x46>
 8008c0e:	6863      	ldr	r3, [r4, #4]
 8008c10:	1ac0      	subs	r0, r0, r3
 8008c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c14:	b10b      	cbz	r3, 8008c1a <__sflush_r+0x46>
 8008c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c18:	1ac0      	subs	r0, r0, r3
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c20:	6a21      	ldr	r1, [r4, #32]
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b0      	blx	r6
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	d106      	bne.n	8008c3a <__sflush_r+0x66>
 8008c2c:	6829      	ldr	r1, [r5, #0]
 8008c2e:	291d      	cmp	r1, #29
 8008c30:	d82c      	bhi.n	8008c8c <__sflush_r+0xb8>
 8008c32:	4a2a      	ldr	r2, [pc, #168]	; (8008cdc <__sflush_r+0x108>)
 8008c34:	40ca      	lsrs	r2, r1
 8008c36:	07d6      	lsls	r6, r2, #31
 8008c38:	d528      	bpl.n	8008c8c <__sflush_r+0xb8>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	6062      	str	r2, [r4, #4]
 8008c3e:	04d9      	lsls	r1, r3, #19
 8008c40:	6922      	ldr	r2, [r4, #16]
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	d504      	bpl.n	8008c50 <__sflush_r+0x7c>
 8008c46:	1c42      	adds	r2, r0, #1
 8008c48:	d101      	bne.n	8008c4e <__sflush_r+0x7a>
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	b903      	cbnz	r3, 8008c50 <__sflush_r+0x7c>
 8008c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8008c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c52:	602f      	str	r7, [r5, #0]
 8008c54:	2900      	cmp	r1, #0
 8008c56:	d0ca      	beq.n	8008bee <__sflush_r+0x1a>
 8008c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c5c:	4299      	cmp	r1, r3
 8008c5e:	d002      	beq.n	8008c66 <__sflush_r+0x92>
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7ff fc29 	bl	80084b8 <_free_r>
 8008c66:	2000      	movs	r0, #0
 8008c68:	6360      	str	r0, [r4, #52]	; 0x34
 8008c6a:	e7c1      	b.n	8008bf0 <__sflush_r+0x1c>
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b0      	blx	r6
 8008c74:	1c41      	adds	r1, r0, #1
 8008c76:	d1c7      	bne.n	8008c08 <__sflush_r+0x34>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0c4      	beq.n	8008c08 <__sflush_r+0x34>
 8008c7e:	2b1d      	cmp	r3, #29
 8008c80:	d001      	beq.n	8008c86 <__sflush_r+0xb2>
 8008c82:	2b16      	cmp	r3, #22
 8008c84:	d101      	bne.n	8008c8a <__sflush_r+0xb6>
 8008c86:	602f      	str	r7, [r5, #0]
 8008c88:	e7b1      	b.n	8008bee <__sflush_r+0x1a>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	e7ad      	b.n	8008bf0 <__sflush_r+0x1c>
 8008c94:	690f      	ldr	r7, [r1, #16]
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	d0a9      	beq.n	8008bee <__sflush_r+0x1a>
 8008c9a:	0793      	lsls	r3, r2, #30
 8008c9c:	680e      	ldr	r6, [r1, #0]
 8008c9e:	bf08      	it	eq
 8008ca0:	694b      	ldreq	r3, [r1, #20]
 8008ca2:	600f      	str	r7, [r1, #0]
 8008ca4:	bf18      	it	ne
 8008ca6:	2300      	movne	r3, #0
 8008ca8:	eba6 0807 	sub.w	r8, r6, r7
 8008cac:	608b      	str	r3, [r1, #8]
 8008cae:	f1b8 0f00 	cmp.w	r8, #0
 8008cb2:	dd9c      	ble.n	8008bee <__sflush_r+0x1a>
 8008cb4:	6a21      	ldr	r1, [r4, #32]
 8008cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cb8:	4643      	mov	r3, r8
 8008cba:	463a      	mov	r2, r7
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b0      	blx	r6
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	dc06      	bgt.n	8008cd2 <__sflush_r+0xfe>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	e78e      	b.n	8008bf0 <__sflush_r+0x1c>
 8008cd2:	4407      	add	r7, r0
 8008cd4:	eba8 0800 	sub.w	r8, r8, r0
 8008cd8:	e7e9      	b.n	8008cae <__sflush_r+0xda>
 8008cda:	bf00      	nop
 8008cdc:	20400001 	.word	0x20400001

08008ce0 <_fflush_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	690b      	ldr	r3, [r1, #16]
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	b913      	cbnz	r3, 8008cf0 <_fflush_r+0x10>
 8008cea:	2500      	movs	r5, #0
 8008cec:	4628      	mov	r0, r5
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	b118      	cbz	r0, 8008cfa <_fflush_r+0x1a>
 8008cf2:	6983      	ldr	r3, [r0, #24]
 8008cf4:	b90b      	cbnz	r3, 8008cfa <_fflush_r+0x1a>
 8008cf6:	f7fe ff89 	bl	8007c0c <__sinit>
 8008cfa:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <_fflush_r+0x6c>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d11b      	bne.n	8008d38 <_fflush_r+0x58>
 8008d00:	686c      	ldr	r4, [r5, #4]
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0ef      	beq.n	8008cea <_fflush_r+0xa>
 8008d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d404      	bmi.n	8008d1a <_fflush_r+0x3a>
 8008d10:	0599      	lsls	r1, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_fflush_r+0x3a>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f7ff f81c 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7ff ff59 	bl	8008bd4 <__sflush_r>
 8008d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	4605      	mov	r5, r0
 8008d28:	d4e0      	bmi.n	8008cec <_fflush_r+0xc>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	059b      	lsls	r3, r3, #22
 8008d2e:	d4dd      	bmi.n	8008cec <_fflush_r+0xc>
 8008d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d32:	f7ff f80f 	bl	8007d54 <__retarget_lock_release_recursive>
 8008d36:	e7d9      	b.n	8008cec <_fflush_r+0xc>
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <_fflush_r+0x70>)
 8008d3a:	429c      	cmp	r4, r3
 8008d3c:	d101      	bne.n	8008d42 <_fflush_r+0x62>
 8008d3e:	68ac      	ldr	r4, [r5, #8]
 8008d40:	e7df      	b.n	8008d02 <_fflush_r+0x22>
 8008d42:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <_fflush_r+0x74>)
 8008d44:	429c      	cmp	r4, r3
 8008d46:	bf08      	it	eq
 8008d48:	68ec      	ldreq	r4, [r5, #12]
 8008d4a:	e7da      	b.n	8008d02 <_fflush_r+0x22>
 8008d4c:	080097c0 	.word	0x080097c0
 8008d50:	080097e0 	.word	0x080097e0
 8008d54:	080097a0 	.word	0x080097a0

08008d58 <fiprintf>:
 8008d58:	b40e      	push	{r1, r2, r3}
 8008d5a:	b503      	push	{r0, r1, lr}
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	ab03      	add	r3, sp, #12
 8008d60:	4805      	ldr	r0, [pc, #20]	; (8008d78 <fiprintf+0x20>)
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	f7ff fcaf 	bl	80086cc <_vfiprintf_r>
 8008d6e:	b002      	add	sp, #8
 8008d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d74:	b003      	add	sp, #12
 8008d76:	4770      	bx	lr
 8008d78:	200000a4 	.word	0x200000a4

08008d7c <_lseek_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_lseek_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f9 f810 	bl	8001db0 <_lseek>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_lseek_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_lseek_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20000428 	.word	0x20000428

08008da0 <__swhatbuf_r>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	460e      	mov	r6, r1
 8008da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da8:	2900      	cmp	r1, #0
 8008daa:	b096      	sub	sp, #88	; 0x58
 8008dac:	4614      	mov	r4, r2
 8008dae:	461d      	mov	r5, r3
 8008db0:	da08      	bge.n	8008dc4 <__swhatbuf_r+0x24>
 8008db2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	602a      	str	r2, [r5, #0]
 8008dba:	061a      	lsls	r2, r3, #24
 8008dbc:	d410      	bmi.n	8008de0 <__swhatbuf_r+0x40>
 8008dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dc2:	e00e      	b.n	8008de2 <__swhatbuf_r+0x42>
 8008dc4:	466a      	mov	r2, sp
 8008dc6:	f000 f895 	bl	8008ef4 <_fstat_r>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	dbf1      	blt.n	8008db2 <__swhatbuf_r+0x12>
 8008dce:	9a01      	ldr	r2, [sp, #4]
 8008dd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dd8:	425a      	negs	r2, r3
 8008dda:	415a      	adcs	r2, r3
 8008ddc:	602a      	str	r2, [r5, #0]
 8008dde:	e7ee      	b.n	8008dbe <__swhatbuf_r+0x1e>
 8008de0:	2340      	movs	r3, #64	; 0x40
 8008de2:	2000      	movs	r0, #0
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	b016      	add	sp, #88	; 0x58
 8008de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dec <__smakebuf_r>:
 8008dec:	898b      	ldrh	r3, [r1, #12]
 8008dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008df0:	079d      	lsls	r5, r3, #30
 8008df2:	4606      	mov	r6, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	d507      	bpl.n	8008e08 <__smakebuf_r+0x1c>
 8008df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2301      	movs	r3, #1
 8008e02:	6163      	str	r3, [r4, #20]
 8008e04:	b002      	add	sp, #8
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	ab01      	add	r3, sp, #4
 8008e0a:	466a      	mov	r2, sp
 8008e0c:	f7ff ffc8 	bl	8008da0 <__swhatbuf_r>
 8008e10:	9900      	ldr	r1, [sp, #0]
 8008e12:	4605      	mov	r5, r0
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff fbbb 	bl	8008590 <_malloc_r>
 8008e1a:	b948      	cbnz	r0, 8008e30 <__smakebuf_r+0x44>
 8008e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e20:	059a      	lsls	r2, r3, #22
 8008e22:	d4ef      	bmi.n	8008e04 <__smakebuf_r+0x18>
 8008e24:	f023 0303 	bic.w	r3, r3, #3
 8008e28:	f043 0302 	orr.w	r3, r3, #2
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	e7e3      	b.n	8008df8 <__smakebuf_r+0xc>
 8008e30:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <__smakebuf_r+0x7c>)
 8008e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	9b00      	ldr	r3, [sp, #0]
 8008e40:	6163      	str	r3, [r4, #20]
 8008e42:	9b01      	ldr	r3, [sp, #4]
 8008e44:	6120      	str	r0, [r4, #16]
 8008e46:	b15b      	cbz	r3, 8008e60 <__smakebuf_r+0x74>
 8008e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f000 f863 	bl	8008f18 <_isatty_r>
 8008e52:	b128      	cbz	r0, 8008e60 <__smakebuf_r+0x74>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	f043 0301 	orr.w	r3, r3, #1
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	89a0      	ldrh	r0, [r4, #12]
 8008e62:	4305      	orrs	r5, r0
 8008e64:	81a5      	strh	r5, [r4, #12]
 8008e66:	e7cd      	b.n	8008e04 <__smakebuf_r+0x18>
 8008e68:	08007ba5 	.word	0x08007ba5

08008e6c <__ascii_mbtowc>:
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	b901      	cbnz	r1, 8008e72 <__ascii_mbtowc+0x6>
 8008e70:	a901      	add	r1, sp, #4
 8008e72:	b142      	cbz	r2, 8008e86 <__ascii_mbtowc+0x1a>
 8008e74:	b14b      	cbz	r3, 8008e8a <__ascii_mbtowc+0x1e>
 8008e76:	7813      	ldrb	r3, [r2, #0]
 8008e78:	600b      	str	r3, [r1, #0]
 8008e7a:	7812      	ldrb	r2, [r2, #0]
 8008e7c:	1e10      	subs	r0, r2, #0
 8008e7e:	bf18      	it	ne
 8008e80:	2001      	movne	r0, #1
 8008e82:	b002      	add	sp, #8
 8008e84:	4770      	bx	lr
 8008e86:	4610      	mov	r0, r2
 8008e88:	e7fb      	b.n	8008e82 <__ascii_mbtowc+0x16>
 8008e8a:	f06f 0001 	mvn.w	r0, #1
 8008e8e:	e7f8      	b.n	8008e82 <__ascii_mbtowc+0x16>

08008e90 <__malloc_lock>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__malloc_lock+0x8>)
 8008e92:	f7fe bf5e 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 8008e96:	bf00      	nop
 8008e98:	2000041c 	.word	0x2000041c

08008e9c <__malloc_unlock>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <__malloc_unlock+0x8>)
 8008e9e:	f7fe bf59 	b.w	8007d54 <__retarget_lock_release_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	2000041c 	.word	0x2000041c

08008ea8 <_read_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	; (8008ec8 <_read_r+0x20>)
 8008eac:	4604      	mov	r4, r0
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f8 ff1a 	bl	8001cf0 <_read>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_read_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_read_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20000428 	.word	0x20000428

08008ecc <__ascii_wctomb>:
 8008ecc:	b149      	cbz	r1, 8008ee2 <__ascii_wctomb+0x16>
 8008ece:	2aff      	cmp	r2, #255	; 0xff
 8008ed0:	bf85      	ittet	hi
 8008ed2:	238a      	movhi	r3, #138	; 0x8a
 8008ed4:	6003      	strhi	r3, [r0, #0]
 8008ed6:	700a      	strbls	r2, [r1, #0]
 8008ed8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008edc:	bf98      	it	ls
 8008ede:	2001      	movls	r0, #1
 8008ee0:	4770      	bx	lr
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	4770      	bx	lr

08008ee6 <abort>:
 8008ee6:	b508      	push	{r3, lr}
 8008ee8:	2006      	movs	r0, #6
 8008eea:	f000 f84d 	bl	8008f88 <raise>
 8008eee:	2001      	movs	r0, #1
 8008ef0:	f7f8 fef4 	bl	8001cdc <_exit>

08008ef4 <_fstat_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	; (8008f14 <_fstat_r+0x20>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	f7f8 ff3a 	bl	8001d7a <_fstat>
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	d102      	bne.n	8008f10 <_fstat_r+0x1c>
 8008f0a:	682b      	ldr	r3, [r5, #0]
 8008f0c:	b103      	cbz	r3, 8008f10 <_fstat_r+0x1c>
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
 8008f12:	bf00      	nop
 8008f14:	20000428 	.word	0x20000428

08008f18 <_isatty_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_isatty_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f8 ff39 	bl	8001d9a <_isatty>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_isatty_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_isatty_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20000428 	.word	0x20000428

08008f38 <_raise_r>:
 8008f38:	291f      	cmp	r1, #31
 8008f3a:	b538      	push	{r3, r4, r5, lr}
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	460d      	mov	r5, r1
 8008f40:	d904      	bls.n	8008f4c <_raise_r+0x14>
 8008f42:	2316      	movs	r3, #22
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f4e:	b112      	cbz	r2, 8008f56 <_raise_r+0x1e>
 8008f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f54:	b94b      	cbnz	r3, 8008f6a <_raise_r+0x32>
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 f830 	bl	8008fbc <_getpid_r>
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4601      	mov	r1, r0
 8008f60:	4620      	mov	r0, r4
 8008f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f66:	f000 b817 	b.w	8008f98 <_kill_r>
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d00a      	beq.n	8008f84 <_raise_r+0x4c>
 8008f6e:	1c59      	adds	r1, r3, #1
 8008f70:	d103      	bne.n	8008f7a <_raise_r+0x42>
 8008f72:	2316      	movs	r3, #22
 8008f74:	6003      	str	r3, [r0, #0]
 8008f76:	2001      	movs	r0, #1
 8008f78:	e7e7      	b.n	8008f4a <_raise_r+0x12>
 8008f7a:	2400      	movs	r4, #0
 8008f7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f80:	4628      	mov	r0, r5
 8008f82:	4798      	blx	r3
 8008f84:	2000      	movs	r0, #0
 8008f86:	e7e0      	b.n	8008f4a <_raise_r+0x12>

08008f88 <raise>:
 8008f88:	4b02      	ldr	r3, [pc, #8]	; (8008f94 <raise+0xc>)
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	f7ff bfd3 	b.w	8008f38 <_raise_r>
 8008f92:	bf00      	nop
 8008f94:	200000a4 	.word	0x200000a4

08008f98 <_kill_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d07      	ldr	r5, [pc, #28]	; (8008fb8 <_kill_r+0x20>)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	602b      	str	r3, [r5, #0]
 8008fa6:	f7f8 fe89 	bl	8001cbc <_kill>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d102      	bne.n	8008fb4 <_kill_r+0x1c>
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	b103      	cbz	r3, 8008fb4 <_kill_r+0x1c>
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000428 	.word	0x20000428

08008fbc <_getpid_r>:
 8008fbc:	f7f8 be76 	b.w	8001cac <_getpid>

08008fc0 <atan>:
 8008fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	ec55 4b10 	vmov	r4, r5, d0
 8008fc8:	4bc3      	ldr	r3, [pc, #780]	; (80092d8 <atan+0x318>)
 8008fca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008fce:	429e      	cmp	r6, r3
 8008fd0:	46ab      	mov	fp, r5
 8008fd2:	dd18      	ble.n	8009006 <atan+0x46>
 8008fd4:	4bc1      	ldr	r3, [pc, #772]	; (80092dc <atan+0x31c>)
 8008fd6:	429e      	cmp	r6, r3
 8008fd8:	dc01      	bgt.n	8008fde <atan+0x1e>
 8008fda:	d109      	bne.n	8008ff0 <atan+0x30>
 8008fdc:	b144      	cbz	r4, 8008ff0 <atan+0x30>
 8008fde:	4622      	mov	r2, r4
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	f7f7 f951 	bl	800028c <__adddf3>
 8008fea:	4604      	mov	r4, r0
 8008fec:	460d      	mov	r5, r1
 8008fee:	e006      	b.n	8008ffe <atan+0x3e>
 8008ff0:	f1bb 0f00 	cmp.w	fp, #0
 8008ff4:	f300 8131 	bgt.w	800925a <atan+0x29a>
 8008ff8:	a59b      	add	r5, pc, #620	; (adr r5, 8009268 <atan+0x2a8>)
 8008ffa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ffe:	ec45 4b10 	vmov	d0, r4, r5
 8009002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009006:	4bb6      	ldr	r3, [pc, #728]	; (80092e0 <atan+0x320>)
 8009008:	429e      	cmp	r6, r3
 800900a:	dc14      	bgt.n	8009036 <atan+0x76>
 800900c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009010:	429e      	cmp	r6, r3
 8009012:	dc0d      	bgt.n	8009030 <atan+0x70>
 8009014:	a396      	add	r3, pc, #600	; (adr r3, 8009270 <atan+0x2b0>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	ee10 0a10 	vmov	r0, s0
 800901e:	4629      	mov	r1, r5
 8009020:	f7f7 f934 	bl	800028c <__adddf3>
 8009024:	4baf      	ldr	r3, [pc, #700]	; (80092e4 <atan+0x324>)
 8009026:	2200      	movs	r2, #0
 8009028:	f7f7 fd76 	bl	8000b18 <__aeabi_dcmpgt>
 800902c:	2800      	cmp	r0, #0
 800902e:	d1e6      	bne.n	8008ffe <atan+0x3e>
 8009030:	f04f 3aff 	mov.w	sl, #4294967295
 8009034:	e02b      	b.n	800908e <atan+0xce>
 8009036:	f000 f963 	bl	8009300 <fabs>
 800903a:	4bab      	ldr	r3, [pc, #684]	; (80092e8 <atan+0x328>)
 800903c:	429e      	cmp	r6, r3
 800903e:	ec55 4b10 	vmov	r4, r5, d0
 8009042:	f300 80bf 	bgt.w	80091c4 <atan+0x204>
 8009046:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800904a:	429e      	cmp	r6, r3
 800904c:	f300 80a0 	bgt.w	8009190 <atan+0x1d0>
 8009050:	ee10 2a10 	vmov	r2, s0
 8009054:	ee10 0a10 	vmov	r0, s0
 8009058:	462b      	mov	r3, r5
 800905a:	4629      	mov	r1, r5
 800905c:	f7f7 f916 	bl	800028c <__adddf3>
 8009060:	4ba0      	ldr	r3, [pc, #640]	; (80092e4 <atan+0x324>)
 8009062:	2200      	movs	r2, #0
 8009064:	f7f7 f910 	bl	8000288 <__aeabi_dsub>
 8009068:	2200      	movs	r2, #0
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 f909 	bl	800028c <__adddf3>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 fbe3 	bl	800084c <__aeabi_ddiv>
 8009086:	f04f 0a00 	mov.w	sl, #0
 800908a:	4604      	mov	r4, r0
 800908c:	460d      	mov	r5, r1
 800908e:	4622      	mov	r2, r4
 8009090:	462b      	mov	r3, r5
 8009092:	4620      	mov	r0, r4
 8009094:	4629      	mov	r1, r5
 8009096:	f7f7 faaf 	bl	80005f8 <__aeabi_dmul>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4680      	mov	r8, r0
 80090a0:	4689      	mov	r9, r1
 80090a2:	f7f7 faa9 	bl	80005f8 <__aeabi_dmul>
 80090a6:	a374      	add	r3, pc, #464	; (adr r3, 8009278 <atan+0x2b8>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	f7f7 faa2 	bl	80005f8 <__aeabi_dmul>
 80090b4:	a372      	add	r3, pc, #456	; (adr r3, 8009280 <atan+0x2c0>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8e7 	bl	800028c <__adddf3>
 80090be:	4632      	mov	r2, r6
 80090c0:	463b      	mov	r3, r7
 80090c2:	f7f7 fa99 	bl	80005f8 <__aeabi_dmul>
 80090c6:	a370      	add	r3, pc, #448	; (adr r3, 8009288 <atan+0x2c8>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f7 f8de 	bl	800028c <__adddf3>
 80090d0:	4632      	mov	r2, r6
 80090d2:	463b      	mov	r3, r7
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	a36d      	add	r3, pc, #436	; (adr r3, 8009290 <atan+0x2d0>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 f8d5 	bl	800028c <__adddf3>
 80090e2:	4632      	mov	r2, r6
 80090e4:	463b      	mov	r3, r7
 80090e6:	f7f7 fa87 	bl	80005f8 <__aeabi_dmul>
 80090ea:	a36b      	add	r3, pc, #428	; (adr r3, 8009298 <atan+0x2d8>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f8cc 	bl	800028c <__adddf3>
 80090f4:	4632      	mov	r2, r6
 80090f6:	463b      	mov	r3, r7
 80090f8:	f7f7 fa7e 	bl	80005f8 <__aeabi_dmul>
 80090fc:	a368      	add	r3, pc, #416	; (adr r3, 80092a0 <atan+0x2e0>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7f7 f8c3 	bl	800028c <__adddf3>
 8009106:	4642      	mov	r2, r8
 8009108:	464b      	mov	r3, r9
 800910a:	f7f7 fa75 	bl	80005f8 <__aeabi_dmul>
 800910e:	a366      	add	r3, pc, #408	; (adr r3, 80092a8 <atan+0x2e8>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	4680      	mov	r8, r0
 8009116:	4689      	mov	r9, r1
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 fa6c 	bl	80005f8 <__aeabi_dmul>
 8009120:	a363      	add	r3, pc, #396	; (adr r3, 80092b0 <atan+0x2f0>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 f8af 	bl	8000288 <__aeabi_dsub>
 800912a:	4632      	mov	r2, r6
 800912c:	463b      	mov	r3, r7
 800912e:	f7f7 fa63 	bl	80005f8 <__aeabi_dmul>
 8009132:	a361      	add	r3, pc, #388	; (adr r3, 80092b8 <atan+0x2f8>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f7f7 f8a6 	bl	8000288 <__aeabi_dsub>
 800913c:	4632      	mov	r2, r6
 800913e:	463b      	mov	r3, r7
 8009140:	f7f7 fa5a 	bl	80005f8 <__aeabi_dmul>
 8009144:	a35e      	add	r3, pc, #376	; (adr r3, 80092c0 <atan+0x300>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7f7 f89d 	bl	8000288 <__aeabi_dsub>
 800914e:	4632      	mov	r2, r6
 8009150:	463b      	mov	r3, r7
 8009152:	f7f7 fa51 	bl	80005f8 <__aeabi_dmul>
 8009156:	a35c      	add	r3, pc, #368	; (adr r3, 80092c8 <atan+0x308>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7f7 f894 	bl	8000288 <__aeabi_dsub>
 8009160:	4632      	mov	r2, r6
 8009162:	463b      	mov	r3, r7
 8009164:	f7f7 fa48 	bl	80005f8 <__aeabi_dmul>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 f88c 	bl	800028c <__adddf3>
 8009174:	4622      	mov	r2, r4
 8009176:	462b      	mov	r3, r5
 8009178:	f7f7 fa3e 	bl	80005f8 <__aeabi_dmul>
 800917c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	d14b      	bne.n	800921e <atan+0x25e>
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 f87d 	bl	8000288 <__aeabi_dsub>
 800918e:	e72c      	b.n	8008fea <atan+0x2a>
 8009190:	ee10 0a10 	vmov	r0, s0
 8009194:	4b53      	ldr	r3, [pc, #332]	; (80092e4 <atan+0x324>)
 8009196:	2200      	movs	r2, #0
 8009198:	4629      	mov	r1, r5
 800919a:	f7f7 f875 	bl	8000288 <__aeabi_dsub>
 800919e:	4b51      	ldr	r3, [pc, #324]	; (80092e4 <atan+0x324>)
 80091a0:	4606      	mov	r6, r0
 80091a2:	460f      	mov	r7, r1
 80091a4:	2200      	movs	r2, #0
 80091a6:	4620      	mov	r0, r4
 80091a8:	4629      	mov	r1, r5
 80091aa:	f7f7 f86f 	bl	800028c <__adddf3>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 fb49 	bl	800084c <__aeabi_ddiv>
 80091ba:	f04f 0a01 	mov.w	sl, #1
 80091be:	4604      	mov	r4, r0
 80091c0:	460d      	mov	r5, r1
 80091c2:	e764      	b.n	800908e <atan+0xce>
 80091c4:	4b49      	ldr	r3, [pc, #292]	; (80092ec <atan+0x32c>)
 80091c6:	429e      	cmp	r6, r3
 80091c8:	da1d      	bge.n	8009206 <atan+0x246>
 80091ca:	ee10 0a10 	vmov	r0, s0
 80091ce:	4b48      	ldr	r3, [pc, #288]	; (80092f0 <atan+0x330>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	4629      	mov	r1, r5
 80091d4:	f7f7 f858 	bl	8000288 <__aeabi_dsub>
 80091d8:	4b45      	ldr	r3, [pc, #276]	; (80092f0 <atan+0x330>)
 80091da:	4606      	mov	r6, r0
 80091dc:	460f      	mov	r7, r1
 80091de:	2200      	movs	r2, #0
 80091e0:	4620      	mov	r0, r4
 80091e2:	4629      	mov	r1, r5
 80091e4:	f7f7 fa08 	bl	80005f8 <__aeabi_dmul>
 80091e8:	4b3e      	ldr	r3, [pc, #248]	; (80092e4 <atan+0x324>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 f84e 	bl	800028c <__adddf3>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 fb28 	bl	800084c <__aeabi_ddiv>
 80091fc:	f04f 0a02 	mov.w	sl, #2
 8009200:	4604      	mov	r4, r0
 8009202:	460d      	mov	r5, r1
 8009204:	e743      	b.n	800908e <atan+0xce>
 8009206:	462b      	mov	r3, r5
 8009208:	ee10 2a10 	vmov	r2, s0
 800920c:	4939      	ldr	r1, [pc, #228]	; (80092f4 <atan+0x334>)
 800920e:	2000      	movs	r0, #0
 8009210:	f7f7 fb1c 	bl	800084c <__aeabi_ddiv>
 8009214:	f04f 0a03 	mov.w	sl, #3
 8009218:	4604      	mov	r4, r0
 800921a:	460d      	mov	r5, r1
 800921c:	e737      	b.n	800908e <atan+0xce>
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <atan+0x338>)
 8009220:	4e36      	ldr	r6, [pc, #216]	; (80092fc <atan+0x33c>)
 8009222:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009226:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800922a:	e9da 2300 	ldrd	r2, r3, [sl]
 800922e:	f7f7 f82b 	bl	8000288 <__aeabi_dsub>
 8009232:	4622      	mov	r2, r4
 8009234:	462b      	mov	r3, r5
 8009236:	f7f7 f827 	bl	8000288 <__aeabi_dsub>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009242:	f7f7 f821 	bl	8000288 <__aeabi_dsub>
 8009246:	f1bb 0f00 	cmp.w	fp, #0
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	f6bf aed6 	bge.w	8008ffe <atan+0x3e>
 8009252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009256:	461d      	mov	r5, r3
 8009258:	e6d1      	b.n	8008ffe <atan+0x3e>
 800925a:	a51d      	add	r5, pc, #116	; (adr r5, 80092d0 <atan+0x310>)
 800925c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009260:	e6cd      	b.n	8008ffe <atan+0x3e>
 8009262:	bf00      	nop
 8009264:	f3af 8000 	nop.w
 8009268:	54442d18 	.word	0x54442d18
 800926c:	bff921fb 	.word	0xbff921fb
 8009270:	8800759c 	.word	0x8800759c
 8009274:	7e37e43c 	.word	0x7e37e43c
 8009278:	e322da11 	.word	0xe322da11
 800927c:	3f90ad3a 	.word	0x3f90ad3a
 8009280:	24760deb 	.word	0x24760deb
 8009284:	3fa97b4b 	.word	0x3fa97b4b
 8009288:	a0d03d51 	.word	0xa0d03d51
 800928c:	3fb10d66 	.word	0x3fb10d66
 8009290:	c54c206e 	.word	0xc54c206e
 8009294:	3fb745cd 	.word	0x3fb745cd
 8009298:	920083ff 	.word	0x920083ff
 800929c:	3fc24924 	.word	0x3fc24924
 80092a0:	5555550d 	.word	0x5555550d
 80092a4:	3fd55555 	.word	0x3fd55555
 80092a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80092ac:	bfa2b444 	.word	0xbfa2b444
 80092b0:	52defd9a 	.word	0x52defd9a
 80092b4:	3fadde2d 	.word	0x3fadde2d
 80092b8:	af749a6d 	.word	0xaf749a6d
 80092bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80092c0:	fe231671 	.word	0xfe231671
 80092c4:	3fbc71c6 	.word	0x3fbc71c6
 80092c8:	9998ebc4 	.word	0x9998ebc4
 80092cc:	3fc99999 	.word	0x3fc99999
 80092d0:	54442d18 	.word	0x54442d18
 80092d4:	3ff921fb 	.word	0x3ff921fb
 80092d8:	440fffff 	.word	0x440fffff
 80092dc:	7ff00000 	.word	0x7ff00000
 80092e0:	3fdbffff 	.word	0x3fdbffff
 80092e4:	3ff00000 	.word	0x3ff00000
 80092e8:	3ff2ffff 	.word	0x3ff2ffff
 80092ec:	40038000 	.word	0x40038000
 80092f0:	3ff80000 	.word	0x3ff80000
 80092f4:	bff00000 	.word	0xbff00000
 80092f8:	08009ad8 	.word	0x08009ad8
 80092fc:	08009ab8 	.word	0x08009ab8

08009300 <fabs>:
 8009300:	ec51 0b10 	vmov	r0, r1, d0
 8009304:	ee10 2a10 	vmov	r2, s0
 8009308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800930c:	ec43 2b10 	vmov	d0, r2, r3
 8009310:	4770      	bx	lr

08009312 <atan2>:
 8009312:	f000 b82d 	b.w	8009370 <__ieee754_atan2>

08009316 <sqrt>:
 8009316:	b538      	push	{r3, r4, r5, lr}
 8009318:	ed2d 8b02 	vpush	{d8}
 800931c:	ec55 4b10 	vmov	r4, r5, d0
 8009320:	f000 f8f0 	bl	8009504 <__ieee754_sqrt>
 8009324:	4622      	mov	r2, r4
 8009326:	462b      	mov	r3, r5
 8009328:	4620      	mov	r0, r4
 800932a:	4629      	mov	r1, r5
 800932c:	eeb0 8a40 	vmov.f32	s16, s0
 8009330:	eef0 8a60 	vmov.f32	s17, s1
 8009334:	f7f7 fbfa 	bl	8000b2c <__aeabi_dcmpun>
 8009338:	b990      	cbnz	r0, 8009360 <sqrt+0x4a>
 800933a:	2200      	movs	r2, #0
 800933c:	2300      	movs	r3, #0
 800933e:	4620      	mov	r0, r4
 8009340:	4629      	mov	r1, r5
 8009342:	f7f7 fbcb 	bl	8000adc <__aeabi_dcmplt>
 8009346:	b158      	cbz	r0, 8009360 <sqrt+0x4a>
 8009348:	f7fd f8d8 	bl	80064fc <__errno>
 800934c:	2321      	movs	r3, #33	; 0x21
 800934e:	6003      	str	r3, [r0, #0]
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	4610      	mov	r0, r2
 8009356:	4619      	mov	r1, r3
 8009358:	f7f7 fa78 	bl	800084c <__aeabi_ddiv>
 800935c:	ec41 0b18 	vmov	d8, r0, r1
 8009360:	eeb0 0a48 	vmov.f32	s0, s16
 8009364:	eef0 0a68 	vmov.f32	s1, s17
 8009368:	ecbd 8b02 	vpop	{d8}
 800936c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009370 <__ieee754_atan2>:
 8009370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009374:	ec57 6b11 	vmov	r6, r7, d1
 8009378:	4273      	negs	r3, r6
 800937a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009500 <__ieee754_atan2+0x190>
 800937e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009382:	4333      	orrs	r3, r6
 8009384:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009388:	4573      	cmp	r3, lr
 800938a:	ec51 0b10 	vmov	r0, r1, d0
 800938e:	ee11 8a10 	vmov	r8, s2
 8009392:	d80a      	bhi.n	80093aa <__ieee754_atan2+0x3a>
 8009394:	4244      	negs	r4, r0
 8009396:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800939a:	4304      	orrs	r4, r0
 800939c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80093a0:	4574      	cmp	r4, lr
 80093a2:	ee10 9a10 	vmov	r9, s0
 80093a6:	468c      	mov	ip, r1
 80093a8:	d907      	bls.n	80093ba <__ieee754_atan2+0x4a>
 80093aa:	4632      	mov	r2, r6
 80093ac:	463b      	mov	r3, r7
 80093ae:	f7f6 ff6d 	bl	800028c <__adddf3>
 80093b2:	ec41 0b10 	vmov	d0, r0, r1
 80093b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80093be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80093c2:	4334      	orrs	r4, r6
 80093c4:	d103      	bne.n	80093ce <__ieee754_atan2+0x5e>
 80093c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ca:	f7ff bdf9 	b.w	8008fc0 <atan>
 80093ce:	17bc      	asrs	r4, r7, #30
 80093d0:	f004 0402 	and.w	r4, r4, #2
 80093d4:	ea53 0909 	orrs.w	r9, r3, r9
 80093d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80093dc:	d107      	bne.n	80093ee <__ieee754_atan2+0x7e>
 80093de:	2c02      	cmp	r4, #2
 80093e0:	d060      	beq.n	80094a4 <__ieee754_atan2+0x134>
 80093e2:	2c03      	cmp	r4, #3
 80093e4:	d1e5      	bne.n	80093b2 <__ieee754_atan2+0x42>
 80093e6:	a142      	add	r1, pc, #264	; (adr r1, 80094f0 <__ieee754_atan2+0x180>)
 80093e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ec:	e7e1      	b.n	80093b2 <__ieee754_atan2+0x42>
 80093ee:	ea52 0808 	orrs.w	r8, r2, r8
 80093f2:	d106      	bne.n	8009402 <__ieee754_atan2+0x92>
 80093f4:	f1bc 0f00 	cmp.w	ip, #0
 80093f8:	da5f      	bge.n	80094ba <__ieee754_atan2+0x14a>
 80093fa:	a13f      	add	r1, pc, #252	; (adr r1, 80094f8 <__ieee754_atan2+0x188>)
 80093fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009400:	e7d7      	b.n	80093b2 <__ieee754_atan2+0x42>
 8009402:	4572      	cmp	r2, lr
 8009404:	d10f      	bne.n	8009426 <__ieee754_atan2+0xb6>
 8009406:	4293      	cmp	r3, r2
 8009408:	f104 34ff 	add.w	r4, r4, #4294967295
 800940c:	d107      	bne.n	800941e <__ieee754_atan2+0xae>
 800940e:	2c02      	cmp	r4, #2
 8009410:	d84c      	bhi.n	80094ac <__ieee754_atan2+0x13c>
 8009412:	4b35      	ldr	r3, [pc, #212]	; (80094e8 <__ieee754_atan2+0x178>)
 8009414:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009418:	e9d4 0100 	ldrd	r0, r1, [r4]
 800941c:	e7c9      	b.n	80093b2 <__ieee754_atan2+0x42>
 800941e:	2c02      	cmp	r4, #2
 8009420:	d848      	bhi.n	80094b4 <__ieee754_atan2+0x144>
 8009422:	4b32      	ldr	r3, [pc, #200]	; (80094ec <__ieee754_atan2+0x17c>)
 8009424:	e7f6      	b.n	8009414 <__ieee754_atan2+0xa4>
 8009426:	4573      	cmp	r3, lr
 8009428:	d0e4      	beq.n	80093f4 <__ieee754_atan2+0x84>
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009430:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009434:	da1e      	bge.n	8009474 <__ieee754_atan2+0x104>
 8009436:	2f00      	cmp	r7, #0
 8009438:	da01      	bge.n	800943e <__ieee754_atan2+0xce>
 800943a:	323c      	adds	r2, #60	; 0x3c
 800943c:	db1e      	blt.n	800947c <__ieee754_atan2+0x10c>
 800943e:	4632      	mov	r2, r6
 8009440:	463b      	mov	r3, r7
 8009442:	f7f7 fa03 	bl	800084c <__aeabi_ddiv>
 8009446:	ec41 0b10 	vmov	d0, r0, r1
 800944a:	f7ff ff59 	bl	8009300 <fabs>
 800944e:	f7ff fdb7 	bl	8008fc0 <atan>
 8009452:	ec51 0b10 	vmov	r0, r1, d0
 8009456:	2c01      	cmp	r4, #1
 8009458:	d013      	beq.n	8009482 <__ieee754_atan2+0x112>
 800945a:	2c02      	cmp	r4, #2
 800945c:	d015      	beq.n	800948a <__ieee754_atan2+0x11a>
 800945e:	2c00      	cmp	r4, #0
 8009460:	d0a7      	beq.n	80093b2 <__ieee754_atan2+0x42>
 8009462:	a319      	add	r3, pc, #100	; (adr r3, 80094c8 <__ieee754_atan2+0x158>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f6 ff0e 	bl	8000288 <__aeabi_dsub>
 800946c:	a318      	add	r3, pc, #96	; (adr r3, 80094d0 <__ieee754_atan2+0x160>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	e014      	b.n	800949e <__ieee754_atan2+0x12e>
 8009474:	a118      	add	r1, pc, #96	; (adr r1, 80094d8 <__ieee754_atan2+0x168>)
 8009476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947a:	e7ec      	b.n	8009456 <__ieee754_atan2+0xe6>
 800947c:	2000      	movs	r0, #0
 800947e:	2100      	movs	r1, #0
 8009480:	e7e9      	b.n	8009456 <__ieee754_atan2+0xe6>
 8009482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009486:	4619      	mov	r1, r3
 8009488:	e793      	b.n	80093b2 <__ieee754_atan2+0x42>
 800948a:	a30f      	add	r3, pc, #60	; (adr r3, 80094c8 <__ieee754_atan2+0x158>)
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f6 fefa 	bl	8000288 <__aeabi_dsub>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	a10d      	add	r1, pc, #52	; (adr r1, 80094d0 <__ieee754_atan2+0x160>)
 800949a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800949e:	f7f6 fef3 	bl	8000288 <__aeabi_dsub>
 80094a2:	e786      	b.n	80093b2 <__ieee754_atan2+0x42>
 80094a4:	a10a      	add	r1, pc, #40	; (adr r1, 80094d0 <__ieee754_atan2+0x160>)
 80094a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094aa:	e782      	b.n	80093b2 <__ieee754_atan2+0x42>
 80094ac:	a10c      	add	r1, pc, #48	; (adr r1, 80094e0 <__ieee754_atan2+0x170>)
 80094ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094b2:	e77e      	b.n	80093b2 <__ieee754_atan2+0x42>
 80094b4:	2000      	movs	r0, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	e77b      	b.n	80093b2 <__ieee754_atan2+0x42>
 80094ba:	a107      	add	r1, pc, #28	; (adr r1, 80094d8 <__ieee754_atan2+0x168>)
 80094bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094c0:	e777      	b.n	80093b2 <__ieee754_atan2+0x42>
 80094c2:	bf00      	nop
 80094c4:	f3af 8000 	nop.w
 80094c8:	33145c07 	.word	0x33145c07
 80094cc:	3ca1a626 	.word	0x3ca1a626
 80094d0:	54442d18 	.word	0x54442d18
 80094d4:	400921fb 	.word	0x400921fb
 80094d8:	54442d18 	.word	0x54442d18
 80094dc:	3ff921fb 	.word	0x3ff921fb
 80094e0:	54442d18 	.word	0x54442d18
 80094e4:	3fe921fb 	.word	0x3fe921fb
 80094e8:	08009af8 	.word	0x08009af8
 80094ec:	08009b10 	.word	0x08009b10
 80094f0:	54442d18 	.word	0x54442d18
 80094f4:	c00921fb 	.word	0xc00921fb
 80094f8:	54442d18 	.word	0x54442d18
 80094fc:	bff921fb 	.word	0xbff921fb
 8009500:	7ff00000 	.word	0x7ff00000

08009504 <__ieee754_sqrt>:
 8009504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009508:	ec55 4b10 	vmov	r4, r5, d0
 800950c:	4e55      	ldr	r6, [pc, #340]	; (8009664 <__ieee754_sqrt+0x160>)
 800950e:	43ae      	bics	r6, r5
 8009510:	ee10 0a10 	vmov	r0, s0
 8009514:	ee10 3a10 	vmov	r3, s0
 8009518:	462a      	mov	r2, r5
 800951a:	4629      	mov	r1, r5
 800951c:	d110      	bne.n	8009540 <__ieee754_sqrt+0x3c>
 800951e:	ee10 2a10 	vmov	r2, s0
 8009522:	462b      	mov	r3, r5
 8009524:	f7f7 f868 	bl	80005f8 <__aeabi_dmul>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f6 feac 	bl	800028c <__adddf3>
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	ec45 4b10 	vmov	d0, r4, r5
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	2d00      	cmp	r5, #0
 8009542:	dc10      	bgt.n	8009566 <__ieee754_sqrt+0x62>
 8009544:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009548:	4330      	orrs	r0, r6
 800954a:	d0f5      	beq.n	8009538 <__ieee754_sqrt+0x34>
 800954c:	b15d      	cbz	r5, 8009566 <__ieee754_sqrt+0x62>
 800954e:	ee10 2a10 	vmov	r2, s0
 8009552:	462b      	mov	r3, r5
 8009554:	ee10 0a10 	vmov	r0, s0
 8009558:	f7f6 fe96 	bl	8000288 <__aeabi_dsub>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	f7f7 f974 	bl	800084c <__aeabi_ddiv>
 8009564:	e7e6      	b.n	8009534 <__ieee754_sqrt+0x30>
 8009566:	1512      	asrs	r2, r2, #20
 8009568:	d074      	beq.n	8009654 <__ieee754_sqrt+0x150>
 800956a:	07d4      	lsls	r4, r2, #31
 800956c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009570:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009578:	bf5e      	ittt	pl
 800957a:	0fda      	lsrpl	r2, r3, #31
 800957c:	005b      	lslpl	r3, r3, #1
 800957e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009582:	2400      	movs	r4, #0
 8009584:	0fda      	lsrs	r2, r3, #31
 8009586:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800958a:	107f      	asrs	r7, r7, #1
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	2516      	movs	r5, #22
 8009590:	4620      	mov	r0, r4
 8009592:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009596:	1886      	adds	r6, r0, r2
 8009598:	428e      	cmp	r6, r1
 800959a:	bfde      	ittt	le
 800959c:	1b89      	suble	r1, r1, r6
 800959e:	18b0      	addle	r0, r6, r2
 80095a0:	18a4      	addle	r4, r4, r2
 80095a2:	0049      	lsls	r1, r1, #1
 80095a4:	3d01      	subs	r5, #1
 80095a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80095aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80095ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095b2:	d1f0      	bne.n	8009596 <__ieee754_sqrt+0x92>
 80095b4:	462a      	mov	r2, r5
 80095b6:	f04f 0e20 	mov.w	lr, #32
 80095ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80095be:	4281      	cmp	r1, r0
 80095c0:	eb06 0c05 	add.w	ip, r6, r5
 80095c4:	dc02      	bgt.n	80095cc <__ieee754_sqrt+0xc8>
 80095c6:	d113      	bne.n	80095f0 <__ieee754_sqrt+0xec>
 80095c8:	459c      	cmp	ip, r3
 80095ca:	d811      	bhi.n	80095f0 <__ieee754_sqrt+0xec>
 80095cc:	f1bc 0f00 	cmp.w	ip, #0
 80095d0:	eb0c 0506 	add.w	r5, ip, r6
 80095d4:	da43      	bge.n	800965e <__ieee754_sqrt+0x15a>
 80095d6:	2d00      	cmp	r5, #0
 80095d8:	db41      	blt.n	800965e <__ieee754_sqrt+0x15a>
 80095da:	f100 0801 	add.w	r8, r0, #1
 80095de:	1a09      	subs	r1, r1, r0
 80095e0:	459c      	cmp	ip, r3
 80095e2:	bf88      	it	hi
 80095e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80095e8:	eba3 030c 	sub.w	r3, r3, ip
 80095ec:	4432      	add	r2, r6
 80095ee:	4640      	mov	r0, r8
 80095f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80095f4:	f1be 0e01 	subs.w	lr, lr, #1
 80095f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80095fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009600:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009604:	d1db      	bne.n	80095be <__ieee754_sqrt+0xba>
 8009606:	430b      	orrs	r3, r1
 8009608:	d006      	beq.n	8009618 <__ieee754_sqrt+0x114>
 800960a:	1c50      	adds	r0, r2, #1
 800960c:	bf13      	iteet	ne
 800960e:	3201      	addne	r2, #1
 8009610:	3401      	addeq	r4, #1
 8009612:	4672      	moveq	r2, lr
 8009614:	f022 0201 	bicne.w	r2, r2, #1
 8009618:	1063      	asrs	r3, r4, #1
 800961a:	0852      	lsrs	r2, r2, #1
 800961c:	07e1      	lsls	r1, r4, #31
 800961e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009622:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009626:	bf48      	it	mi
 8009628:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800962c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009630:	4614      	mov	r4, r2
 8009632:	e781      	b.n	8009538 <__ieee754_sqrt+0x34>
 8009634:	0ad9      	lsrs	r1, r3, #11
 8009636:	3815      	subs	r0, #21
 8009638:	055b      	lsls	r3, r3, #21
 800963a:	2900      	cmp	r1, #0
 800963c:	d0fa      	beq.n	8009634 <__ieee754_sqrt+0x130>
 800963e:	02cd      	lsls	r5, r1, #11
 8009640:	d50a      	bpl.n	8009658 <__ieee754_sqrt+0x154>
 8009642:	f1c2 0420 	rsb	r4, r2, #32
 8009646:	fa23 f404 	lsr.w	r4, r3, r4
 800964a:	1e55      	subs	r5, r2, #1
 800964c:	4093      	lsls	r3, r2
 800964e:	4321      	orrs	r1, r4
 8009650:	1b42      	subs	r2, r0, r5
 8009652:	e78a      	b.n	800956a <__ieee754_sqrt+0x66>
 8009654:	4610      	mov	r0, r2
 8009656:	e7f0      	b.n	800963a <__ieee754_sqrt+0x136>
 8009658:	0049      	lsls	r1, r1, #1
 800965a:	3201      	adds	r2, #1
 800965c:	e7ef      	b.n	800963e <__ieee754_sqrt+0x13a>
 800965e:	4680      	mov	r8, r0
 8009660:	e7bd      	b.n	80095de <__ieee754_sqrt+0xda>
 8009662:	bf00      	nop
 8009664:	7ff00000 	.word	0x7ff00000

08009668 <_init>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	bf00      	nop
 800966c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966e:	bc08      	pop	{r3}
 8009670:	469e      	mov	lr, r3
 8009672:	4770      	bx	lr

08009674 <_fini>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	bf00      	nop
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr
